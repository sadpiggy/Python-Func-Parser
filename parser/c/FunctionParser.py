# Generated from Function.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,100,801,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,1,0,1,0,1,0,1,0,1,0,1,0,5,0,179,8,0,10,0,12,0,182,9,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,192,8,1,1,2,1,2,1,3,1,3,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,227,8,8,1,8,3,
        8,230,8,8,1,8,1,8,3,8,234,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,243,
        8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,256,8,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,268,8,11,
        1,11,3,11,271,8,11,1,12,3,12,274,8,12,1,12,1,12,1,12,3,12,279,8,
        12,1,12,1,12,1,13,3,13,284,8,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
        14,1,14,3,14,294,8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,21,3,21,311,8,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,353,8,
        21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,4,25,373,8,25,11,25,12,25,374,1,26,1,
        26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
        33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,3,37,402,8,
        37,1,38,1,38,1,38,1,38,3,38,408,8,38,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,3,39,417,8,39,1,40,1,40,1,40,3,40,422,8,40,1,41,1,41,1,41,
        3,41,427,8,41,1,42,1,42,1,42,3,42,432,8,42,1,43,1,43,1,43,3,43,437,
        8,43,1,44,1,44,1,44,3,44,442,8,44,1,45,1,45,1,45,1,45,3,45,448,8,
        45,1,46,1,46,1,46,1,46,3,46,454,8,46,1,47,1,47,1,47,3,47,459,8,47,
        1,48,1,48,1,48,3,48,464,8,48,1,49,1,49,1,49,3,49,469,8,49,1,50,1,
        50,1,50,1,50,1,50,1,50,3,50,477,8,50,1,51,1,51,5,51,481,8,51,10,
        51,12,51,484,9,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,493,8,
        52,1,53,3,53,496,8,53,1,53,1,53,1,53,1,53,3,53,502,8,53,1,53,1,53,
        1,53,3,53,507,8,53,1,53,1,53,1,53,1,53,3,53,513,8,53,1,53,1,53,3,
        53,517,8,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,3,55,530,8,55,1,56,1,56,1,57,1,57,5,57,536,8,57,10,57,12,57,539,
        9,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,561,8,60,1,60,1,60,
        1,60,1,60,3,60,567,8,60,1,60,1,60,1,60,5,60,572,8,60,10,60,12,60,
        575,9,60,1,61,1,61,1,61,5,61,580,8,61,10,61,12,61,583,9,61,3,61,
        585,8,61,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,595,8,63,1,
        64,1,64,1,64,3,64,600,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,
        64,609,8,64,1,65,3,65,612,8,65,1,65,1,65,3,65,616,8,65,1,66,1,66,
        3,66,620,8,66,1,66,1,66,3,66,624,8,66,1,67,3,67,627,8,67,1,67,3,
        67,630,8,67,1,67,1,67,1,68,1,68,3,68,636,8,68,1,68,1,68,1,68,3,68,
        641,8,68,1,69,1,69,1,69,5,69,646,8,69,10,69,12,69,649,9,69,1,69,
        1,69,1,70,1,70,1,70,1,70,1,70,3,70,658,8,70,1,71,1,71,1,71,5,71,
        663,8,71,10,71,12,71,666,9,71,1,72,1,72,3,72,670,8,72,1,72,3,72,
        673,8,72,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,5,74,684,8,
        74,10,74,12,74,687,9,74,1,75,3,75,690,8,75,1,75,3,75,693,8,75,1,
        75,1,75,1,76,5,76,698,8,76,10,76,12,76,701,9,76,1,76,3,76,704,8,
        76,1,76,1,76,1,76,1,76,1,76,3,76,711,8,76,1,76,1,76,1,76,1,76,1,
        76,1,76,3,76,719,8,76,5,76,721,8,76,10,76,12,76,724,9,76,1,76,3,
        76,727,8,76,1,76,1,76,3,76,731,8,76,1,77,4,77,734,8,77,11,77,12,
        77,735,1,78,3,78,739,8,78,1,78,1,78,1,79,1,79,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,5,80,752,8,80,10,80,12,80,755,9,80,3,80,757,8,80,
        1,80,3,80,760,8,80,1,81,1,81,1,81,1,82,3,82,766,8,82,1,82,1,82,1,
        82,1,82,1,82,3,82,773,8,82,3,82,775,8,82,1,82,3,82,778,8,82,1,83,
        1,83,1,83,5,83,783,8,83,10,83,12,83,786,9,83,1,83,3,83,789,8,83,
        1,84,1,84,1,85,1,85,3,85,795,8,85,4,85,797,8,85,11,85,12,85,798,
        1,85,0,1,120,86,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
        150,152,154,156,158,160,162,164,166,168,170,0,26,1,0,6,11,1,0,12,
        15,1,0,91,96,2,0,16,19,73,73,1,0,6,7,1,0,20,22,2,0,23,23,83,83,3,
        0,5,5,30,37,40,41,1,0,42,43,1,0,1,2,3,0,1,2,24,25,86,87,1,0,1,3,
        2,0,1,2,12,13,1,0,86,87,1,0,24,25,2,0,3,3,24,25,2,0,3,3,48,48,4,
        0,1,3,24,25,48,48,86,87,1,0,38,39,1,0,8,9,2,0,7,7,26,27,1,0,46,47,
        2,0,69,70,84,84,3,0,68,68,71,71,85,85,1,0,79,80,1,0,91,93,864,0,
        180,1,0,0,0,2,191,1,0,0,0,4,193,1,0,0,0,6,195,1,0,0,0,8,197,1,0,
        0,0,10,199,1,0,0,0,12,201,1,0,0,0,14,203,1,0,0,0,16,242,1,0,0,0,
        18,244,1,0,0,0,20,255,1,0,0,0,22,270,1,0,0,0,24,273,1,0,0,0,26,283,
        1,0,0,0,28,293,1,0,0,0,30,295,1,0,0,0,32,297,1,0,0,0,34,299,1,0,
        0,0,36,301,1,0,0,0,38,303,1,0,0,0,40,305,1,0,0,0,42,352,1,0,0,0,
        44,354,1,0,0,0,46,356,1,0,0,0,48,358,1,0,0,0,50,372,1,0,0,0,52,376,
        1,0,0,0,54,378,1,0,0,0,56,380,1,0,0,0,58,382,1,0,0,0,60,384,1,0,
        0,0,62,386,1,0,0,0,64,388,1,0,0,0,66,390,1,0,0,0,68,392,1,0,0,0,
        70,394,1,0,0,0,72,396,1,0,0,0,74,398,1,0,0,0,76,403,1,0,0,0,78,416,
        1,0,0,0,80,418,1,0,0,0,82,423,1,0,0,0,84,428,1,0,0,0,86,433,1,0,
        0,0,88,438,1,0,0,0,90,443,1,0,0,0,92,449,1,0,0,0,94,455,1,0,0,0,
        96,460,1,0,0,0,98,465,1,0,0,0,100,476,1,0,0,0,102,478,1,0,0,0,104,
        492,1,0,0,0,106,516,1,0,0,0,108,518,1,0,0,0,110,529,1,0,0,0,112,
        531,1,0,0,0,114,533,1,0,0,0,116,540,1,0,0,0,118,542,1,0,0,0,120,
        544,1,0,0,0,122,584,1,0,0,0,124,586,1,0,0,0,126,594,1,0,0,0,128,
        608,1,0,0,0,130,611,1,0,0,0,132,623,1,0,0,0,134,626,1,0,0,0,136,
        640,1,0,0,0,138,642,1,0,0,0,140,657,1,0,0,0,142,659,1,0,0,0,144,
        667,1,0,0,0,146,677,1,0,0,0,148,679,1,0,0,0,150,689,1,0,0,0,152,
        730,1,0,0,0,154,733,1,0,0,0,156,738,1,0,0,0,158,742,1,0,0,0,160,
        759,1,0,0,0,162,761,1,0,0,0,164,765,1,0,0,0,166,788,1,0,0,0,168,
        790,1,0,0,0,170,796,1,0,0,0,172,179,3,4,2,0,173,179,3,8,4,0,174,
        175,3,6,3,0,175,176,6,0,-1,0,176,179,1,0,0,0,177,179,3,2,1,0,178,
        172,1,0,0,0,178,173,1,0,0,0,178,174,1,0,0,0,178,177,1,0,0,0,179,
        182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,1,1,0,0,0,182,180,
        1,0,0,0,183,192,3,10,5,0,184,192,3,12,6,0,185,192,3,14,7,0,186,192,
        3,22,11,0,187,192,3,24,12,0,188,192,3,134,67,0,189,192,3,26,13,0,
        190,192,3,72,36,0,191,183,1,0,0,0,191,184,1,0,0,0,191,185,1,0,0,
        0,191,186,1,0,0,0,191,187,1,0,0,0,191,188,1,0,0,0,191,189,1,0,0,
        0,191,190,1,0,0,0,192,3,1,0,0,0,193,194,5,88,0,0,194,5,1,0,0,0,195,
        196,5,89,0,0,196,7,1,0,0,0,197,198,5,90,0,0,198,9,1,0,0,0,199,200,
        5,86,0,0,200,11,1,0,0,0,201,202,5,87,0,0,202,13,1,0,0,0,203,204,
        3,16,8,0,204,15,1,0,0,0,205,243,5,74,0,0,206,207,5,75,0,0,207,208,
        5,1,0,0,208,209,3,162,81,0,209,210,5,2,0,0,210,243,1,0,0,0,211,212,
        5,56,0,0,212,213,5,1,0,0,213,214,3,28,14,0,214,215,5,2,0,0,215,243,
        1,0,0,0,216,243,5,57,0,0,217,218,5,63,0,0,218,219,5,1,0,0,219,220,
        3,28,14,0,220,221,5,2,0,0,221,243,1,0,0,0,222,223,5,58,0,0,223,226,
        5,1,0,0,224,227,3,20,10,0,225,227,5,3,0,0,226,224,1,0,0,0,226,225,
        1,0,0,0,227,229,1,0,0,0,228,230,3,28,14,0,229,228,1,0,0,0,229,230,
        1,0,0,0,230,231,1,0,0,0,231,233,5,3,0,0,232,234,3,74,37,0,233,232,
        1,0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,243,5,2,0,0,236,243,
        5,64,0,0,237,238,5,59,0,0,238,239,5,1,0,0,239,240,3,28,14,0,240,
        241,5,2,0,0,241,243,1,0,0,0,242,205,1,0,0,0,242,206,1,0,0,0,242,
        211,1,0,0,0,242,216,1,0,0,0,242,217,1,0,0,0,242,222,1,0,0,0,242,
        236,1,0,0,0,242,237,1,0,0,0,243,17,1,0,0,0,244,245,5,64,0,0,245,
        246,3,2,1,0,246,247,5,59,0,0,247,248,5,1,0,0,248,249,3,74,37,0,249,
        250,5,2,0,0,250,19,1,0,0,0,251,256,3,134,67,0,252,253,3,74,37,0,
        253,254,5,3,0,0,254,256,1,0,0,0,255,251,1,0,0,0,255,252,1,0,0,0,
        256,21,1,0,0,0,257,258,5,60,0,0,258,271,5,3,0,0,259,260,5,62,0,0,
        260,271,5,3,0,0,261,262,5,65,0,0,262,263,3,166,83,0,263,264,5,3,
        0,0,264,271,1,0,0,0,265,267,5,66,0,0,266,268,3,74,37,0,267,266,1,
        0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,271,5,3,0,0,270,257,1,
        0,0,0,270,259,1,0,0,0,270,261,1,0,0,0,270,265,1,0,0,0,271,23,1,0,
        0,0,272,274,5,61,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,278,1,0,
        0,0,275,279,3,166,83,0,276,279,3,168,84,0,277,279,5,95,0,0,278,275,
        1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,280,1,0,0,0,280,281,
        5,4,0,0,281,25,1,0,0,0,282,284,3,74,37,0,283,282,1,0,0,0,283,284,
        1,0,0,0,284,285,1,0,0,0,285,286,5,3,0,0,286,27,1,0,0,0,287,294,3,
        74,37,0,288,289,3,152,76,0,289,290,3,130,65,0,290,291,5,5,0,0,291,
        292,3,76,38,0,292,294,1,0,0,0,293,287,1,0,0,0,293,288,1,0,0,0,294,
        29,1,0,0,0,295,296,7,0,0,0,296,31,1,0,0,0,297,298,7,1,0,0,298,33,
        1,0,0,0,299,300,7,2,0,0,300,35,1,0,0,0,301,302,7,3,0,0,302,37,1,
        0,0,0,303,304,7,4,0,0,304,39,1,0,0,0,305,306,7,5,0,0,306,41,1,0,
        0,0,307,310,7,6,0,0,308,309,5,24,0,0,309,311,5,25,0,0,310,308,1,
        0,0,0,310,311,1,0,0,0,311,353,1,0,0,0,312,353,5,8,0,0,313,353,5,
        9,0,0,314,353,5,7,0,0,315,353,5,26,0,0,316,353,5,27,0,0,317,353,
        5,28,0,0,318,353,5,6,0,0,319,353,5,29,0,0,320,353,5,10,0,0,321,353,
        5,11,0,0,322,353,5,5,0,0,323,353,5,12,0,0,324,353,5,13,0,0,325,353,
        5,30,0,0,326,353,5,31,0,0,327,353,5,32,0,0,328,353,5,33,0,0,329,
        353,5,34,0,0,330,353,5,35,0,0,331,353,5,36,0,0,332,353,5,37,0,0,
        333,353,5,38,0,0,334,353,5,39,0,0,335,353,5,40,0,0,336,353,5,41,
        0,0,337,353,5,42,0,0,338,353,5,43,0,0,339,353,5,14,0,0,340,353,5,
        15,0,0,341,353,5,44,0,0,342,353,5,45,0,0,343,353,5,46,0,0,344,353,
        5,47,0,0,345,353,5,48,0,0,346,353,5,49,0,0,347,353,5,50,0,0,348,
        349,5,1,0,0,349,353,5,2,0,0,350,351,5,24,0,0,351,353,5,25,0,0,352,
        307,1,0,0,0,352,312,1,0,0,0,352,313,1,0,0,0,352,314,1,0,0,0,352,
        315,1,0,0,0,352,316,1,0,0,0,352,317,1,0,0,0,352,318,1,0,0,0,352,
        319,1,0,0,0,352,320,1,0,0,0,352,321,1,0,0,0,352,322,1,0,0,0,352,
        323,1,0,0,0,352,324,1,0,0,0,352,325,1,0,0,0,352,326,1,0,0,0,352,
        327,1,0,0,0,352,328,1,0,0,0,352,329,1,0,0,0,352,330,1,0,0,0,352,
        331,1,0,0,0,352,332,1,0,0,0,352,333,1,0,0,0,352,334,1,0,0,0,352,
        335,1,0,0,0,352,336,1,0,0,0,352,337,1,0,0,0,352,338,1,0,0,0,352,
        339,1,0,0,0,352,340,1,0,0,0,352,341,1,0,0,0,352,342,1,0,0,0,352,
        343,1,0,0,0,352,344,1,0,0,0,352,345,1,0,0,0,352,346,1,0,0,0,352,
        347,1,0,0,0,352,348,1,0,0,0,352,350,1,0,0,0,353,43,1,0,0,0,354,355,
        7,7,0,0,355,45,1,0,0,0,356,357,7,8,0,0,357,47,1,0,0,0,358,359,5,
        82,0,0,359,360,5,12,0,0,360,361,3,50,25,0,361,362,5,13,0,0,362,49,
        1,0,0,0,363,364,5,12,0,0,364,365,3,50,25,0,365,366,5,13,0,0,366,
        373,1,0,0,0,367,368,5,1,0,0,368,369,3,50,25,0,369,370,5,2,0,0,370,
        373,1,0,0,0,371,373,3,58,29,0,372,363,1,0,0,0,372,367,1,0,0,0,372,
        371,1,0,0,0,373,374,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,
        51,1,0,0,0,376,377,8,9,0,0,377,53,1,0,0,0,378,379,8,10,0,0,379,55,
        1,0,0,0,380,381,8,11,0,0,381,57,1,0,0,0,382,383,8,12,0,0,383,59,
        1,0,0,0,384,385,8,13,0,0,385,61,1,0,0,0,386,387,8,14,0,0,387,63,
        1,0,0,0,388,389,8,15,0,0,389,65,1,0,0,0,390,391,8,16,0,0,391,67,
        1,0,0,0,392,393,8,17,0,0,393,69,1,0,0,0,394,395,8,10,0,0,395,71,
        1,0,0,0,396,397,9,0,0,0,397,73,1,0,0,0,398,401,3,76,38,0,399,400,
        5,48,0,0,400,402,3,74,37,0,401,399,1,0,0,0,401,402,1,0,0,0,402,75,
        1,0,0,0,403,407,3,78,39,0,404,405,3,44,22,0,405,406,3,76,38,0,406,
        408,1,0,0,0,407,404,1,0,0,0,407,408,1,0,0,0,408,77,1,0,0,0,409,417,
        3,80,40,0,410,411,3,80,40,0,411,412,5,51,0,0,412,413,3,74,37,0,413,
        414,5,4,0,0,414,415,3,78,39,0,415,417,1,0,0,0,416,409,1,0,0,0,416,
        410,1,0,0,0,417,79,1,0,0,0,418,421,3,82,41,0,419,420,5,45,0,0,420,
        422,3,80,40,0,421,419,1,0,0,0,421,422,1,0,0,0,422,81,1,0,0,0,423,
        426,3,84,42,0,424,425,5,44,0,0,425,427,3,82,41,0,426,424,1,0,0,0,
        426,427,1,0,0,0,427,83,1,0,0,0,428,431,3,86,43,0,429,430,5,29,0,
        0,430,432,3,84,42,0,431,429,1,0,0,0,431,432,1,0,0,0,432,85,1,0,0,
        0,433,436,3,88,44,0,434,435,5,28,0,0,435,437,3,86,43,0,436,434,1,
        0,0,0,436,437,1,0,0,0,437,87,1,0,0,0,438,441,3,90,45,0,439,440,5,
        6,0,0,440,442,3,88,44,0,441,439,1,0,0,0,441,442,1,0,0,0,442,89,1,
        0,0,0,443,447,3,92,46,0,444,445,3,46,23,0,445,446,3,90,45,0,446,
        448,1,0,0,0,447,444,1,0,0,0,447,448,1,0,0,0,448,91,1,0,0,0,449,453,
        3,94,47,0,450,451,3,32,16,0,451,452,3,92,46,0,452,454,1,0,0,0,453,
        450,1,0,0,0,453,454,1,0,0,0,454,93,1,0,0,0,455,458,3,96,48,0,456,
        457,7,18,0,0,457,459,3,94,47,0,458,456,1,0,0,0,458,459,1,0,0,0,459,
        95,1,0,0,0,460,463,3,98,49,0,461,462,7,19,0,0,462,464,3,96,48,0,
        463,461,1,0,0,0,463,464,1,0,0,0,464,97,1,0,0,0,465,468,3,100,50,
        0,466,467,7,20,0,0,467,469,3,98,49,0,468,466,1,0,0,0,468,469,1,0,
        0,0,469,99,1,0,0,0,470,471,5,1,0,0,471,472,3,102,51,0,472,473,5,
        2,0,0,473,474,3,100,50,0,474,477,1,0,0,0,475,477,3,104,52,0,476,
        470,1,0,0,0,476,475,1,0,0,0,477,101,1,0,0,0,478,482,3,152,76,0,479,
        481,3,38,19,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,
        483,1,0,0,0,483,103,1,0,0,0,484,482,1,0,0,0,485,486,3,118,59,0,486,
        487,3,100,50,0,487,493,1,0,0,0,488,493,3,108,54,0,489,493,3,110,
        55,0,490,493,3,106,53,0,491,493,3,120,60,0,492,485,1,0,0,0,492,488,
        1,0,0,0,492,489,1,0,0,0,492,490,1,0,0,0,492,491,1,0,0,0,493,105,
        1,0,0,0,494,496,5,52,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,
        1,0,0,0,497,498,5,83,0,0,498,499,3,152,76,0,499,501,5,24,0,0,500,
        502,3,78,39,0,501,500,1,0,0,0,501,502,1,0,0,0,502,503,1,0,0,0,503,
        504,5,25,0,0,504,517,1,0,0,0,505,507,5,52,0,0,506,505,1,0,0,0,506,
        507,1,0,0,0,507,508,1,0,0,0,508,509,5,83,0,0,509,510,3,152,76,0,
        510,512,5,1,0,0,511,513,3,74,37,0,512,511,1,0,0,0,512,513,1,0,0,
        0,513,514,1,0,0,0,514,515,5,2,0,0,515,517,1,0,0,0,516,495,1,0,0,
        0,516,506,1,0,0,0,517,107,1,0,0,0,518,519,3,30,15,0,519,520,3,100,
        50,0,520,109,1,0,0,0,521,522,3,112,56,0,522,523,5,1,0,0,523,524,
        3,114,57,0,524,525,5,2,0,0,525,530,1,0,0,0,526,527,3,112,56,0,527,
        528,3,116,58,0,528,530,1,0,0,0,529,521,1,0,0,0,529,526,1,0,0,0,530,
        111,1,0,0,0,531,532,5,53,0,0,532,113,1,0,0,0,533,537,3,152,76,0,
        534,536,3,38,19,0,535,534,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,
        0,537,538,1,0,0,0,538,115,1,0,0,0,539,537,1,0,0,0,540,541,3,104,
        52,0,541,117,1,0,0,0,542,543,7,21,0,0,543,119,1,0,0,0,544,545,6,
        60,-1,0,545,546,3,126,63,0,546,573,1,0,0,0,547,548,10,6,0,0,548,
        549,5,24,0,0,549,550,3,74,37,0,550,551,5,25,0,0,551,572,1,0,0,0,
        552,553,10,5,0,0,553,554,5,1,0,0,554,555,3,122,61,0,555,556,5,2,
        0,0,556,572,1,0,0,0,557,558,10,4,0,0,558,560,5,54,0,0,559,561,5,
        82,0,0,560,559,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,572,3,
        166,83,0,563,564,10,3,0,0,564,566,5,50,0,0,565,567,5,82,0,0,566,
        565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,572,3,166,83,0,569,
        570,10,2,0,0,570,572,3,118,59,0,571,547,1,0,0,0,571,552,1,0,0,0,
        571,557,1,0,0,0,571,563,1,0,0,0,571,569,1,0,0,0,572,575,1,0,0,0,
        573,571,1,0,0,0,573,574,1,0,0,0,574,121,1,0,0,0,575,573,1,0,0,0,
        576,581,3,124,62,0,577,578,5,48,0,0,578,580,3,124,62,0,579,577,1,
        0,0,0,580,583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,585,1,
        0,0,0,583,581,1,0,0,0,584,576,1,0,0,0,584,585,1,0,0,0,585,123,1,
        0,0,0,586,587,3,76,38,0,587,125,1,0,0,0,588,595,3,166,83,0,589,595,
        3,34,17,0,590,591,5,1,0,0,591,592,3,74,37,0,592,593,5,2,0,0,593,
        595,1,0,0,0,594,588,1,0,0,0,594,589,1,0,0,0,594,590,1,0,0,0,595,
        127,1,0,0,0,596,597,3,130,65,0,597,599,5,1,0,0,598,600,3,74,37,0,
        599,598,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,602,5,2,0,0,
        602,609,1,0,0,0,603,604,3,130,65,0,604,605,5,5,0,0,605,606,3,140,
        70,0,606,609,1,0,0,0,607,609,3,130,65,0,608,596,1,0,0,0,608,603,
        1,0,0,0,608,607,1,0,0,0,609,129,1,0,0,0,610,612,3,170,85,0,611,610,
        1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,615,3,166,83,0,614,616,
        3,132,66,0,615,614,1,0,0,0,615,616,1,0,0,0,616,131,1,0,0,0,617,619,
        5,24,0,0,618,620,3,78,39,0,619,618,1,0,0,0,619,620,1,0,0,0,620,621,
        1,0,0,0,621,624,5,25,0,0,622,624,3,160,80,0,623,617,1,0,0,0,623,
        622,1,0,0,0,624,133,1,0,0,0,625,627,5,67,0,0,626,625,1,0,0,0,626,
        627,1,0,0,0,627,629,1,0,0,0,628,630,3,48,24,0,629,628,1,0,0,0,629,
        630,1,0,0,0,630,631,1,0,0,0,631,632,3,136,68,0,632,135,1,0,0,0,633,
        635,3,144,72,0,634,636,3,138,69,0,635,634,1,0,0,0,635,636,1,0,0,
        0,636,641,1,0,0,0,637,638,3,152,76,0,638,639,3,138,69,0,639,641,
        1,0,0,0,640,633,1,0,0,0,640,637,1,0,0,0,641,137,1,0,0,0,642,647,
        3,128,64,0,643,644,5,48,0,0,644,646,3,128,64,0,645,643,1,0,0,0,646,
        649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,
        647,1,0,0,0,650,651,5,3,0,0,651,139,1,0,0,0,652,658,3,76,38,0,653,
        654,5,86,0,0,654,655,3,142,71,0,655,656,5,87,0,0,656,658,1,0,0,0,
        657,652,1,0,0,0,657,653,1,0,0,0,658,141,1,0,0,0,659,664,3,140,70,
        0,660,661,5,48,0,0,661,663,3,140,70,0,662,660,1,0,0,0,663,666,1,
        0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,143,1,0,0,0,666,664,1,
        0,0,0,667,669,5,84,0,0,668,670,3,146,73,0,669,668,1,0,0,0,669,670,
        1,0,0,0,670,672,1,0,0,0,671,673,3,148,74,0,672,671,1,0,0,0,672,673,
        1,0,0,0,673,674,1,0,0,0,674,675,5,86,0,0,675,676,6,72,-1,0,676,145,
        1,0,0,0,677,678,3,166,83,0,678,147,1,0,0,0,679,680,5,4,0,0,680,685,
        3,150,75,0,681,682,5,48,0,0,682,684,3,150,75,0,683,681,1,0,0,0,684,
        687,1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,149,1,0,0,0,687,
        685,1,0,0,0,688,690,5,73,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,
        692,1,0,0,0,691,693,3,40,20,0,692,691,1,0,0,0,692,693,1,0,0,0,693,
        694,1,0,0,0,694,695,3,166,83,0,695,151,1,0,0,0,696,698,5,72,0,0,
        697,696,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,0,0,0,
        700,703,1,0,0,0,701,699,1,0,0,0,702,704,7,22,0,0,703,702,1,0,0,0,
        703,704,1,0,0,0,704,705,1,0,0,0,705,710,3,154,77,0,706,707,5,12,
        0,0,707,708,3,50,25,0,708,709,5,13,0,0,709,711,1,0,0,0,710,706,1,
        0,0,0,710,711,1,0,0,0,711,722,1,0,0,0,712,713,5,52,0,0,713,718,3,
        154,77,0,714,715,5,12,0,0,715,716,3,50,25,0,716,717,5,13,0,0,717,
        719,1,0,0,0,718,714,1,0,0,0,718,719,1,0,0,0,719,721,1,0,0,0,720,
        712,1,0,0,0,721,724,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,
        726,1,0,0,0,724,722,1,0,0,0,725,727,5,72,0,0,726,725,1,0,0,0,726,
        727,1,0,0,0,727,731,1,0,0,0,728,731,5,69,0,0,729,731,5,70,0,0,730,
        699,1,0,0,0,730,728,1,0,0,0,730,729,1,0,0,0,731,153,1,0,0,0,732,
        734,7,23,0,0,733,732,1,0,0,0,734,735,1,0,0,0,735,733,1,0,0,0,735,
        736,1,0,0,0,736,155,1,0,0,0,737,739,7,24,0,0,738,737,1,0,0,0,738,
        739,1,0,0,0,739,740,1,0,0,0,740,741,3,152,76,0,741,157,1,0,0,0,742,
        743,3,166,83,0,743,159,1,0,0,0,744,745,5,1,0,0,745,746,5,68,0,0,
        746,760,5,2,0,0,747,756,5,1,0,0,748,753,3,162,81,0,749,750,5,48,
        0,0,750,752,3,162,81,0,751,749,1,0,0,0,752,755,1,0,0,0,753,751,1,
        0,0,0,753,754,1,0,0,0,754,757,1,0,0,0,755,753,1,0,0,0,756,748,1,
        0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,760,5,2,0,0,759,744,1,
        0,0,0,759,747,1,0,0,0,760,161,1,0,0,0,761,762,3,156,78,0,762,763,
        3,164,82,0,763,163,1,0,0,0,764,766,3,170,85,0,765,764,1,0,0,0,765,
        766,1,0,0,0,766,774,1,0,0,0,767,768,5,1,0,0,768,769,3,164,82,0,769,
        770,5,2,0,0,770,775,1,0,0,0,771,773,3,158,79,0,772,771,1,0,0,0,772,
        773,1,0,0,0,773,775,1,0,0,0,774,767,1,0,0,0,774,772,1,0,0,0,775,
        777,1,0,0,0,776,778,3,132,66,0,777,776,1,0,0,0,777,778,1,0,0,0,778,
        165,1,0,0,0,779,784,5,85,0,0,780,781,5,52,0,0,781,783,5,85,0,0,782,
        780,1,0,0,0,783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,
        789,1,0,0,0,786,784,1,0,0,0,787,789,3,40,20,0,788,779,1,0,0,0,788,
        787,1,0,0,0,789,167,1,0,0,0,790,791,7,25,0,0,791,169,1,0,0,0,792,
        794,3,38,19,0,793,795,5,55,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,
        797,1,0,0,0,796,792,1,0,0,0,797,798,1,0,0,0,798,796,1,0,0,0,798,
        799,1,0,0,0,799,171,1,0,0,0,86,178,180,191,226,229,233,242,255,267,
        270,273,278,283,293,310,352,372,374,401,407,416,421,426,431,436,
        441,447,453,458,463,468,476,482,492,495,501,506,512,516,529,537,
        560,566,571,573,581,584,594,599,608,611,615,619,623,626,629,635,
        640,647,657,664,669,672,685,689,692,699,703,710,718,722,726,730,
        735,738,753,756,759,765,772,774,777,784,788,794,798
    ]

class FunctionParser ( Parser ):

    grammarFileName = "Function.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "')'", "';'", "':'", "'='", "'&'", 
                     "'*'", "'+'", "'-'", "'~'", "'!'", "'<'", "'>'", "'<='", 
                     "'>='", "'inline'", "'explicit'", "'friend'", "'static'", 
                     "'public'", "'private'", "'protected'", "'delete'", 
                     "'['", "']'", "'/'", "'%'", "'^'", "'|'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'>>'", 
                     "'<<'", "'>>='", "'<<='", "'=='", "'!='", "'&&'", "'||'", 
                     "'++'", "'--'", "','", "'->*'", "'->'", "'?'", "'::'", 
                     "'sizeof'", "'.'", "'restrict'", "'if'", "'else'", 
                     "'for'", "'while'", "'break'", "'case'", "'continue'", 
                     "'switch'", "'do'", "'goto'", "'return'", "'typedef'", 
                     "'void'", "'unsigned'", "'signed'", "'long'", "<INVALID>", 
                     "'virtual'", "'try'", "'catch'", "'throw'", "'using'", 
                     "'namespace'", "'auto'", "'register'", "'operator'", 
                     "'template'", "'new'", "<INVALID>", "<INVALID>", "'{'", 
                     "'}'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "IF", "ELSE", "FOR", "WHILE", "BREAK", "CASE", "CONTINUE", 
                      "SWITCH", "DO", "GOTO", "RETURN", "TYPEDEF", "VOID", 
                      "UNSIGNED", "SIGNED", "LONG", "CV_QUALIFIER", "VIRTUAL", 
                      "TRY", "CATCH", "THROW", "USING", "NAMESPACE", "AUTO", 
                      "REGISTER", "OPERATOR", "TEMPLATE", "NEW", "CLASS_KEY", 
                      "ALPHA_NUMERIC", "OPENING_CURLY", "CLOSING_CURLY", 
                      "PRE_IF", "PRE_ELSE", "PRE_ENDIF", "HEX_LITERAL", 
                      "DECIMAL_LITERAL", "OCTAL_LITERAL", "FLOATING_POINT_LITERAL", 
                      "CHAR", "STRING", "COMMENT", "WHITESPACE", "CPPCOMMENT", 
                      "OTHER" ]

    RULE_statements = 0
    RULE_statement = 1
    RULE_pre_opener = 2
    RULE_pre_else = 3
    RULE_pre_closer = 4
    RULE_opening_curly = 5
    RULE_closing_curly = 6
    RULE_block_starter = 7
    RULE_selection_or_iteration = 8
    RULE_do_statement1 = 9
    RULE_for_init_statement = 10
    RULE_jump_statement = 11
    RULE_label = 12
    RULE_expr_statement = 13
    RULE_condition = 14
    RULE_unary_operator = 15
    RULE_relational_operator = 16
    RULE_constant = 17
    RULE_function_decl_specifiers = 18
    RULE_ptr_operator = 19
    RULE_access_specifier = 20
    RULE_operator = 21
    RULE_assignment_operator = 22
    RULE_equality_operator = 23
    RULE_template_decl_start = 24
    RULE_template_param_list = 25
    RULE_no_brackets = 26
    RULE_no_brackets_curlies_or_squares = 27
    RULE_no_brackets_or_semicolon = 28
    RULE_no_angle_brackets_or_brackets = 29
    RULE_no_curlies = 30
    RULE_no_squares = 31
    RULE_no_squares_or_semicolon = 32
    RULE_no_comma_or_semicolon = 33
    RULE_assign_water = 34
    RULE_assign_water_l2 = 35
    RULE_water = 36
    RULE_expr = 37
    RULE_assign_expr = 38
    RULE_conditional_expression = 39
    RULE_or_expression = 40
    RULE_and_expression = 41
    RULE_inclusive_or_expression = 42
    RULE_exclusive_or_expression = 43
    RULE_bit_and_expression = 44
    RULE_equality_expression = 45
    RULE_relational_expression = 46
    RULE_shift_expression = 47
    RULE_additive_expression = 48
    RULE_multiplicative_expression = 49
    RULE_cast_expression = 50
    RULE_cast_target = 51
    RULE_unary_expression = 52
    RULE_new_expression = 53
    RULE_unary_op_and_cast_expr = 54
    RULE_sizeof_expression = 55
    RULE_sizeof = 56
    RULE_sizeof_operand = 57
    RULE_sizeof_operand2 = 58
    RULE_inc_dec = 59
    RULE_postfix_expression = 60
    RULE_function_argument_list = 61
    RULE_function_argument = 62
    RULE_primary_expression = 63
    RULE_init_declarator = 64
    RULE_declarator = 65
    RULE_type_suffix = 66
    RULE_simple_decl = 67
    RULE_var_decl = 68
    RULE_init_declarator_list = 69
    RULE_initializer = 70
    RULE_initializer_list = 71
    RULE_class_def = 72
    RULE_class_name = 73
    RULE_base_classes = 74
    RULE_base_class = 75
    RULE_type_name = 76
    RULE_base_type = 77
    RULE_param_decl_specifiers = 78
    RULE_parameter_name = 79
    RULE_param_type_list = 80
    RULE_param_type = 81
    RULE_param_type_id = 82
    RULE_identifier = 83
    RULE_number = 84
    RULE_ptrs = 85

    ruleNames =  [ "statements", "statement", "pre_opener", "pre_else", 
                   "pre_closer", "opening_curly", "closing_curly", "block_starter", 
                   "selection_or_iteration", "do_statement1", "for_init_statement", 
                   "jump_statement", "label", "expr_statement", "condition", 
                   "unary_operator", "relational_operator", "constant", 
                   "function_decl_specifiers", "ptr_operator", "access_specifier", 
                   "operator", "assignment_operator", "equality_operator", 
                   "template_decl_start", "template_param_list", "no_brackets", 
                   "no_brackets_curlies_or_squares", "no_brackets_or_semicolon", 
                   "no_angle_brackets_or_brackets", "no_curlies", "no_squares", 
                   "no_squares_or_semicolon", "no_comma_or_semicolon", "assign_water", 
                   "assign_water_l2", "water", "expr", "assign_expr", "conditional_expression", 
                   "or_expression", "and_expression", "inclusive_or_expression", 
                   "exclusive_or_expression", "bit_and_expression", "equality_expression", 
                   "relational_expression", "shift_expression", "additive_expression", 
                   "multiplicative_expression", "cast_expression", "cast_target", 
                   "unary_expression", "new_expression", "unary_op_and_cast_expr", 
                   "sizeof_expression", "sizeof", "sizeof_operand", "sizeof_operand2", 
                   "inc_dec", "postfix_expression", "function_argument_list", 
                   "function_argument", "primary_expression", "init_declarator", 
                   "declarator", "type_suffix", "simple_decl", "var_decl", 
                   "init_declarator_list", "initializer", "initializer_list", 
                   "class_def", "class_name", "base_classes", "base_class", 
                   "type_name", "base_type", "param_decl_specifiers", "parameter_name", 
                   "param_type_list", "param_type", "param_type_id", "identifier", 
                   "number", "ptrs" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    IF=56
    ELSE=57
    FOR=58
    WHILE=59
    BREAK=60
    CASE=61
    CONTINUE=62
    SWITCH=63
    DO=64
    GOTO=65
    RETURN=66
    TYPEDEF=67
    VOID=68
    UNSIGNED=69
    SIGNED=70
    LONG=71
    CV_QUALIFIER=72
    VIRTUAL=73
    TRY=74
    CATCH=75
    THROW=76
    USING=77
    NAMESPACE=78
    AUTO=79
    REGISTER=80
    OPERATOR=81
    TEMPLATE=82
    NEW=83
    CLASS_KEY=84
    ALPHA_NUMERIC=85
    OPENING_CURLY=86
    CLOSING_CURLY=87
    PRE_IF=88
    PRE_ELSE=89
    PRE_ENDIF=90
    HEX_LITERAL=91
    DECIMAL_LITERAL=92
    OCTAL_LITERAL=93
    FLOATING_POINT_LITERAL=94
    CHAR=95
    STRING=96
    COMMENT=97
    WHITESPACE=98
    CPPCOMMENT=99
    OTHER=100

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    def skipToEndOfObject(self):
        CurlyStack = []
        o = object()
        t = self._input.LA(1)

        while t  and not (not CurlyStack and t == self.CLOSING_CURLY):
            if t == self.PRE_ELSE:
                ifdefStack = []
                self.consume()
                t = self._input.LA(1)

                while t  and not (not ifdefStack and t == self.PRE_ENDIF):
                    if t == self.PRE_IF:
                        ifdefStack.append(o)
                    elif t == self.PRE_ENDIF:
                        ifdefStack.pop()
                    self.consume()
                    t = self._input.LA(1)

            if t == self.OPENING_CURLY:
                CurlyStack.append(o)
            elif t == self.CLOSING_CURLY:
                CurlyStack.pop()

            self.consume()
            t = self._input.LA(1)

        if t :
            self.consume()

        return True

    def preProcSkipToEnd(self):
        CurlyStack = []
        o = object()
        t = self._input.LA(1)

        while t and not (not CurlyStack and t == self.PRE_ENDIF):
            if t == self.PRE_IF:
                CurlyStack.append(o)
            elif t == self.PRE_ENDIF:
                CurlyStack.pop()

            self.consume()
            t = self._input.LA(1)

        if t:
            self.consume()

        return True



    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_opener(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Pre_openerContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Pre_openerContext,i)


        def pre_closer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Pre_closerContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Pre_closerContext,i)


        def pre_else(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Pre_elseContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Pre_elseContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.StatementContext)
            else:
                return self.getTypedRuleContext(FunctionParser.StatementContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = FunctionParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 137438953471) != 0):
                self.state = 178
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 172
                    self.pre_opener()
                    pass

                elif la_ == 2:
                    self.state = 173
                    self.pre_closer()
                    pass

                elif la_ == 3:
                    self.state = 174
                    self.pre_else()
                    self.preProcSkipToEnd(); 
                    pass

                elif la_ == 4:
                    self.state = 177
                    self.statement()
                    pass


                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opening_curly(self):
            return self.getTypedRuleContext(FunctionParser.Opening_curlyContext,0)


        def closing_curly(self):
            return self.getTypedRuleContext(FunctionParser.Closing_curlyContext,0)


        def block_starter(self):
            return self.getTypedRuleContext(FunctionParser.Block_starterContext,0)


        def jump_statement(self):
            return self.getTypedRuleContext(FunctionParser.Jump_statementContext,0)


        def label(self):
            return self.getTypedRuleContext(FunctionParser.LabelContext,0)


        def simple_decl(self):
            return self.getTypedRuleContext(FunctionParser.Simple_declContext,0)


        def expr_statement(self):
            return self.getTypedRuleContext(FunctionParser.Expr_statementContext,0)


        def water(self):
            return self.getTypedRuleContext(FunctionParser.WaterContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = FunctionParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 183
                self.opening_curly()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 184
                self.closing_curly()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 185
                self.block_starter()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 186
                self.jump_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 187
                self.label()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 188
                self.simple_decl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 189
                self.expr_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 190
                self.water()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_openerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRE_IF(self):
            return self.getToken(FunctionParser.PRE_IF, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_pre_opener

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_opener" ):
                listener.enterPre_opener(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_opener" ):
                listener.exitPre_opener(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_opener" ):
                return visitor.visitPre_opener(self)
            else:
                return visitor.visitChildren(self)




    def pre_opener(self):

        localctx = FunctionParser.Pre_openerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pre_opener)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.match(FunctionParser.PRE_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRE_ELSE(self):
            return self.getToken(FunctionParser.PRE_ELSE, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_pre_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_else" ):
                listener.enterPre_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_else" ):
                listener.exitPre_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_else" ):
                return visitor.visitPre_else(self)
            else:
                return visitor.visitChildren(self)




    def pre_else(self):

        localctx = FunctionParser.Pre_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pre_else)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(FunctionParser.PRE_ELSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_closerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRE_ENDIF(self):
            return self.getToken(FunctionParser.PRE_ENDIF, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_pre_closer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_closer" ):
                listener.enterPre_closer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_closer" ):
                listener.exitPre_closer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_closer" ):
                return visitor.visitPre_closer(self)
            else:
                return visitor.visitChildren(self)




    def pre_closer(self):

        localctx = FunctionParser.Pre_closerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_pre_closer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(FunctionParser.PRE_ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opening_curlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(FunctionParser.OPENING_CURLY, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_opening_curly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpening_curly" ):
                listener.enterOpening_curly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpening_curly" ):
                listener.exitOpening_curly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpening_curly" ):
                return visitor.visitOpening_curly(self)
            else:
                return visitor.visitChildren(self)




    def opening_curly(self):

        localctx = FunctionParser.Opening_curlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_opening_curly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(FunctionParser.OPENING_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closing_curlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSING_CURLY(self):
            return self.getToken(FunctionParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_closing_curly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosing_curly" ):
                listener.enterClosing_curly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosing_curly" ):
                listener.exitClosing_curly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosing_curly" ):
                return visitor.visitClosing_curly(self)
            else:
                return visitor.visitChildren(self)




    def closing_curly(self):

        localctx = FunctionParser.Closing_curlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_closing_curly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.match(FunctionParser.CLOSING_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_starterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selection_or_iteration(self):
            return self.getTypedRuleContext(FunctionParser.Selection_or_iterationContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_block_starter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_starter" ):
                listener.enterBlock_starter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_starter" ):
                listener.exitBlock_starter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_starter" ):
                return visitor.visitBlock_starter(self)
            else:
                return visitor.visitChildren(self)




    def block_starter(self):

        localctx = FunctionParser.Block_starterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_block_starter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.selection_or_iteration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_or_iterationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_selection_or_iteration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Try_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(FunctionParser.TRY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_statement" ):
                return visitor.visitTry_statement(self)
            else:
                return visitor.visitChildren(self)


    class If_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(FunctionParser.IF, 0)
        def condition(self):
            return self.getTypedRuleContext(FunctionParser.ConditionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)


    class Catch_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CATCH(self):
            return self.getToken(FunctionParser.CATCH, 0)
        def param_type(self):
            return self.getTypedRuleContext(FunctionParser.Param_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_statement" ):
                listener.enterCatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_statement" ):
                listener.exitCatch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatch_statement" ):
                return visitor.visitCatch_statement(self)
            else:
                return visitor.visitChildren(self)


    class For_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(FunctionParser.FOR, 0)
        def for_init_statement(self):
            return self.getTypedRuleContext(FunctionParser.For_init_statementContext,0)

        def condition(self):
            return self.getTypedRuleContext(FunctionParser.ConditionContext,0)

        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_statement" ):
                return visitor.visitFor_statement(self)
            else:
                return visitor.visitChildren(self)


    class Else_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(FunctionParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_statement" ):
                listener.enterElse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_statement" ):
                listener.exitElse_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_statement" ):
                return visitor.visitElse_statement(self)
            else:
                return visitor.visitChildren(self)


    class Switch_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SWITCH(self):
            return self.getToken(FunctionParser.SWITCH, 0)
        def condition(self):
            return self.getTypedRuleContext(FunctionParser.ConditionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_statement" ):
                return visitor.visitSwitch_statement(self)
            else:
                return visitor.visitChildren(self)


    class Do_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DO(self):
            return self.getToken(FunctionParser.DO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_statement" ):
                listener.enterDo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_statement" ):
                listener.exitDo_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_statement" ):
                return visitor.visitDo_statement(self)
            else:
                return visitor.visitChildren(self)


    class While_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(FunctionParser.WHILE, 0)
        def condition(self):
            return self.getTypedRuleContext(FunctionParser.ConditionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_statement" ):
                return visitor.visitWhile_statement(self)
            else:
                return visitor.visitChildren(self)



    def selection_or_iteration(self):

        localctx = FunctionParser.Selection_or_iterationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_selection_or_iteration)
        self._la = 0 # Token type
        try:
            self.state = 242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                localctx = FunctionParser.Try_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 205
                self.match(FunctionParser.TRY)
                pass
            elif token in [75]:
                localctx = FunctionParser.Catch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(FunctionParser.CATCH)
                self.state = 207
                self.match(FunctionParser.T__0)
                self.state = 208
                self.param_type()
                self.state = 209
                self.match(FunctionParser.T__1)
                pass
            elif token in [56]:
                localctx = FunctionParser.If_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 211
                self.match(FunctionParser.IF)
                self.state = 212
                self.match(FunctionParser.T__0)
                self.state = 213
                self.condition()
                self.state = 214
                self.match(FunctionParser.T__1)
                pass
            elif token in [57]:
                localctx = FunctionParser.Else_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 216
                self.match(FunctionParser.ELSE)
                pass
            elif token in [63]:
                localctx = FunctionParser.Switch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 217
                self.match(FunctionParser.SWITCH)
                self.state = 218
                self.match(FunctionParser.T__0)
                self.state = 219
                self.condition()
                self.state = 220
                self.match(FunctionParser.T__1)
                pass
            elif token in [58]:
                localctx = FunctionParser.For_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 222
                self.match(FunctionParser.FOR)
                self.state = 223
                self.match(FunctionParser.T__0)
                self.state = 226
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 6, 7, 8, 9, 10, 11, 20, 21, 22, 46, 47, 52, 53, 67, 68, 69, 70, 71, 72, 82, 83, 84, 85, 91, 92, 93, 94, 95, 96]:
                    self.state = 224
                    self.for_init_statement()
                    pass
                elif token in [3]:
                    self.state = 225
                    self.match(FunctionParser.T__2)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13721905121988546) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 528711711) != 0):
                    self.state = 228
                    self.condition()


                self.state = 231
                self.match(FunctionParser.T__2)
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13721905121988546) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 16133) != 0):
                    self.state = 232
                    self.expr()


                self.state = 235
                self.match(FunctionParser.T__1)
                pass
            elif token in [64]:
                localctx = FunctionParser.Do_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 236
                self.match(FunctionParser.DO)
                pass
            elif token in [59]:
                localctx = FunctionParser.While_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 237
                self.match(FunctionParser.WHILE)
                self.state = 238
                self.match(FunctionParser.T__0)
                self.state = 239
                self.condition()
                self.state = 240
                self.match(FunctionParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_statement1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(FunctionParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(FunctionParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(FunctionParser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_do_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_statement1" ):
                listener.enterDo_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_statement1" ):
                listener.exitDo_statement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_statement1" ):
                return visitor.visitDo_statement1(self)
            else:
                return visitor.visitChildren(self)




    def do_statement1(self):

        localctx = FunctionParser.Do_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_do_statement1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(FunctionParser.DO)
            self.state = 245
            self.statement()
            self.state = 246
            self.match(FunctionParser.WHILE)
            self.state = 247
            self.match(FunctionParser.T__0)
            self.state = 248
            self.expr()
            self.state = 249
            self.match(FunctionParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_init_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_decl(self):
            return self.getTypedRuleContext(FunctionParser.Simple_declContext,0)


        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_for_init_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_init_statement" ):
                listener.enterFor_init_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_init_statement" ):
                listener.exitFor_init_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_init_statement" ):
                return visitor.visitFor_init_statement(self)
            else:
                return visitor.visitChildren(self)




    def for_init_statement(self):

        localctx = FunctionParser.For_init_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_for_init_statement)
        try:
            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.simple_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.expr()
                self.state = 253
                self.match(FunctionParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Jump_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_jump_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BreakStatementContext(Jump_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Jump_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(FunctionParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)


    class ContinueStatementContext(Jump_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Jump_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(FunctionParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)


    class ReturnStatementContext(Jump_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Jump_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(FunctionParser.RETURN, 0)
        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)


    class GotoStatementContext(Jump_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Jump_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(FunctionParser.GOTO, 0)
        def identifier(self):
            return self.getTypedRuleContext(FunctionParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoStatement" ):
                return visitor.visitGotoStatement(self)
            else:
                return visitor.visitChildren(self)



    def jump_statement(self):

        localctx = FunctionParser.Jump_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_jump_statement)
        self._la = 0 # Token type
        try:
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                localctx = FunctionParser.BreakStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 257
                self.match(FunctionParser.BREAK)
                self.state = 258
                self.match(FunctionParser.T__2)
                pass
            elif token in [62]:
                localctx = FunctionParser.ContinueStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.match(FunctionParser.CONTINUE)
                self.state = 260
                self.match(FunctionParser.T__2)
                pass
            elif token in [65]:
                localctx = FunctionParser.GotoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 261
                self.match(FunctionParser.GOTO)
                self.state = 262
                self.identifier()
                self.state = 263
                self.match(FunctionParser.T__2)
                pass
            elif token in [66]:
                localctx = FunctionParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 265
                self.match(FunctionParser.RETURN)
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13721905121988546) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 16133) != 0):
                    self.state = 266
                    self.expr()


                self.state = 269
                self.match(FunctionParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FunctionParser.IdentifierContext,0)


        def number(self):
            return self.getTypedRuleContext(FunctionParser.NumberContext,0)


        def CHAR(self):
            return self.getToken(FunctionParser.CHAR, 0)

        def CASE(self):
            return self.getToken(FunctionParser.CASE, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = FunctionParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 272
                self.match(FunctionParser.CASE)


            self.state = 278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 21, 22, 85]:
                self.state = 275
                self.identifier()
                pass
            elif token in [91, 92, 93]:
                self.state = 276
                self.number()
                pass
            elif token in [95]:
                self.state = 277
                self.match(FunctionParser.CHAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 280
            self.match(FunctionParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_expr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_statement" ):
                listener.enterExpr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_statement" ):
                listener.exitExpr_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_statement" ):
                return visitor.visitExpr_statement(self)
            else:
                return visitor.visitChildren(self)




    def expr_statement(self):

        localctx = FunctionParser.Expr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_expr_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13721905121988546) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 16133) != 0):
                self.state = 282
                self.expr()


            self.state = 285
            self.match(FunctionParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def type_name(self):
            return self.getTypedRuleContext(FunctionParser.Type_nameContext,0)


        def declarator(self):
            return self.getTypedRuleContext(FunctionParser.DeclaratorContext,0)


        def assign_expr(self):
            return self.getTypedRuleContext(FunctionParser.Assign_exprContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = FunctionParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_condition)
        try:
            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                self.type_name()
                self.state = 289
                self.declarator()
                self.state = 290
                self.match(FunctionParser.T__4)
                self.state = 291
                self.assign_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator" ):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator(self):

        localctx = FunctionParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_operator" ):
                return visitor.visitRelational_operator(self)
            else:
                return visitor.visitChildren(self)




    def relational_operator(self):

        localctx = FunctionParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_relational_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 61440) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_LITERAL(self):
            return self.getToken(FunctionParser.HEX_LITERAL, 0)

        def OCTAL_LITERAL(self):
            return self.getToken(FunctionParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(FunctionParser.DECIMAL_LITERAL, 0)

        def STRING(self):
            return self.getToken(FunctionParser.STRING, 0)

        def CHAR(self):
            return self.getToken(FunctionParser.CHAR, 0)

        def FLOATING_POINT_LITERAL(self):
            return self.getToken(FunctionParser.FLOATING_POINT_LITERAL, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = FunctionParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            _la = self._input.LA(1)
            if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_decl_specifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIRTUAL(self):
            return self.getToken(FunctionParser.VIRTUAL, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_function_decl_specifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_decl_specifiers" ):
                listener.enterFunction_decl_specifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_decl_specifiers" ):
                listener.exitFunction_decl_specifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_decl_specifiers" ):
                return visitor.visitFunction_decl_specifiers(self)
            else:
                return visitor.visitChildren(self)




    def function_decl_specifiers(self):

        localctx = FunctionParser.Function_decl_specifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_function_decl_specifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            _la = self._input.LA(1)
            if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 144115188075855887) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ptr_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_ptr_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtr_operator" ):
                listener.enterPtr_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtr_operator" ):
                listener.exitPtr_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtr_operator" ):
                return visitor.visitPtr_operator(self)
            else:
                return visitor.visitChildren(self)




    def ptr_operator(self):

        localctx = FunctionParser.Ptr_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_ptr_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            _la = self._input.LA(1)
            if not(_la==6 or _la==7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_access_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_specifier" ):
                listener.enterAccess_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_specifier" ):
                listener.exitAccess_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccess_specifier" ):
                return visitor.visitAccess_specifier(self)
            else:
                return visitor.visitChildren(self)




    def access_specifier(self):

        localctx = FunctionParser.Access_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_access_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7340032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(FunctionParser.NEW, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperator" ):
                return visitor.visitOperator(self)
            else:
                return visitor.visitChildren(self)




    def operator(self):

        localctx = FunctionParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.state = 352
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 307
                _la = self._input.LA(1)
                if not(_la==23 or _la==83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 308
                    self.match(FunctionParser.T__23)
                    self.state = 309
                    self.match(FunctionParser.T__24)


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 312
                self.match(FunctionParser.T__7)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 313
                self.match(FunctionParser.T__8)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 4)
                self.state = 314
                self.match(FunctionParser.T__6)
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 5)
                self.state = 315
                self.match(FunctionParser.T__25)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 6)
                self.state = 316
                self.match(FunctionParser.T__26)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 7)
                self.state = 317
                self.match(FunctionParser.T__27)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 8)
                self.state = 318
                self.match(FunctionParser.T__5)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 9)
                self.state = 319
                self.match(FunctionParser.T__28)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 10)
                self.state = 320
                self.match(FunctionParser.T__9)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 11)
                self.state = 321
                self.match(FunctionParser.T__10)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 12)
                self.state = 322
                self.match(FunctionParser.T__4)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 13)
                self.state = 323
                self.match(FunctionParser.T__11)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 14)
                self.state = 324
                self.match(FunctionParser.T__12)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 15)
                self.state = 325
                self.match(FunctionParser.T__29)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 16)
                self.state = 326
                self.match(FunctionParser.T__30)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 17)
                self.state = 327
                self.match(FunctionParser.T__31)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 18)
                self.state = 328
                self.match(FunctionParser.T__32)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 19)
                self.state = 329
                self.match(FunctionParser.T__33)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 20)
                self.state = 330
                self.match(FunctionParser.T__34)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 21)
                self.state = 331
                self.match(FunctionParser.T__35)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 22)
                self.state = 332
                self.match(FunctionParser.T__36)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 23)
                self.state = 333
                self.match(FunctionParser.T__37)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 24)
                self.state = 334
                self.match(FunctionParser.T__38)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 25)
                self.state = 335
                self.match(FunctionParser.T__39)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 26)
                self.state = 336
                self.match(FunctionParser.T__40)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 27)
                self.state = 337
                self.match(FunctionParser.T__41)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 28)
                self.state = 338
                self.match(FunctionParser.T__42)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 29)
                self.state = 339
                self.match(FunctionParser.T__13)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 30)
                self.state = 340
                self.match(FunctionParser.T__14)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 31)
                self.state = 341
                self.match(FunctionParser.T__43)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 32)
                self.state = 342
                self.match(FunctionParser.T__44)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 33)
                self.state = 343
                self.match(FunctionParser.T__45)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 34)
                self.state = 344
                self.match(FunctionParser.T__46)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 35)
                self.state = 345
                self.match(FunctionParser.T__47)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 36)
                self.state = 346
                self.match(FunctionParser.T__48)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 37)
                self.state = 347
                self.match(FunctionParser.T__49)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 38)
                self.state = 348
                self.match(FunctionParser.T__0)
                self.state = 349
                self.match(FunctionParser.T__1)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 39)
                self.state = 350
                self.match(FunctionParser.T__23)
                self.state = 351
                self.match(FunctionParser.T__24)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_operator" ):
                return visitor.visitAssignment_operator(self)
            else:
                return visitor.visitChildren(self)




    def assignment_operator(self):

        localctx = FunctionParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3572339048480) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_equality_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_operator" ):
                listener.enterEquality_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_operator" ):
                listener.exitEquality_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquality_operator" ):
                return visitor.visitEquality_operator(self)
            else:
                return visitor.visitChildren(self)




    def equality_operator(self):

        localctx = FunctionParser.Equality_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_equality_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            _la = self._input.LA(1)
            if not(_la==42 or _la==43):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Template_decl_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPLATE(self):
            return self.getToken(FunctionParser.TEMPLATE, 0)

        def template_param_list(self):
            return self.getTypedRuleContext(FunctionParser.Template_param_listContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_template_decl_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplate_decl_start" ):
                listener.enterTemplate_decl_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplate_decl_start" ):
                listener.exitTemplate_decl_start(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplate_decl_start" ):
                return visitor.visitTemplate_decl_start(self)
            else:
                return visitor.visitChildren(self)




    def template_decl_start(self):

        localctx = FunctionParser.Template_decl_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_template_decl_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(FunctionParser.TEMPLATE)
            self.state = 359
            self.match(FunctionParser.T__11)
            self.state = 360
            self.template_param_list()
            self.state = 361
            self.match(FunctionParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Template_param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def no_angle_brackets_or_brackets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.No_angle_brackets_or_bracketsContext)
            else:
                return self.getTypedRuleContext(FunctionParser.No_angle_brackets_or_bracketsContext,i)


        def template_param_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Template_param_listContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Template_param_listContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_template_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplate_param_list" ):
                listener.enterTemplate_param_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplate_param_list" ):
                listener.exitTemplate_param_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplate_param_list" ):
                return visitor.visitTemplate_param_list(self)
            else:
                return visitor.visitChildren(self)




    def template_param_list(self):

        localctx = FunctionParser.Template_param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_template_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 372
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [12]:
                    self.state = 363
                    self.match(FunctionParser.T__11)
                    self.state = 364
                    self.template_param_list()
                    self.state = 365
                    self.match(FunctionParser.T__12)
                    pass
                elif token in [1]:
                    self.state = 367
                    self.match(FunctionParser.T__0)
                    self.state = 368
                    self.template_param_list()
                    self.state = 369
                    self.match(FunctionParser.T__1)
                    pass
                elif token in [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                    self.state = 371
                    self.no_angle_brackets_or_brackets()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 374 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -8198) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 137438953471) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_bracketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_no_brackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_brackets" ):
                listener.enterNo_brackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_brackets" ):
                listener.exitNo_brackets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_brackets" ):
                return visitor.visitNo_brackets(self)
            else:
                return visitor.visitChildren(self)




    def no_brackets(self):

        localctx = FunctionParser.No_bracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_no_brackets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            _la = self._input.LA(1)
            if _la <= 0 or _la==1 or _la==2:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_brackets_curlies_or_squaresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(FunctionParser.OPENING_CURLY, 0)

        def CLOSING_CURLY(self):
            return self.getToken(FunctionParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_no_brackets_curlies_or_squares

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_brackets_curlies_or_squares" ):
                listener.enterNo_brackets_curlies_or_squares(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_brackets_curlies_or_squares" ):
                listener.exitNo_brackets_curlies_or_squares(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_brackets_curlies_or_squares" ):
                return visitor.visitNo_brackets_curlies_or_squares(self)
            else:
                return visitor.visitChildren(self)




    def no_brackets_curlies_or_squares(self):

        localctx = FunctionParser.No_brackets_curlies_or_squaresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_no_brackets_curlies_or_squares)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 50331654) != 0) or _la==86 or _la==87:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_brackets_or_semicolonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_no_brackets_or_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_brackets_or_semicolon" ):
                listener.enterNo_brackets_or_semicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_brackets_or_semicolon" ):
                listener.exitNo_brackets_or_semicolon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_brackets_or_semicolon" ):
                return visitor.visitNo_brackets_or_semicolon(self)
            else:
                return visitor.visitChildren(self)




    def no_brackets_or_semicolon(self):

        localctx = FunctionParser.No_brackets_or_semicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_no_brackets_or_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 14) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_angle_brackets_or_bracketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_no_angle_brackets_or_brackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_angle_brackets_or_brackets" ):
                listener.enterNo_angle_brackets_or_brackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_angle_brackets_or_brackets" ):
                listener.exitNo_angle_brackets_or_brackets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_angle_brackets_or_brackets" ):
                return visitor.visitNo_angle_brackets_or_brackets(self)
            else:
                return visitor.visitChildren(self)




    def no_angle_brackets_or_brackets(self):

        localctx = FunctionParser.No_angle_brackets_or_bracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_no_angle_brackets_or_brackets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 12294) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_curliesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(FunctionParser.OPENING_CURLY, 0)

        def CLOSING_CURLY(self):
            return self.getToken(FunctionParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_no_curlies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_curlies" ):
                listener.enterNo_curlies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_curlies" ):
                listener.exitNo_curlies(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_curlies" ):
                return visitor.visitNo_curlies(self)
            else:
                return visitor.visitChildren(self)




    def no_curlies(self):

        localctx = FunctionParser.No_curliesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_no_curlies)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            _la = self._input.LA(1)
            if _la <= 0 or _la==86 or _la==87:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_squaresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_no_squares

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_squares" ):
                listener.enterNo_squares(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_squares" ):
                listener.exitNo_squares(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_squares" ):
                return visitor.visitNo_squares(self)
            else:
                return visitor.visitChildren(self)




    def no_squares(self):

        localctx = FunctionParser.No_squaresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_no_squares)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            _la = self._input.LA(1)
            if _la <= 0 or _la==24 or _la==25:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_squares_or_semicolonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_no_squares_or_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_squares_or_semicolon" ):
                listener.enterNo_squares_or_semicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_squares_or_semicolon" ):
                listener.exitNo_squares_or_semicolon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_squares_or_semicolon" ):
                return visitor.visitNo_squares_or_semicolon(self)
            else:
                return visitor.visitChildren(self)




    def no_squares_or_semicolon(self):

        localctx = FunctionParser.No_squares_or_semicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_no_squares_or_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 50331656) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_comma_or_semicolonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_no_comma_or_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_comma_or_semicolon" ):
                listener.enterNo_comma_or_semicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_comma_or_semicolon" ):
                listener.exitNo_comma_or_semicolon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_comma_or_semicolon" ):
                return visitor.visitNo_comma_or_semicolon(self)
            else:
                return visitor.visitChildren(self)




    def no_comma_or_semicolon(self):

        localctx = FunctionParser.No_comma_or_semicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_no_comma_or_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            _la = self._input.LA(1)
            if _la <= 0 or _la==3 or _la==48:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_waterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(FunctionParser.OPENING_CURLY, 0)

        def CLOSING_CURLY(self):
            return self.getToken(FunctionParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_assign_water

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_water" ):
                listener.enterAssign_water(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_water" ):
                listener.exitAssign_water(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_water" ):
                return visitor.visitAssign_water(self)
            else:
                return visitor.visitChildren(self)




    def assign_water(self):

        localctx = FunctionParser.Assign_waterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_assign_water)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 281475027042318) != 0) or _la==86 or _la==87:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_water_l2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(FunctionParser.OPENING_CURLY, 0)

        def CLOSING_CURLY(self):
            return self.getToken(FunctionParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_assign_water_l2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_water_l2" ):
                listener.enterAssign_water_l2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_water_l2" ):
                listener.exitAssign_water_l2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_water_l2" ):
                return visitor.visitAssign_water_l2(self)
            else:
                return visitor.visitChildren(self)




    def assign_water_l2(self):

        localctx = FunctionParser.Assign_water_l2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_assign_water_l2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 50331654) != 0) or _la==86 or _la==87:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_water

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWater" ):
                listener.enterWater(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWater" ):
                listener.exitWater(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWater" ):
                return visitor.visitWater(self)
            else:
                return visitor.visitChildren(self)




    def water(self):

        localctx = FunctionParser.WaterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_water)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.matchWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_expr(self):
            return self.getTypedRuleContext(FunctionParser.Assign_exprContext,0)


        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = FunctionParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.assign_expr()
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 399
                self.match(FunctionParser.T__47)
                self.state = 400
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_expression(self):
            return self.getTypedRuleContext(FunctionParser.Conditional_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(FunctionParser.Assignment_operatorContext,0)


        def assign_expr(self):
            return self.getTypedRuleContext(FunctionParser.Assign_exprContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_assign_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_expr" ):
                listener.enterAssign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_expr" ):
                listener.exitAssign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_expr" ):
                return visitor.visitAssign_expr(self)
            else:
                return visitor.visitChildren(self)




    def assign_expr(self):

        localctx = FunctionParser.Assign_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assign_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.conditional_expression()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3572339048480) != 0):
                self.state = 404
                self.assignment_operator()
                self.state = 405
                self.assign_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_conditional_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NormOrContext(Conditional_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Conditional_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def or_expression(self):
            return self.getTypedRuleContext(FunctionParser.Or_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormOr" ):
                listener.enterNormOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormOr" ):
                listener.exitNormOr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormOr" ):
                return visitor.visitNormOr(self)
            else:
                return visitor.visitChildren(self)


    class CndExprContext(Conditional_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Conditional_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def or_expression(self):
            return self.getTypedRuleContext(FunctionParser.Or_expressionContext,0)

        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)

        def conditional_expression(self):
            return self.getTypedRuleContext(FunctionParser.Conditional_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCndExpr" ):
                listener.enterCndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCndExpr" ):
                listener.exitCndExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCndExpr" ):
                return visitor.visitCndExpr(self)
            else:
                return visitor.visitChildren(self)



    def conditional_expression(self):

        localctx = FunctionParser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_conditional_expression)
        try:
            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                localctx = FunctionParser.NormOrContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 409
                self.or_expression()
                pass

            elif la_ == 2:
                localctx = FunctionParser.CndExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.or_expression()

                self.state = 411
                self.match(FunctionParser.T__50)
                self.state = 412
                self.expr()
                self.state = 413
                self.match(FunctionParser.T__3)
                self.state = 414
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self):
            return self.getTypedRuleContext(FunctionParser.And_expressionContext,0)


        def or_expression(self):
            return self.getTypedRuleContext(FunctionParser.Or_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_expression" ):
                listener.enterOr_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_expression" ):
                listener.exitOr_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_expression" ):
                return visitor.visitOr_expression(self)
            else:
                return visitor.visitChildren(self)




    def or_expression(self):

        localctx = FunctionParser.Or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.and_expression()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 419
                self.match(FunctionParser.T__44)
                self.state = 420
                self.or_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self):
            return self.getTypedRuleContext(FunctionParser.Inclusive_or_expressionContext,0)


        def and_expression(self):
            return self.getTypedRuleContext(FunctionParser.And_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expression" ):
                return visitor.visitAnd_expression(self)
            else:
                return visitor.visitChildren(self)




    def and_expression(self):

        localctx = FunctionParser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.inclusive_or_expression()
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 424
                self.match(FunctionParser.T__43)
                self.state = 425
                self.and_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self):
            return self.getTypedRuleContext(FunctionParser.Exclusive_or_expressionContext,0)


        def inclusive_or_expression(self):
            return self.getTypedRuleContext(FunctionParser.Inclusive_or_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusive_or_expression" ):
                return visitor.visitInclusive_or_expression(self)
            else:
                return visitor.visitChildren(self)




    def inclusive_or_expression(self):

        localctx = FunctionParser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_inclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.exclusive_or_expression()
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 429
                self.match(FunctionParser.T__28)
                self.state = 430
                self.inclusive_or_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_and_expression(self):
            return self.getTypedRuleContext(FunctionParser.Bit_and_expressionContext,0)


        def exclusive_or_expression(self):
            return self.getTypedRuleContext(FunctionParser.Exclusive_or_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusive_or_expression" ):
                return visitor.visitExclusive_or_expression(self)
            else:
                return visitor.visitChildren(self)




    def exclusive_or_expression(self):

        localctx = FunctionParser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_exclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.bit_and_expression()
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 434
                self.match(FunctionParser.T__27)
                self.state = 435
                self.exclusive_or_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self):
            return self.getTypedRuleContext(FunctionParser.Equality_expressionContext,0)


        def bit_and_expression(self):
            return self.getTypedRuleContext(FunctionParser.Bit_and_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_bit_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_and_expression" ):
                listener.enterBit_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_and_expression" ):
                listener.exitBit_and_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_and_expression" ):
                return visitor.visitBit_and_expression(self)
            else:
                return visitor.visitChildren(self)




    def bit_and_expression(self):

        localctx = FunctionParser.Bit_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_bit_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.equality_expression()
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 439
                self.match(FunctionParser.T__5)
                self.state = 440
                self.bit_and_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self):
            return self.getTypedRuleContext(FunctionParser.Relational_expressionContext,0)


        def equality_operator(self):
            return self.getTypedRuleContext(FunctionParser.Equality_operatorContext,0)


        def equality_expression(self):
            return self.getTypedRuleContext(FunctionParser.Equality_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquality_expression" ):
                return visitor.visitEquality_expression(self)
            else:
                return visitor.visitChildren(self)




    def equality_expression(self):

        localctx = FunctionParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.relational_expression()
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==43:
                self.state = 444
                self.equality_operator()
                self.state = 445
                self.equality_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self):
            return self.getTypedRuleContext(FunctionParser.Shift_expressionContext,0)


        def relational_operator(self):
            return self.getTypedRuleContext(FunctionParser.Relational_operatorContext,0)


        def relational_expression(self):
            return self.getTypedRuleContext(FunctionParser.Relational_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_expression" ):
                return visitor.visitRelational_expression(self)
            else:
                return visitor.visitChildren(self)




    def relational_expression(self):

        localctx = FunctionParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.shift_expression()
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 61440) != 0):
                self.state = 450
                self.relational_operator()
                self.state = 451
                self.relational_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self):
            return self.getTypedRuleContext(FunctionParser.Additive_expressionContext,0)


        def shift_expression(self):
            return self.getTypedRuleContext(FunctionParser.Shift_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expression" ):
                return visitor.visitShift_expression(self)
            else:
                return visitor.visitChildren(self)




    def shift_expression(self):

        localctx = FunctionParser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_shift_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.additive_expression()
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38 or _la==39:
                self.state = 456
                _la = self._input.LA(1)
                if not(_la==38 or _la==39):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 457
                self.shift_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self):
            return self.getTypedRuleContext(FunctionParser.Multiplicative_expressionContext,0)


        def additive_expression(self):
            return self.getTypedRuleContext(FunctionParser.Additive_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditive_expression" ):
                return visitor.visitAdditive_expression(self)
            else:
                return visitor.visitChildren(self)




    def additive_expression(self):

        localctx = FunctionParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.multiplicative_expression()
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 461
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 462
                self.additive_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplicative_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(FunctionParser.Cast_expressionContext,0)


        def multiplicative_expression(self):
            return self.getTypedRuleContext(FunctionParser.Multiplicative_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicative_expression" ):
                return visitor.visitMultiplicative_expression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicative_expression(self):

        localctx = FunctionParser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.cast_expression()
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 201326720) != 0):
                self.state = 466
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 201326720) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 467
                self.multiplicative_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_target(self):
            return self.getTypedRuleContext(FunctionParser.Cast_targetContext,0)


        def cast_expression(self):
            return self.getTypedRuleContext(FunctionParser.Cast_expressionContext,0)


        def unary_expression(self):
            return self.getTypedRuleContext(FunctionParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_expression" ):
                return visitor.visitCast_expression(self)
            else:
                return visitor.visitChildren(self)




    def cast_expression(self):

        localctx = FunctionParser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_cast_expression)
        try:
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.match(FunctionParser.T__0)
                self.state = 471
                self.cast_target()
                self.state = 472
                self.match(FunctionParser.T__1)
                self.state = 473
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.unary_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(FunctionParser.Type_nameContext,0)


        def ptr_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Ptr_operatorContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Ptr_operatorContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_cast_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_target" ):
                listener.enterCast_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_target" ):
                listener.exitCast_target(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_target" ):
                return visitor.visitCast_target(self)
            else:
                return visitor.visitChildren(self)




    def cast_target(self):

        localctx = FunctionParser.Cast_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_cast_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.type_name()
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==7:
                self.state = 479
                self.ptr_operator()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inc_dec(self):
            return self.getTypedRuleContext(FunctionParser.Inc_decContext,0)


        def cast_expression(self):
            return self.getTypedRuleContext(FunctionParser.Cast_expressionContext,0)


        def unary_op_and_cast_expr(self):
            return self.getTypedRuleContext(FunctionParser.Unary_op_and_cast_exprContext,0)


        def sizeof_expression(self):
            return self.getTypedRuleContext(FunctionParser.Sizeof_expressionContext,0)


        def new_expression(self):
            return self.getTypedRuleContext(FunctionParser.New_expressionContext,0)


        def postfix_expression(self):
            return self.getTypedRuleContext(FunctionParser.Postfix_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_expression" ):
                return visitor.visitUnary_expression(self)
            else:
                return visitor.visitChildren(self)




    def unary_expression(self):

        localctx = FunctionParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_unary_expression)
        try:
            self.state = 492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self.inc_dec()
                self.state = 486
                self.cast_expression()
                pass
            elif token in [6, 7, 8, 9, 10, 11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.unary_op_and_cast_expr()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self.sizeof_expression()
                pass
            elif token in [52, 83]:
                self.enterOuterAlt(localctx, 4)
                self.state = 490
                self.new_expression()
                pass
            elif token in [1, 20, 21, 22, 85, 91, 92, 93, 94, 95, 96]:
                self.enterOuterAlt(localctx, 5)
                self.state = 491
                self.postfix_expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(FunctionParser.NEW, 0)

        def type_name(self):
            return self.getTypedRuleContext(FunctionParser.Type_nameContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(FunctionParser.Conditional_expressionContext,0)


        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_expression" ):
                listener.enterNew_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_expression" ):
                listener.exitNew_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNew_expression" ):
                return visitor.visitNew_expression(self)
            else:
                return visitor.visitChildren(self)




    def new_expression(self):

        localctx = FunctionParser.New_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_new_expression)
        self._la = 0 # Token type
        try:
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 494
                    self.match(FunctionParser.T__51)


                self.state = 497
                self.match(FunctionParser.NEW)
                self.state = 498
                self.type_name()
                self.state = 499
                self.match(FunctionParser.T__23)
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13721905121988546) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 16133) != 0):
                    self.state = 500
                    self.conditional_expression()


                self.state = 503
                self.match(FunctionParser.T__24)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 505
                    self.match(FunctionParser.T__51)


                self.state = 508
                self.match(FunctionParser.NEW)
                self.state = 509
                self.type_name()
                self.state = 510
                self.match(FunctionParser.T__0)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13721905121988546) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 16133) != 0):
                    self.state = 511
                    self.expr()


                self.state = 514
                self.match(FunctionParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_op_and_cast_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_operator(self):
            return self.getTypedRuleContext(FunctionParser.Unary_operatorContext,0)


        def cast_expression(self):
            return self.getTypedRuleContext(FunctionParser.Cast_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_unary_op_and_cast_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_op_and_cast_expr" ):
                listener.enterUnary_op_and_cast_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_op_and_cast_expr" ):
                listener.exitUnary_op_and_cast_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_op_and_cast_expr" ):
                return visitor.visitUnary_op_and_cast_expr(self)
            else:
                return visitor.visitChildren(self)




    def unary_op_and_cast_expr(self):

        localctx = FunctionParser.Unary_op_and_cast_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_unary_op_and_cast_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.unary_operator()
            self.state = 519
            self.cast_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sizeof_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sizeof(self):
            return self.getTypedRuleContext(FunctionParser.SizeofContext,0)


        def sizeof_operand(self):
            return self.getTypedRuleContext(FunctionParser.Sizeof_operandContext,0)


        def sizeof_operand2(self):
            return self.getTypedRuleContext(FunctionParser.Sizeof_operand2Context,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_sizeof_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeof_expression" ):
                listener.enterSizeof_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeof_expression" ):
                listener.exitSizeof_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeof_expression" ):
                return visitor.visitSizeof_expression(self)
            else:
                return visitor.visitChildren(self)




    def sizeof_expression(self):

        localctx = FunctionParser.Sizeof_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_sizeof_expression)
        try:
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.sizeof()
                self.state = 522
                self.match(FunctionParser.T__0)
                self.state = 523
                self.sizeof_operand()
                self.state = 524
                self.match(FunctionParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.sizeof()
                self.state = 527
                self.sizeof_operand2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeofContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_sizeof

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeof" ):
                listener.enterSizeof(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeof" ):
                listener.exitSizeof(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeof" ):
                return visitor.visitSizeof(self)
            else:
                return visitor.visitChildren(self)




    def sizeof(self):

        localctx = FunctionParser.SizeofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_sizeof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(FunctionParser.T__52)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sizeof_operandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(FunctionParser.Type_nameContext,0)


        def ptr_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Ptr_operatorContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Ptr_operatorContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_sizeof_operand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeof_operand" ):
                listener.enterSizeof_operand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeof_operand" ):
                listener.exitSizeof_operand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeof_operand" ):
                return visitor.visitSizeof_operand(self)
            else:
                return visitor.visitChildren(self)




    def sizeof_operand(self):

        localctx = FunctionParser.Sizeof_operandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_sizeof_operand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.type_name()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==7:
                self.state = 534
                self.ptr_operator()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sizeof_operand2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(FunctionParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_sizeof_operand2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeof_operand2" ):
                listener.enterSizeof_operand2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeof_operand2" ):
                listener.exitSizeof_operand2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeof_operand2" ):
                return visitor.visitSizeof_operand2(self)
            else:
                return visitor.visitChildren(self)




    def sizeof_operand2(self):

        localctx = FunctionParser.Sizeof_operand2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_sizeof_operand2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inc_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_inc_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInc_dec" ):
                listener.enterInc_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInc_dec" ):
                listener.exitInc_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInc_dec" ):
                return visitor.visitInc_dec(self)
            else:
                return visitor.visitChildren(self)




    def inc_dec(self):

        localctx = FunctionParser.Inc_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_inc_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            _la = self._input.LA(1)
            if not(_la==46 or _la==47):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_postfix_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MemberAccessContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(FunctionParser.Postfix_expressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(FunctionParser.IdentifierContext,0)

        def TEMPLATE(self):
            return self.getToken(FunctionParser.TEMPLATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class IncDecOpContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(FunctionParser.Postfix_expressionContext,0)

        def inc_dec(self):
            return self.getTypedRuleContext(FunctionParser.Inc_decContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncDecOp" ):
                listener.enterIncDecOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncDecOp" ):
                listener.exitIncDecOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncDecOp" ):
                return visitor.visitIncDecOp(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryOnlyContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary_expression(self):
            return self.getTypedRuleContext(FunctionParser.Primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryOnly" ):
                listener.enterPrimaryOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryOnly" ):
                listener.exitPrimaryOnly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryOnly" ):
                return visitor.visitPrimaryOnly(self)
            else:
                return visitor.visitChildren(self)


    class FuncCallContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(FunctionParser.Postfix_expressionContext,0)

        def function_argument_list(self):
            return self.getTypedRuleContext(FunctionParser.Function_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncCall" ):
                listener.enterFuncCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncCall" ):
                listener.exitFuncCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncCall" ):
                return visitor.visitFuncCall(self)
            else:
                return visitor.visitChildren(self)


    class ArrayIndexingContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(FunctionParser.Postfix_expressionContext,0)

        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayIndexing" ):
                listener.enterArrayIndexing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayIndexing" ):
                listener.exitArrayIndexing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayIndexing" ):
                return visitor.visitArrayIndexing(self)
            else:
                return visitor.visitChildren(self)


    class PtrMemberAccessContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(FunctionParser.Postfix_expressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(FunctionParser.IdentifierContext,0)

        def TEMPLATE(self):
            return self.getToken(FunctionParser.TEMPLATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrMemberAccess" ):
                listener.enterPtrMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrMemberAccess" ):
                listener.exitPtrMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrMemberAccess" ):
                return visitor.visitPtrMemberAccess(self)
            else:
                return visitor.visitChildren(self)



    def postfix_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FunctionParser.Postfix_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_postfix_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = FunctionParser.PrimaryOnlyContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 545
            self.primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 571
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                    if la_ == 1:
                        localctx = FunctionParser.ArrayIndexingContext(self, FunctionParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 547
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 548
                        self.match(FunctionParser.T__23)
                        self.state = 549
                        self.expr()
                        self.state = 550
                        self.match(FunctionParser.T__24)
                        pass

                    elif la_ == 2:
                        localctx = FunctionParser.FuncCallContext(self, FunctionParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 552
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 553
                        self.match(FunctionParser.T__0)
                        self.state = 554
                        self.function_argument_list()
                        self.state = 555
                        self.match(FunctionParser.T__1)
                        pass

                    elif la_ == 3:
                        localctx = FunctionParser.MemberAccessContext(self, FunctionParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 557
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 558
                        self.match(FunctionParser.T__53)
                        self.state = 560
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==82:
                            self.state = 559
                            self.match(FunctionParser.TEMPLATE)


                        self.state = 562
                        self.identifier()
                        pass

                    elif la_ == 4:
                        localctx = FunctionParser.PtrMemberAccessContext(self, FunctionParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 563
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 564
                        self.match(FunctionParser.T__49)
                        self.state = 566
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==82:
                            self.state = 565
                            self.match(FunctionParser.TEMPLATE)


                        self.state = 568
                        self.identifier()
                        pass

                    elif la_ == 5:
                        localctx = FunctionParser.IncDecOpContext(self, FunctionParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 569
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 570
                        self.inc_dec()
                        pass

             
                self.state = 575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Function_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Function_argumentContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Function_argumentContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_function_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_list" ):
                listener.enterFunction_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_list" ):
                listener.exitFunction_argument_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_list" ):
                return visitor.visitFunction_argument_list(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_list(self):

        localctx = FunctionParser.Function_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_function_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13721905121988546) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 16133) != 0):
                self.state = 576
                self.function_argument()
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==48:
                    self.state = 577
                    self.match(FunctionParser.T__47)
                    self.state = 578
                    self.function_argument()
                    self.state = 583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_expr(self):
            return self.getTypedRuleContext(FunctionParser.Assign_exprContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument" ):
                return visitor.visitFunction_argument(self)
            else:
                return visitor.visitChildren(self)




    def function_argument(self):

        localctx = FunctionParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_function_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.assign_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FunctionParser.IdentifierContext,0)


        def constant(self):
            return self.getTypedRuleContext(FunctionParser.ConstantContext,0)


        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_expression" ):
                return visitor.visitPrimary_expression(self)
            else:
                return visitor.visitChildren(self)




    def primary_expression(self):

        localctx = FunctionParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_primary_expression)
        try:
            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 21, 22, 85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.identifier()
                pass
            elif token in [91, 92, 93, 94, 95, 96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.constant()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 590
                self.match(FunctionParser.T__0)
                self.state = 591
                self.expr()
                self.state = 592
                self.match(FunctionParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_init_declarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitDeclWithAssignContext(Init_declaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Init_declaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(FunctionParser.DeclaratorContext,0)

        def initializer(self):
            return self.getTypedRuleContext(FunctionParser.InitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclWithAssign" ):
                listener.enterInitDeclWithAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclWithAssign" ):
                listener.exitInitDeclWithAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclWithAssign" ):
                return visitor.visitInitDeclWithAssign(self)
            else:
                return visitor.visitChildren(self)


    class InitDeclSimpleContext(Init_declaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Init_declaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(FunctionParser.DeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclSimple" ):
                listener.enterInitDeclSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclSimple" ):
                listener.exitInitDeclSimple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclSimple" ):
                return visitor.visitInitDeclSimple(self)
            else:
                return visitor.visitChildren(self)


    class InitDeclWithCallContext(Init_declaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Init_declaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(FunctionParser.DeclaratorContext,0)

        def expr(self):
            return self.getTypedRuleContext(FunctionParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclWithCall" ):
                listener.enterInitDeclWithCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclWithCall" ):
                listener.exitInitDeclWithCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclWithCall" ):
                return visitor.visitInitDeclWithCall(self)
            else:
                return visitor.visitChildren(self)



    def init_declarator(self):

        localctx = FunctionParser.Init_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_init_declarator)
        self._la = 0 # Token type
        try:
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                localctx = FunctionParser.InitDeclWithCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 596
                self.declarator()
                self.state = 597
                self.match(FunctionParser.T__0)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13721905121988546) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 16133) != 0):
                    self.state = 598
                    self.expr()


                self.state = 601
                self.match(FunctionParser.T__1)
                pass

            elif la_ == 2:
                localctx = FunctionParser.InitDeclWithAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 603
                self.declarator()
                self.state = 604
                self.match(FunctionParser.T__4)
                self.state = 605
                self.initializer()
                pass

            elif la_ == 3:
                localctx = FunctionParser.InitDeclSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 607
                self.declarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FunctionParser.IdentifierContext,0)


        def ptrs(self):
            return self.getTypedRuleContext(FunctionParser.PtrsContext,0)


        def type_suffix(self):
            return self.getTypedRuleContext(FunctionParser.Type_suffixContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = FunctionParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==7:
                self.state = 610
                self.ptrs()


            self.state = 613
            self.identifier()
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 614
                self.type_suffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_expression(self):
            return self.getTypedRuleContext(FunctionParser.Conditional_expressionContext,0)


        def param_type_list(self):
            return self.getTypedRuleContext(FunctionParser.Param_type_listContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_type_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_suffix" ):
                listener.enterType_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_suffix" ):
                listener.exitType_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_suffix" ):
                return visitor.visitType_suffix(self)
            else:
                return visitor.visitChildren(self)




    def type_suffix(self):

        localctx = FunctionParser.Type_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_type_suffix)
        self._la = 0 # Token type
        try:
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.match(FunctionParser.T__23)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13721905121988546) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 16133) != 0):
                    self.state = 618
                    self.conditional_expression()


                self.state = 621
                self.match(FunctionParser.T__24)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                self.param_type_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_decl(self):
            return self.getTypedRuleContext(FunctionParser.Var_declContext,0)


        def TYPEDEF(self):
            return self.getToken(FunctionParser.TYPEDEF, 0)

        def template_decl_start(self):
            return self.getTypedRuleContext(FunctionParser.Template_decl_startContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_simple_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_decl" ):
                listener.enterSimple_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_decl" ):
                listener.exitSimple_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_decl" ):
                return visitor.visitSimple_decl(self)
            else:
                return visitor.visitChildren(self)




    def simple_decl(self):

        localctx = FunctionParser.Simple_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_simple_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 625
                self.match(FunctionParser.TYPEDEF)


            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 628
                self.template_decl_start()


            self.state = 631
            self.var_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionParser.RULE_var_decl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeclByClassContext(Var_declContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Var_declContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def class_def(self):
            return self.getTypedRuleContext(FunctionParser.Class_defContext,0)

        def init_declarator_list(self):
            return self.getTypedRuleContext(FunctionParser.Init_declarator_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclByClass" ):
                listener.enterDeclByClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclByClass" ):
                listener.exitDeclByClass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclByClass" ):
                return visitor.visitDeclByClass(self)
            else:
                return visitor.visitChildren(self)


    class DeclByTypeContext(Var_declContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionParser.Var_declContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_name(self):
            return self.getTypedRuleContext(FunctionParser.Type_nameContext,0)

        def init_declarator_list(self):
            return self.getTypedRuleContext(FunctionParser.Init_declarator_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclByType" ):
                listener.enterDeclByType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclByType" ):
                listener.exitDeclByType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclByType" ):
                return visitor.visitDeclByType(self)
            else:
                return visitor.visitChildren(self)



    def var_decl(self):

        localctx = FunctionParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_var_decl)
        try:
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                localctx = FunctionParser.DeclByClassContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                self.class_def()
                self.state = 635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 634
                    self.init_declarator_list()


                pass

            elif la_ == 2:
                localctx = FunctionParser.DeclByTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 637
                self.type_name()
                self.state = 638
                self.init_declarator_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def init_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Init_declaratorContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Init_declaratorContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_init_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_declarator_list" ):
                listener.enterInit_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_declarator_list" ):
                listener.exitInit_declarator_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_declarator_list" ):
                return visitor.visitInit_declarator_list(self)
            else:
                return visitor.visitChildren(self)




    def init_declarator_list(self):

        localctx = FunctionParser.Init_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_init_declarator_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.init_declarator()
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==48:
                self.state = 643
                self.match(FunctionParser.T__47)
                self.state = 644
                self.init_declarator()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 650
            self.match(FunctionParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_expr(self):
            return self.getTypedRuleContext(FunctionParser.Assign_exprContext,0)


        def OPENING_CURLY(self):
            return self.getToken(FunctionParser.OPENING_CURLY, 0)

        def initializer_list(self):
            return self.getTypedRuleContext(FunctionParser.Initializer_listContext,0)


        def CLOSING_CURLY(self):
            return self.getToken(FunctionParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = FunctionParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_initializer)
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 6, 7, 8, 9, 10, 11, 20, 21, 22, 46, 47, 52, 53, 83, 85, 91, 92, 93, 94, 95, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.assign_expr()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.match(FunctionParser.OPENING_CURLY)
                self.state = 654
                self.initializer_list()
                self.state = 655
                self.match(FunctionParser.CLOSING_CURLY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.InitializerContext)
            else:
                return self.getTypedRuleContext(FunctionParser.InitializerContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_list" ):
                listener.enterInitializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_list" ):
                listener.exitInitializer_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer_list" ):
                return visitor.visitInitializer_list(self)
            else:
                return visitor.visitChildren(self)




    def initializer_list(self):

        localctx = FunctionParser.Initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_initializer_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.initializer()
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==48:
                self.state = 660
                self.match(FunctionParser.T__47)
                self.state = 661
                self.initializer()
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_KEY(self):
            return self.getToken(FunctionParser.CLASS_KEY, 0)

        def OPENING_CURLY(self):
            return self.getToken(FunctionParser.OPENING_CURLY, 0)

        def class_name(self):
            return self.getTypedRuleContext(FunctionParser.Class_nameContext,0)


        def base_classes(self):
            return self.getTypedRuleContext(FunctionParser.Base_classesContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_class_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_def" ):
                listener.enterClass_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_def" ):
                listener.exitClass_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_def" ):
                return visitor.visitClass_def(self)
            else:
                return visitor.visitChildren(self)




    def class_def(self):

        localctx = FunctionParser.Class_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_class_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(FunctionParser.CLASS_KEY)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7340032) != 0) or _la==85:
                self.state = 668
                self.class_name()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 671
                self.base_classes()


            self.state = 674
            self.match(FunctionParser.OPENING_CURLY)
            self.skipToEndOfObject(); 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FunctionParser.IdentifierContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_name" ):
                listener.enterClass_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_name" ):
                listener.exitClass_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_name" ):
                return visitor.visitClass_name(self)
            else:
                return visitor.visitChildren(self)




    def class_name(self):

        localctx = FunctionParser.Class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_classesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_class(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Base_classContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Base_classContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_base_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_classes" ):
                listener.enterBase_classes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_classes" ):
                listener.exitBase_classes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase_classes" ):
                return visitor.visitBase_classes(self)
            else:
                return visitor.visitChildren(self)




    def base_classes(self):

        localctx = FunctionParser.Base_classesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_base_classes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(FunctionParser.T__3)
            self.state = 680
            self.base_class()
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==48:
                self.state = 681
                self.match(FunctionParser.T__47)
                self.state = 682
                self.base_class()
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_classContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FunctionParser.IdentifierContext,0)


        def VIRTUAL(self):
            return self.getToken(FunctionParser.VIRTUAL, 0)

        def access_specifier(self):
            return self.getTypedRuleContext(FunctionParser.Access_specifierContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_base_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_class" ):
                listener.enterBase_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_class" ):
                listener.exitBase_class(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase_class" ):
                return visitor.visitBase_class(self)
            else:
                return visitor.visitChildren(self)




    def base_class(self):

        localctx = FunctionParser.Base_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_base_class)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 688
                self.match(FunctionParser.VIRTUAL)


            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 691
                self.access_specifier()


            self.state = 694
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Base_typeContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Base_typeContext,i)


        def CV_QUALIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionParser.CV_QUALIFIER)
            else:
                return self.getToken(FunctionParser.CV_QUALIFIER, i)

        def template_param_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Template_param_listContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Template_param_listContext,i)


        def CLASS_KEY(self):
            return self.getToken(FunctionParser.CLASS_KEY, 0)

        def UNSIGNED(self):
            return self.getToken(FunctionParser.UNSIGNED, 0)

        def SIGNED(self):
            return self.getToken(FunctionParser.SIGNED, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = FunctionParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_type_name)
        self._la = 0 # Token type
        try:
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==72:
                    self.state = 696
                    self.match(FunctionParser.CV_QUALIFIER)
                    self.state = 701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 32771) != 0):
                    self.state = 702
                    _la = self._input.LA(1)
                    if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 32771) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 705
                self.base_type()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 706
                    self.match(FunctionParser.T__11)
                    self.state = 707
                    self.template_param_list()
                    self.state = 708
                    self.match(FunctionParser.T__12)


                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==52:
                    self.state = 712
                    self.match(FunctionParser.T__51)
                    self.state = 713
                    self.base_type()
                    self.state = 718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==12:
                        self.state = 714
                        self.match(FunctionParser.T__11)
                        self.state = 715
                        self.template_param_list()
                        self.state = 716
                        self.match(FunctionParser.T__12)


                    self.state = 724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 725
                    self.match(FunctionParser.CV_QUALIFIER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(FunctionParser.UNSIGNED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.match(FunctionParser.SIGNED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALPHA_NUMERIC(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionParser.ALPHA_NUMERIC)
            else:
                return self.getToken(FunctionParser.ALPHA_NUMERIC, i)

        def VOID(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionParser.VOID)
            else:
                return self.getToken(FunctionParser.VOID, i)

        def LONG(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionParser.LONG)
            else:
                return self.getToken(FunctionParser.LONG, i)

        def getRuleIndex(self):
            return FunctionParser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase_type" ):
                return visitor.visitBase_type(self)
            else:
                return visitor.visitChildren(self)




    def base_type(self):

        localctx = FunctionParser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_base_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 732
                    _la = self._input.LA(1)
                    if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 131081) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 735 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_decl_specifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(FunctionParser.Type_nameContext,0)


        def AUTO(self):
            return self.getToken(FunctionParser.AUTO, 0)

        def REGISTER(self):
            return self.getToken(FunctionParser.REGISTER, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_param_decl_specifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_decl_specifiers" ):
                listener.enterParam_decl_specifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_decl_specifiers" ):
                listener.exitParam_decl_specifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_decl_specifiers" ):
                return visitor.visitParam_decl_specifiers(self)
            else:
                return visitor.visitChildren(self)




    def param_decl_specifiers(self):

        localctx = FunctionParser.Param_decl_specifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_param_decl_specifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79 or _la==80:
                self.state = 737
                _la = self._input.LA(1)
                if not(_la==79 or _la==80):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 740
            self.type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FunctionParser.IdentifierContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_name" ):
                return visitor.visitParameter_name(self)
            else:
                return visitor.visitChildren(self)




    def parameter_name(self):

        localctx = FunctionParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VOID(self):
            return self.getToken(FunctionParser.VOID, 0)

        def param_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Param_typeContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Param_typeContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_param_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_type_list" ):
                listener.enterParam_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_type_list" ):
                listener.exitParam_type_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_type_list" ):
                return visitor.visitParam_type_list(self)
            else:
                return visitor.visitChildren(self)




    def param_type_list(self):

        localctx = FunctionParser.Param_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_param_type_list)
        self._la = 0 # Token type
        try:
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(FunctionParser.T__0)
                self.state = 745
                self.match(FunctionParser.VOID)
                self.state = 746
                self.match(FunctionParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.match(FunctionParser.T__0)
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 202783) != 0):
                    self.state = 748
                    self.param_type()
                    self.state = 753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==48:
                        self.state = 749
                        self.match(FunctionParser.T__47)
                        self.state = 750
                        self.param_type()
                        self.state = 755
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 758
                self.match(FunctionParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_decl_specifiers(self):
            return self.getTypedRuleContext(FunctionParser.Param_decl_specifiersContext,0)


        def param_type_id(self):
            return self.getTypedRuleContext(FunctionParser.Param_type_idContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_param_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_type" ):
                listener.enterParam_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_type" ):
                listener.exitParam_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_type" ):
                return visitor.visitParam_type(self)
            else:
                return visitor.visitChildren(self)




    def param_type(self):

        localctx = FunctionParser.Param_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_param_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.param_decl_specifiers()
            self.state = 762
            self.param_type_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_type_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_type_id(self):
            return self.getTypedRuleContext(FunctionParser.Param_type_idContext,0)


        def ptrs(self):
            return self.getTypedRuleContext(FunctionParser.PtrsContext,0)


        def type_suffix(self):
            return self.getTypedRuleContext(FunctionParser.Type_suffixContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(FunctionParser.Parameter_nameContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_param_type_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_type_id" ):
                listener.enterParam_type_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_type_id" ):
                listener.exitParam_type_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_type_id" ):
                return visitor.visitParam_type_id(self)
            else:
                return visitor.visitChildren(self)




    def param_type_id(self):

        localctx = FunctionParser.Param_type_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_param_type_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==7:
                self.state = 764
                self.ptrs()


            self.state = 774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 767
                self.match(FunctionParser.T__0)
                self.state = 768
                self.param_type_id()
                self.state = 769
                self.match(FunctionParser.T__1)
                pass

            elif la_ == 2:
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7340032) != 0) or _la==85:
                    self.state = 771
                    self.parameter_name()


                pass


            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1 or _la==24:
                self.state = 776
                self.type_suffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALPHA_NUMERIC(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionParser.ALPHA_NUMERIC)
            else:
                return self.getToken(FunctionParser.ALPHA_NUMERIC, i)

        def access_specifier(self):
            return self.getTypedRuleContext(FunctionParser.Access_specifierContext,0)


        def getRuleIndex(self):
            return FunctionParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = FunctionParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_identifier)
        try:
            self.state = 788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 779
                self.match(FunctionParser.ALPHA_NUMERIC)
                self.state = 784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 780
                        self.match(FunctionParser.T__51)
                        self.state = 781
                        self.match(FunctionParser.ALPHA_NUMERIC) 
                    self.state = 786
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                pass
            elif token in [20, 21, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.access_specifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_LITERAL(self):
            return self.getToken(FunctionParser.HEX_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(FunctionParser.DECIMAL_LITERAL, 0)

        def OCTAL_LITERAL(self):
            return self.getToken(FunctionParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return FunctionParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = FunctionParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            _la = self._input.LA(1)
            if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptr_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionParser.Ptr_operatorContext)
            else:
                return self.getTypedRuleContext(FunctionParser.Ptr_operatorContext,i)


        def getRuleIndex(self):
            return FunctionParser.RULE_ptrs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrs" ):
                listener.enterPtrs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrs" ):
                listener.exitPtrs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrs" ):
                return visitor.visitPtrs(self)
            else:
                return visitor.visitChildren(self)




    def ptrs(self):

        localctx = FunctionParser.PtrsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_ptrs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 792
                self.ptr_operator()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55:
                    self.state = 793
                    self.match(FunctionParser.T__54)


                self.state = 798 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==6 or _la==7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[60] = self.postfix_expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfix_expression_sempred(self, localctx:Postfix_expressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




