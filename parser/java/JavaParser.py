# Generated from JavaParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,129,1763,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,1,0,3,0,258,8,0,1,0,1,0,5,0,262,8,0,10,0,
        12,0,265,9,0,1,0,1,0,5,0,269,8,0,10,0,12,0,272,9,0,1,0,1,0,1,0,3,
        0,277,8,0,1,1,5,1,280,8,1,10,1,12,1,283,9,1,1,1,1,1,1,1,1,1,1,2,
        1,2,3,2,291,8,2,1,2,1,2,1,2,3,2,296,8,2,1,2,1,2,1,3,5,3,301,8,3,
        10,3,12,3,304,9,3,1,3,1,3,1,3,1,3,1,3,3,3,311,8,3,1,4,1,4,1,4,1,
        4,1,4,3,4,318,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,330,
        8,5,1,6,1,6,3,6,334,8,6,1,7,1,7,1,7,3,7,339,8,7,1,7,1,7,3,7,343,
        8,7,1,7,1,7,3,7,347,8,7,1,7,1,7,3,7,351,8,7,1,7,1,7,1,8,1,8,1,8,
        1,8,5,8,359,8,8,10,8,12,8,362,9,8,1,8,1,8,1,9,5,9,367,8,9,10,9,12,
        9,370,9,9,1,9,1,9,1,9,5,9,375,8,9,10,9,12,9,378,9,9,1,9,3,9,381,
        8,9,1,10,1,10,1,10,5,10,386,8,10,10,10,12,10,389,9,10,1,11,1,11,
        1,11,1,11,3,11,395,8,11,1,11,1,11,3,11,399,8,11,1,11,3,11,402,8,
        11,1,11,3,11,405,8,11,1,11,1,11,1,12,1,12,1,12,5,12,412,8,12,10,
        12,12,12,415,9,12,1,13,5,13,418,8,13,10,13,12,13,421,9,13,1,13,1,
        13,3,13,425,8,13,1,13,3,13,428,8,13,1,14,1,14,5,14,432,8,14,10,14,
        12,14,435,9,14,1,15,1,15,1,15,3,15,440,8,15,1,15,1,15,3,15,444,8,
        15,1,15,1,15,3,15,448,8,15,1,15,1,15,1,16,1,16,5,16,454,8,16,10,
        16,12,16,457,9,16,1,16,1,16,1,17,1,17,5,17,463,8,17,10,17,12,17,
        466,9,17,1,17,1,17,1,18,1,18,3,18,472,8,18,1,18,1,18,5,18,476,8,
        18,10,18,12,18,479,9,18,1,18,3,18,482,8,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,3,19,494,8,19,1,20,1,20,1,20,1,20,1,
        20,5,20,501,8,20,10,20,12,20,504,9,20,1,20,1,20,3,20,508,8,20,1,
        20,1,20,1,21,1,21,1,22,1,22,3,22,516,8,22,1,23,1,23,3,23,520,8,23,
        1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,532,8,26,
        1,26,1,26,1,27,5,27,537,8,27,10,27,12,27,540,9,27,1,27,1,27,1,27,
        1,28,1,28,1,28,1,28,1,29,5,29,550,8,29,10,29,12,29,553,9,29,1,29,
        1,29,3,29,557,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,
        567,8,30,1,31,1,31,1,31,1,31,5,31,573,8,31,10,31,12,31,576,9,31,
        1,31,1,31,1,32,1,32,1,32,5,32,583,8,32,10,32,12,32,586,9,32,1,32,
        1,32,1,32,1,33,5,33,592,8,33,10,33,12,33,595,9,33,1,33,1,33,1,34,
        1,34,1,34,1,34,1,34,1,34,3,34,605,8,34,1,35,5,35,608,8,35,10,35,
        12,35,611,9,35,1,35,1,35,1,35,1,36,5,36,617,8,36,10,36,12,36,620,
        9,36,1,36,1,36,1,36,1,36,1,36,5,36,627,8,36,10,36,12,36,630,9,36,
        1,36,1,36,3,36,634,8,36,1,36,1,36,1,37,1,37,1,37,5,37,641,8,37,10,
        37,12,37,644,9,37,1,38,1,38,1,38,3,38,649,8,38,1,39,1,39,1,39,5,
        39,654,8,39,10,39,12,39,657,9,39,1,40,1,40,1,41,1,41,3,41,663,8,
        41,1,42,1,42,1,42,1,42,5,42,669,8,42,10,42,12,42,672,9,42,1,42,3,
        42,675,8,42,3,42,677,8,42,1,42,1,42,1,43,1,43,3,43,683,8,43,1,43,
        1,43,5,43,687,8,43,10,43,12,43,690,9,43,1,43,1,43,3,43,694,8,43,
        1,44,1,44,5,44,698,8,44,10,44,12,44,701,9,44,1,44,1,44,1,44,3,44,
        706,8,44,3,44,708,8,44,1,45,1,45,1,45,5,45,713,8,45,10,45,12,45,
        716,9,45,1,46,1,46,3,46,720,8,46,1,46,1,46,1,46,3,46,725,8,46,1,
        46,3,46,728,8,46,3,46,730,8,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,
        738,8,47,10,47,12,47,741,9,47,1,47,1,47,1,48,1,48,1,48,5,48,748,
        8,48,10,48,12,48,751,9,48,1,48,1,48,3,48,755,8,48,1,48,3,48,758,
        8,48,1,49,5,49,761,8,49,10,49,12,49,764,9,49,1,49,1,49,1,49,1,50,
        5,50,770,8,50,10,50,12,50,773,9,50,1,50,1,50,5,50,777,8,50,10,50,
        12,50,780,9,50,1,50,1,50,1,50,1,51,1,51,1,51,5,51,788,8,51,10,51,
        12,51,791,9,51,1,52,5,52,794,8,52,10,52,12,52,797,9,52,1,52,1,52,
        1,52,1,53,1,53,1,53,5,53,805,8,53,10,53,12,53,808,9,53,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,3,54,817,8,54,1,55,1,55,1,56,1,56,1,57,
        1,57,1,57,5,57,826,8,57,10,57,12,57,829,9,57,1,57,1,57,1,57,1,58,
        1,58,1,58,3,58,837,8,58,1,58,1,58,1,58,3,58,842,8,58,1,58,3,58,845,
        8,58,1,59,1,59,1,59,5,59,850,8,59,10,59,12,59,853,9,59,1,60,1,60,
        1,60,1,60,1,61,1,61,1,61,3,61,862,8,61,1,62,1,62,1,62,1,62,5,62,
        868,8,62,10,62,12,62,871,9,62,3,62,873,8,62,1,62,3,62,876,8,62,1,
        62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,5,64,887,8,64,10,64,12,
        64,890,9,64,1,64,1,64,1,65,5,65,895,8,65,10,65,12,65,898,9,65,1,
        65,1,65,3,65,902,8,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,910,8,66,
        1,66,1,66,3,66,914,8,66,1,66,1,66,3,66,918,8,66,1,66,1,66,3,66,922,
        8,66,1,66,1,66,3,66,926,8,66,3,66,928,8,66,1,67,1,67,3,67,932,8,
        67,1,68,1,68,1,68,1,68,3,68,938,8,68,1,69,1,69,1,70,1,70,1,70,1,
        71,3,71,946,8,71,1,71,1,71,1,71,1,71,1,72,1,72,5,72,954,8,72,10,
        72,12,72,957,9,72,1,72,1,72,1,73,1,73,5,73,963,8,73,10,73,12,73,
        966,9,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,975,8,73,1,73,1,
        73,1,73,1,73,1,73,1,73,3,73,983,8,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,997,8,73,1,74,1,74,1,75,1,
        75,1,75,3,75,1004,8,75,1,75,1,75,1,75,3,75,1009,8,75,1,75,1,75,1,
        76,1,76,3,76,1015,8,76,1,76,1,76,1,77,1,77,1,77,5,77,1022,8,77,10,
        77,12,77,1025,9,77,1,78,1,78,1,78,1,79,1,79,1,79,5,79,1033,8,79,
        10,79,12,79,1036,9,79,1,79,1,79,1,80,1,80,5,80,1042,8,80,10,80,12,
        80,1045,9,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,3,81,1054,8,81,1,
        82,5,82,1057,8,82,10,82,12,82,1060,9,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,3,82,1070,8,82,1,83,1,83,1,84,1,84,1,85,5,85,1077,
        8,85,10,85,12,85,1080,9,85,1,85,1,85,1,85,3,85,1085,8,85,1,86,1,
        86,1,86,1,86,1,86,3,86,1092,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,3,86,1101,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,4,86,1122,8,86,11,
        86,12,86,1123,1,86,3,86,1127,8,86,1,86,3,86,1130,8,86,1,86,1,86,
        1,86,1,86,5,86,1136,8,86,10,86,12,86,1139,9,86,1,86,3,86,1142,8,
        86,1,86,1,86,1,86,1,86,5,86,1148,8,86,10,86,12,86,1151,9,86,1,86,
        5,86,1154,8,86,10,86,12,86,1157,9,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,3,86,1167,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,
        86,1176,8,86,1,86,1,86,1,86,3,86,1181,8,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1194,8,86,1,86,1,86,1,86,1,
        86,3,86,1200,8,86,1,87,1,87,1,87,5,87,1205,8,87,10,87,12,87,1208,
        9,87,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,5,88,1218,8,88,10,88,
        12,88,1221,9,88,1,89,1,89,1,89,1,90,1,90,1,90,3,90,1229,8,90,1,90,
        1,90,1,91,1,91,1,91,5,91,1236,8,91,10,91,12,91,1239,9,91,1,92,5,
        92,1242,8,92,10,92,12,92,1245,9,92,1,92,1,92,1,92,1,92,1,92,3,92,
        1252,8,92,1,92,1,92,1,92,1,92,3,92,1258,8,92,1,93,4,93,1261,8,93,
        11,93,12,93,1262,1,93,4,93,1266,8,93,11,93,12,93,1267,1,94,1,94,
        1,94,1,94,1,94,1,94,3,94,1276,8,94,1,94,1,94,1,94,3,94,1281,8,94,
        1,95,1,95,3,95,1285,8,95,1,95,1,95,3,95,1289,8,95,1,95,1,95,3,95,
        1293,8,95,3,95,1295,8,95,1,96,1,96,3,96,1299,8,96,1,97,5,97,1302,
        8,97,10,97,12,97,1305,9,97,1,97,1,97,3,97,1309,8,97,1,97,1,97,1,
        97,1,97,1,98,1,98,1,98,1,98,1,99,1,99,1,99,5,99,1322,8,99,10,99,
        12,99,1325,9,99,1,100,1,100,1,100,3,100,1330,8,100,1,100,1,100,1,
        101,1,101,1,101,1,101,1,101,1,101,3,101,1340,8,101,1,101,1,101,3,
        101,1344,8,101,1,101,1,101,1,101,3,101,1349,8,101,1,101,1,101,1,
        101,1,101,1,101,1,101,1,101,5,101,1358,8,101,10,101,12,101,1361,
        9,101,1,101,1,101,1,101,5,101,1366,8,101,10,101,12,101,1369,9,101,
        1,101,1,101,1,101,1,101,1,101,1,101,3,101,1377,8,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,3,101,1393,8,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,3,101,1438,8,101,1,101,1,101,1,101,1,101,3,101,
        1444,8,101,1,101,1,101,1,101,3,101,1449,8,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,3,101,1458,8,101,5,101,1460,8,101,10,101,
        12,101,1463,9,101,1,102,5,102,1466,8,102,10,102,12,102,1469,9,102,
        1,102,1,102,5,102,1473,8,102,10,102,12,102,1476,9,102,1,102,1,102,
        1,103,1,103,1,103,1,103,1,104,1,104,1,104,3,104,1487,8,104,1,104,
        1,104,1,104,1,104,1,104,5,104,1494,8,104,10,104,12,104,1497,9,104,
        1,104,1,104,1,104,1,104,3,104,1503,8,104,1,104,3,104,1506,8,104,
        1,105,1,105,3,105,1510,8,105,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,
        1528,8,106,3,106,1530,8,106,1,107,1,107,1,107,1,107,5,107,1536,8,
        107,10,107,12,107,1539,9,107,1,107,1,107,1,108,1,108,1,108,1,108,
        3,108,1547,8,108,1,108,1,108,1,108,1,108,1,108,3,108,1554,8,108,
        1,109,1,109,1,109,1,109,1,109,1,109,5,109,1562,8,109,10,109,12,109,
        1565,9,109,1,109,1,109,5,109,1569,8,109,10,109,12,109,1572,9,109,
        1,109,1,109,1,109,5,109,1577,8,109,10,109,12,109,1580,9,109,3,109,
        1582,8,109,1,109,1,109,1,109,5,109,1587,8,109,10,109,12,109,1590,
        9,109,1,110,1,110,5,110,1594,8,110,10,110,12,110,1597,9,110,3,110,
        1599,8,110,1,111,1,111,1,111,3,111,1604,8,111,1,111,5,111,1607,8,
        111,10,111,12,111,1610,9,111,1,111,1,111,3,111,1614,8,111,1,112,
        3,112,1617,8,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1625,
        8,112,1,113,1,113,3,113,1629,8,113,1,113,1,113,1,113,3,113,1634,
        8,113,5,113,1636,8,113,10,113,12,113,1639,9,113,1,113,3,113,1642,
        8,113,1,114,1,114,3,114,1646,8,114,1,114,1,114,1,115,1,115,4,115,
        1652,8,115,11,115,12,115,1653,1,115,1,115,1,115,1,115,1,115,4,115,
        1661,8,115,11,115,12,115,1662,1,115,1,115,5,115,1667,8,115,10,115,
        12,115,1670,9,115,3,115,1672,8,115,1,116,1,116,3,116,1676,8,116,
        1,117,1,117,1,117,1,118,1,118,1,118,3,118,1684,8,118,1,119,1,119,
        1,119,3,119,1689,8,119,1,120,1,120,1,120,1,120,1,121,1,121,1,121,
        5,121,1698,8,121,10,121,12,121,1701,9,121,1,122,5,122,1704,8,122,
        10,122,12,122,1707,9,122,1,122,1,122,3,122,1711,8,122,1,122,5,122,
        1714,8,122,10,122,12,122,1717,9,122,1,122,1,122,5,122,1721,8,122,
        10,122,12,122,1724,9,122,1,123,1,123,1,124,1,124,1,124,1,124,5,124,
        1732,8,124,10,124,12,124,1735,9,124,1,124,1,124,1,125,1,125,1,125,
        3,125,1742,8,125,1,125,1,125,3,125,1746,8,125,3,125,1748,8,125,1,
        126,1,126,1,126,1,126,1,126,3,126,1755,8,126,1,127,1,127,3,127,1759,
        8,127,1,127,1,127,1,127,0,2,202,218,128,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
        170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
        202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
        234,236,238,240,242,244,246,248,250,252,254,0,15,2,0,17,17,40,40,
        1,0,67,70,1,0,71,72,2,0,38,38,60,60,2,0,51,65,129,129,3,0,51,60,
        63,65,129,129,2,0,90,91,100,103,2,0,104,105,109,109,1,0,102,103,
        2,0,88,89,95,96,2,0,94,94,97,97,2,0,87,87,110,120,1,0,100,101,2,
        0,93,93,121,121,8,0,3,3,5,5,8,8,14,14,20,20,27,27,29,29,37,37,1957,
        0,276,1,0,0,0,2,281,1,0,0,0,4,288,1,0,0,0,6,302,1,0,0,0,8,317,1,
        0,0,0,10,329,1,0,0,0,12,333,1,0,0,0,14,335,1,0,0,0,16,354,1,0,0,
        0,18,368,1,0,0,0,20,382,1,0,0,0,22,390,1,0,0,0,24,408,1,0,0,0,26,
        419,1,0,0,0,28,429,1,0,0,0,30,436,1,0,0,0,32,451,1,0,0,0,34,460,
        1,0,0,0,36,481,1,0,0,0,38,493,1,0,0,0,40,495,1,0,0,0,42,511,1,0,
        0,0,44,515,1,0,0,0,46,519,1,0,0,0,48,521,1,0,0,0,50,524,1,0,0,0,
        52,527,1,0,0,0,54,538,1,0,0,0,56,544,1,0,0,0,58,556,1,0,0,0,60,566,
        1,0,0,0,62,568,1,0,0,0,64,579,1,0,0,0,66,593,1,0,0,0,68,604,1,0,
        0,0,70,609,1,0,0,0,72,618,1,0,0,0,74,637,1,0,0,0,76,645,1,0,0,0,
        78,650,1,0,0,0,80,658,1,0,0,0,82,662,1,0,0,0,84,664,1,0,0,0,86,688,
        1,0,0,0,88,707,1,0,0,0,90,709,1,0,0,0,92,717,1,0,0,0,94,733,1,0,
        0,0,96,757,1,0,0,0,98,762,1,0,0,0,100,771,1,0,0,0,102,784,1,0,0,
        0,104,795,1,0,0,0,106,801,1,0,0,0,108,816,1,0,0,0,110,818,1,0,0,
        0,112,820,1,0,0,0,114,827,1,0,0,0,116,836,1,0,0,0,118,846,1,0,0,
        0,120,854,1,0,0,0,122,861,1,0,0,0,124,863,1,0,0,0,126,879,1,0,0,
        0,128,884,1,0,0,0,130,901,1,0,0,0,132,927,1,0,0,0,134,931,1,0,0,
        0,136,933,1,0,0,0,138,939,1,0,0,0,140,941,1,0,0,0,142,945,1,0,0,
        0,144,951,1,0,0,0,146,996,1,0,0,0,148,998,1,0,0,0,150,1000,1,0,0,
        0,152,1012,1,0,0,0,154,1018,1,0,0,0,156,1026,1,0,0,0,158,1029,1,
        0,0,0,160,1039,1,0,0,0,162,1053,1,0,0,0,164,1058,1,0,0,0,166,1071,
        1,0,0,0,168,1073,1,0,0,0,170,1078,1,0,0,0,172,1199,1,0,0,0,174,1201,
        1,0,0,0,176,1214,1,0,0,0,178,1222,1,0,0,0,180,1225,1,0,0,0,182,1232,
        1,0,0,0,184,1257,1,0,0,0,186,1260,1,0,0,0,188,1280,1,0,0,0,190,1294,
        1,0,0,0,192,1298,1,0,0,0,194,1303,1,0,0,0,196,1314,1,0,0,0,198,1318,
        1,0,0,0,200,1329,1,0,0,0,202,1376,1,0,0,0,204,1467,1,0,0,0,206,1479,
        1,0,0,0,208,1505,1,0,0,0,210,1509,1,0,0,0,212,1529,1,0,0,0,214,1531,
        1,0,0,0,216,1553,1,0,0,0,218,1581,1,0,0,0,220,1598,1,0,0,0,222,1603,
        1,0,0,0,224,1624,1,0,0,0,226,1641,1,0,0,0,228,1643,1,0,0,0,230,1671,
        1,0,0,0,232,1673,1,0,0,0,234,1677,1,0,0,0,236,1683,1,0,0,0,238,1688,
        1,0,0,0,240,1690,1,0,0,0,242,1694,1,0,0,0,244,1705,1,0,0,0,246,1725,
        1,0,0,0,248,1727,1,0,0,0,250,1747,1,0,0,0,252,1754,1,0,0,0,254,1756,
        1,0,0,0,256,258,3,2,1,0,257,256,1,0,0,0,257,258,1,0,0,0,258,263,
        1,0,0,0,259,262,3,4,2,0,260,262,5,84,0,0,261,259,1,0,0,0,261,260,
        1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,270,
        1,0,0,0,265,263,1,0,0,0,266,269,3,6,3,0,267,269,5,84,0,0,268,266,
        1,0,0,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,
        1,0,0,0,271,277,1,0,0,0,272,270,1,0,0,0,273,274,3,142,71,0,274,275,
        5,0,0,1,275,277,1,0,0,0,276,257,1,0,0,0,276,273,1,0,0,0,277,1,1,
        0,0,0,278,280,3,116,58,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,
        1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,0,284,285,
        5,32,0,0,285,286,3,106,53,0,286,287,5,84,0,0,287,3,1,0,0,0,288,290,
        5,25,0,0,289,291,5,38,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,
        1,0,0,0,292,295,3,106,53,0,293,294,5,86,0,0,294,296,5,104,0,0,295,
        293,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,5,84,0,0,298,
        5,1,0,0,0,299,301,3,10,5,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,
        1,0,0,0,302,303,1,0,0,0,303,310,1,0,0,0,304,302,1,0,0,0,305,311,
        3,14,7,0,306,311,3,22,11,0,307,311,3,30,15,0,308,311,3,126,63,0,
        309,311,3,150,75,0,310,305,1,0,0,0,310,306,1,0,0,0,310,307,1,0,0,
        0,310,308,1,0,0,0,310,309,1,0,0,0,311,7,1,0,0,0,312,318,3,10,5,0,
        313,318,5,30,0,0,314,318,5,42,0,0,315,318,5,46,0,0,316,318,5,49,
        0,0,317,312,1,0,0,0,317,313,1,0,0,0,317,314,1,0,0,0,317,315,1,0,
        0,0,317,316,1,0,0,0,318,9,1,0,0,0,319,330,3,116,58,0,320,330,5,35,
        0,0,321,330,5,34,0,0,322,330,5,33,0,0,323,330,5,38,0,0,324,330,5,
        1,0,0,325,330,5,18,0,0,326,330,5,39,0,0,327,330,5,64,0,0,328,330,
        5,66,0,0,329,319,1,0,0,0,329,320,1,0,0,0,329,321,1,0,0,0,329,322,
        1,0,0,0,329,323,1,0,0,0,329,324,1,0,0,0,329,325,1,0,0,0,329,326,
        1,0,0,0,329,327,1,0,0,0,329,328,1,0,0,0,330,11,1,0,0,0,331,334,5,
        18,0,0,332,334,3,116,58,0,333,331,1,0,0,0,333,332,1,0,0,0,334,13,
        1,0,0,0,335,336,5,9,0,0,336,338,3,166,83,0,337,339,3,16,8,0,338,
        337,1,0,0,0,338,339,1,0,0,0,339,342,1,0,0,0,340,341,5,17,0,0,341,
        343,3,244,122,0,342,340,1,0,0,0,342,343,1,0,0,0,343,346,1,0,0,0,
        344,345,5,24,0,0,345,347,3,242,121,0,346,344,1,0,0,0,346,347,1,0,
        0,0,347,350,1,0,0,0,348,349,5,65,0,0,349,351,3,242,121,0,350,348,
        1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,3,32,16,0,353,15,
        1,0,0,0,354,355,5,89,0,0,355,360,3,18,9,0,356,357,5,85,0,0,357,359,
        3,18,9,0,358,356,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,
        1,0,0,0,361,363,1,0,0,0,362,360,1,0,0,0,363,364,5,88,0,0,364,17,
        1,0,0,0,365,367,3,116,58,0,366,365,1,0,0,0,367,370,1,0,0,0,368,366,
        1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,380,
        3,166,83,0,372,376,5,17,0,0,373,375,3,116,58,0,374,373,1,0,0,0,375,
        378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,379,1,0,0,0,378,
        376,1,0,0,0,379,381,3,20,10,0,380,372,1,0,0,0,380,381,1,0,0,0,381,
        19,1,0,0,0,382,387,3,244,122,0,383,384,5,106,0,0,384,386,3,244,122,
        0,385,383,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,
        0,388,21,1,0,0,0,389,387,1,0,0,0,390,391,5,16,0,0,391,394,3,166,
        83,0,392,393,5,24,0,0,393,395,3,242,121,0,394,392,1,0,0,0,394,395,
        1,0,0,0,395,396,1,0,0,0,396,398,5,80,0,0,397,399,3,24,12,0,398,397,
        1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,402,5,85,0,0,401,400,
        1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,405,3,28,14,0,404,403,
        1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,5,81,0,0,407,23,
        1,0,0,0,408,413,3,26,13,0,409,410,5,85,0,0,410,412,3,26,13,0,411,
        409,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,
        25,1,0,0,0,415,413,1,0,0,0,416,418,3,116,58,0,417,416,1,0,0,0,418,
        421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,
        419,1,0,0,0,422,424,3,166,83,0,423,425,3,254,127,0,424,423,1,0,0,
        0,424,425,1,0,0,0,425,427,1,0,0,0,426,428,3,32,16,0,427,426,1,0,
        0,0,427,428,1,0,0,0,428,27,1,0,0,0,429,433,5,84,0,0,430,432,3,36,
        18,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,
        0,0,434,29,1,0,0,0,435,433,1,0,0,0,436,437,5,28,0,0,437,439,3,166,
        83,0,438,440,3,16,8,0,439,438,1,0,0,0,439,440,1,0,0,0,440,443,1,
        0,0,0,441,442,5,17,0,0,442,444,3,242,121,0,443,441,1,0,0,0,443,444,
        1,0,0,0,444,447,1,0,0,0,445,446,5,65,0,0,446,448,3,242,121,0,447,
        445,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,450,3,34,17,0,450,
        31,1,0,0,0,451,455,5,80,0,0,452,454,3,36,18,0,453,452,1,0,0,0,454,
        457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,
        455,1,0,0,0,458,459,5,81,0,0,459,33,1,0,0,0,460,464,5,80,0,0,461,
        463,3,58,29,0,462,461,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,
        465,1,0,0,0,465,467,1,0,0,0,466,464,1,0,0,0,467,468,5,81,0,0,468,
        35,1,0,0,0,469,482,5,84,0,0,470,472,5,38,0,0,471,470,1,0,0,0,471,
        472,1,0,0,0,472,473,1,0,0,0,473,482,3,160,80,0,474,476,3,8,4,0,475,
        474,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,
        480,1,0,0,0,479,477,1,0,0,0,480,482,3,38,19,0,481,469,1,0,0,0,481,
        471,1,0,0,0,481,477,1,0,0,0,482,37,1,0,0,0,483,494,3,150,75,0,484,
        494,3,40,20,0,485,494,3,48,24,0,486,494,3,56,28,0,487,494,3,52,26,
        0,488,494,3,50,25,0,489,494,3,30,15,0,490,494,3,126,63,0,491,494,
        3,14,7,0,492,494,3,22,11,0,493,483,1,0,0,0,493,484,1,0,0,0,493,485,
        1,0,0,0,493,486,1,0,0,0,493,487,1,0,0,0,493,488,1,0,0,0,493,489,
        1,0,0,0,493,490,1,0,0,0,493,491,1,0,0,0,493,492,1,0,0,0,494,39,1,
        0,0,0,495,496,3,46,23,0,496,497,3,42,21,0,497,502,3,92,46,0,498,
        499,5,82,0,0,499,501,5,83,0,0,500,498,1,0,0,0,501,504,1,0,0,0,502,
        500,1,0,0,0,502,503,1,0,0,0,503,507,1,0,0,0,504,502,1,0,0,0,505,
        506,5,45,0,0,506,508,3,90,45,0,507,505,1,0,0,0,507,508,1,0,0,0,508,
        509,1,0,0,0,509,510,3,44,22,0,510,41,1,0,0,0,511,512,3,166,83,0,
        512,43,1,0,0,0,513,516,3,160,80,0,514,516,5,84,0,0,515,513,1,0,0,
        0,515,514,1,0,0,0,516,45,1,0,0,0,517,520,3,244,122,0,518,520,5,48,
        0,0,519,517,1,0,0,0,519,518,1,0,0,0,520,47,1,0,0,0,521,522,3,16,
        8,0,522,523,3,40,20,0,523,49,1,0,0,0,524,525,3,16,8,0,525,526,3,
        52,26,0,526,51,1,0,0,0,527,528,3,166,83,0,528,531,3,92,46,0,529,
        530,5,45,0,0,530,532,3,90,45,0,531,529,1,0,0,0,531,532,1,0,0,0,532,
        533,1,0,0,0,533,534,3,160,80,0,534,53,1,0,0,0,535,537,3,8,4,0,536,
        535,1,0,0,0,537,540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,
        541,1,0,0,0,540,538,1,0,0,0,541,542,3,166,83,0,542,543,3,160,80,
        0,543,55,1,0,0,0,544,545,3,244,122,0,545,546,3,74,37,0,546,547,5,
        84,0,0,547,57,1,0,0,0,548,550,3,8,4,0,549,548,1,0,0,0,550,553,1,
        0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,554,1,0,0,0,553,551,1,
        0,0,0,554,557,3,60,30,0,555,557,5,84,0,0,556,551,1,0,0,0,556,555,
        1,0,0,0,557,59,1,0,0,0,558,567,3,150,75,0,559,567,3,62,31,0,560,
        567,3,66,33,0,561,567,3,70,35,0,562,567,3,30,15,0,563,567,3,126,
        63,0,564,567,3,14,7,0,565,567,3,22,11,0,566,558,1,0,0,0,566,559,
        1,0,0,0,566,560,1,0,0,0,566,561,1,0,0,0,566,562,1,0,0,0,566,563,
        1,0,0,0,566,564,1,0,0,0,566,565,1,0,0,0,567,61,1,0,0,0,568,569,3,
        244,122,0,569,574,3,64,32,0,570,571,5,85,0,0,571,573,3,64,32,0,572,
        570,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,
        577,1,0,0,0,576,574,1,0,0,0,577,578,5,84,0,0,578,63,1,0,0,0,579,
        584,3,166,83,0,580,581,5,82,0,0,581,583,5,83,0,0,582,580,1,0,0,0,
        583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,587,1,0,0,0,
        586,584,1,0,0,0,587,588,5,87,0,0,588,589,3,82,41,0,589,65,1,0,0,
        0,590,592,3,68,34,0,591,590,1,0,0,0,592,595,1,0,0,0,593,591,1,0,
        0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,593,1,0,0,0,596,597,3,72,
        36,0,597,67,1,0,0,0,598,605,3,116,58,0,599,605,5,35,0,0,600,605,
        5,1,0,0,601,605,5,12,0,0,602,605,5,38,0,0,603,605,5,39,0,0,604,598,
        1,0,0,0,604,599,1,0,0,0,604,600,1,0,0,0,604,601,1,0,0,0,604,602,
        1,0,0,0,604,603,1,0,0,0,605,69,1,0,0,0,606,608,3,68,34,0,607,606,
        1,0,0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,612,
        1,0,0,0,611,609,1,0,0,0,612,613,3,16,8,0,613,614,3,72,36,0,614,71,
        1,0,0,0,615,617,3,116,58,0,616,615,1,0,0,0,617,620,1,0,0,0,618,616,
        1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,618,1,0,0,0,621,622,
        3,46,23,0,622,623,3,166,83,0,623,628,3,92,46,0,624,625,5,82,0,0,
        625,627,5,83,0,0,626,624,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,
        628,629,1,0,0,0,629,633,1,0,0,0,630,628,1,0,0,0,631,632,5,45,0,0,
        632,634,3,90,45,0,633,631,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,
        0,635,636,3,44,22,0,636,73,1,0,0,0,637,642,3,76,38,0,638,639,5,85,
        0,0,639,641,3,76,38,0,640,638,1,0,0,0,641,644,1,0,0,0,642,640,1,
        0,0,0,642,643,1,0,0,0,643,75,1,0,0,0,644,642,1,0,0,0,645,648,3,78,
        39,0,646,647,5,87,0,0,647,649,3,82,41,0,648,646,1,0,0,0,648,649,
        1,0,0,0,649,77,1,0,0,0,650,655,3,80,40,0,651,652,5,82,0,0,652,654,
        5,83,0,0,653,651,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,
        1,0,0,0,656,79,1,0,0,0,657,655,1,0,0,0,658,659,3,166,83,0,659,81,
        1,0,0,0,660,663,3,84,42,0,661,663,3,202,101,0,662,660,1,0,0,0,662,
        661,1,0,0,0,663,83,1,0,0,0,664,676,5,80,0,0,665,670,3,82,41,0,666,
        667,5,85,0,0,667,669,3,82,41,0,668,666,1,0,0,0,669,672,1,0,0,0,670,
        668,1,0,0,0,670,671,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,673,
        675,5,85,0,0,674,673,1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,
        665,1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,679,5,81,0,0,679,
        85,1,0,0,0,680,682,3,166,83,0,681,683,3,248,124,0,682,681,1,0,0,
        0,682,683,1,0,0,0,683,684,1,0,0,0,684,685,5,86,0,0,685,687,1,0,0,
        0,686,680,1,0,0,0,687,690,1,0,0,0,688,686,1,0,0,0,688,689,1,0,0,
        0,689,691,1,0,0,0,690,688,1,0,0,0,691,693,3,168,84,0,692,694,3,248,
        124,0,693,692,1,0,0,0,693,694,1,0,0,0,694,87,1,0,0,0,695,708,3,244,
        122,0,696,698,3,116,58,0,697,696,1,0,0,0,698,701,1,0,0,0,699,697,
        1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,699,1,0,0,0,702,705,
        5,92,0,0,703,704,7,0,0,0,704,706,3,244,122,0,705,703,1,0,0,0,705,
        706,1,0,0,0,706,708,1,0,0,0,707,695,1,0,0,0,707,699,1,0,0,0,708,
        89,1,0,0,0,709,714,3,106,53,0,710,711,5,85,0,0,711,713,3,106,53,
        0,712,710,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,
        0,715,91,1,0,0,0,716,714,1,0,0,0,717,729,5,78,0,0,718,720,3,94,47,
        0,719,718,1,0,0,0,719,720,1,0,0,0,720,730,1,0,0,0,721,724,3,94,47,
        0,722,723,5,85,0,0,723,725,3,96,48,0,724,722,1,0,0,0,724,725,1,0,
        0,0,725,730,1,0,0,0,726,728,3,96,48,0,727,726,1,0,0,0,727,728,1,
        0,0,0,728,730,1,0,0,0,729,719,1,0,0,0,729,721,1,0,0,0,729,727,1,
        0,0,0,730,731,1,0,0,0,731,732,5,79,0,0,732,93,1,0,0,0,733,739,3,
        244,122,0,734,735,3,166,83,0,735,736,5,86,0,0,736,738,1,0,0,0,737,
        734,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,
        742,1,0,0,0,741,739,1,0,0,0,742,743,5,43,0,0,743,95,1,0,0,0,744,
        749,3,98,49,0,745,746,5,85,0,0,746,748,3,98,49,0,747,745,1,0,0,0,
        748,751,1,0,0,0,749,747,1,0,0,0,749,750,1,0,0,0,750,754,1,0,0,0,
        751,749,1,0,0,0,752,753,5,85,0,0,753,755,3,100,50,0,754,752,1,0,
        0,0,754,755,1,0,0,0,755,758,1,0,0,0,756,758,3,100,50,0,757,744,1,
        0,0,0,757,756,1,0,0,0,758,97,1,0,0,0,759,761,3,12,6,0,760,759,1,
        0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,765,1,
        0,0,0,764,762,1,0,0,0,765,766,3,244,122,0,766,767,3,78,39,0,767,
        99,1,0,0,0,768,770,3,12,6,0,769,768,1,0,0,0,770,773,1,0,0,0,771,
        769,1,0,0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,771,1,0,0,0,774,
        778,3,244,122,0,775,777,3,116,58,0,776,775,1,0,0,0,777,780,1,0,0,
        0,778,776,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,778,1,0,0,
        0,781,782,5,124,0,0,782,783,3,78,39,0,783,101,1,0,0,0,784,789,3,
        104,52,0,785,786,5,85,0,0,786,788,3,104,52,0,787,785,1,0,0,0,788,
        791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,103,1,0,0,0,791,
        789,1,0,0,0,792,794,3,12,6,0,793,792,1,0,0,0,794,797,1,0,0,0,795,
        793,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,0,797,795,1,0,0,0,798,
        799,5,61,0,0,799,800,3,166,83,0,800,105,1,0,0,0,801,806,3,166,83,
        0,802,803,5,86,0,0,803,805,3,166,83,0,804,802,1,0,0,0,805,808,1,
        0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,107,1,0,0,0,808,806,1,
        0,0,0,809,817,3,110,55,0,810,817,3,112,56,0,811,817,5,74,0,0,812,
        817,5,75,0,0,813,817,5,73,0,0,814,817,5,77,0,0,815,817,5,76,0,0,
        816,809,1,0,0,0,816,810,1,0,0,0,816,811,1,0,0,0,816,812,1,0,0,0,
        816,813,1,0,0,0,816,814,1,0,0,0,816,815,1,0,0,0,817,109,1,0,0,0,
        818,819,7,1,0,0,819,111,1,0,0,0,820,821,7,2,0,0,821,113,1,0,0,0,
        822,823,3,166,83,0,823,824,5,86,0,0,824,826,1,0,0,0,825,822,1,0,
        0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,830,1,0,
        0,0,829,827,1,0,0,0,830,831,5,123,0,0,831,832,3,166,83,0,832,115,
        1,0,0,0,833,834,5,123,0,0,834,837,3,106,53,0,835,837,3,114,57,0,
        836,833,1,0,0,0,836,835,1,0,0,0,837,844,1,0,0,0,838,841,5,78,0,0,
        839,842,3,118,59,0,840,842,3,122,61,0,841,839,1,0,0,0,841,840,1,
        0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,845,5,79,0,0,844,838,1,
        0,0,0,844,845,1,0,0,0,845,117,1,0,0,0,846,851,3,120,60,0,847,848,
        5,85,0,0,848,850,3,120,60,0,849,847,1,0,0,0,850,853,1,0,0,0,851,
        849,1,0,0,0,851,852,1,0,0,0,852,119,1,0,0,0,853,851,1,0,0,0,854,
        855,3,166,83,0,855,856,5,87,0,0,856,857,3,122,61,0,857,121,1,0,0,
        0,858,862,3,202,101,0,859,862,3,116,58,0,860,862,3,124,62,0,861,
        858,1,0,0,0,861,859,1,0,0,0,861,860,1,0,0,0,862,123,1,0,0,0,863,
        872,5,80,0,0,864,869,3,122,61,0,865,866,5,85,0,0,866,868,3,122,61,
        0,867,865,1,0,0,0,868,871,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,
        0,870,873,1,0,0,0,871,869,1,0,0,0,872,864,1,0,0,0,872,873,1,0,0,
        0,873,875,1,0,0,0,874,876,5,85,0,0,875,874,1,0,0,0,875,876,1,0,0,
        0,876,877,1,0,0,0,877,878,5,81,0,0,878,125,1,0,0,0,879,880,5,123,
        0,0,880,881,5,28,0,0,881,882,3,166,83,0,882,883,3,128,64,0,883,127,
        1,0,0,0,884,888,5,80,0,0,885,887,3,130,65,0,886,885,1,0,0,0,887,
        890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,891,1,0,0,0,890,
        888,1,0,0,0,891,892,5,81,0,0,892,129,1,0,0,0,893,895,3,8,4,0,894,
        893,1,0,0,0,895,898,1,0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,
        899,1,0,0,0,898,896,1,0,0,0,899,902,3,132,66,0,900,902,5,84,0,0,
        901,896,1,0,0,0,901,900,1,0,0,0,902,131,1,0,0,0,903,904,3,244,122,
        0,904,905,3,134,67,0,905,906,5,84,0,0,906,928,1,0,0,0,907,909,3,
        14,7,0,908,910,5,84,0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,928,
        1,0,0,0,911,913,3,30,15,0,912,914,5,84,0,0,913,912,1,0,0,0,913,914,
        1,0,0,0,914,928,1,0,0,0,915,917,3,22,11,0,916,918,5,84,0,0,917,916,
        1,0,0,0,917,918,1,0,0,0,918,928,1,0,0,0,919,921,3,126,63,0,920,922,
        5,84,0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,928,1,0,0,0,923,925,
        3,150,75,0,924,926,5,84,0,0,925,924,1,0,0,0,925,926,1,0,0,0,926,
        928,1,0,0,0,927,903,1,0,0,0,927,907,1,0,0,0,927,911,1,0,0,0,927,
        915,1,0,0,0,927,919,1,0,0,0,927,923,1,0,0,0,928,133,1,0,0,0,929,
        932,3,136,68,0,930,932,3,138,69,0,931,929,1,0,0,0,931,930,1,0,0,
        0,932,135,1,0,0,0,933,934,3,166,83,0,934,935,5,78,0,0,935,937,5,
        79,0,0,936,938,3,140,70,0,937,936,1,0,0,0,937,938,1,0,0,0,938,137,
        1,0,0,0,939,940,3,74,37,0,940,139,1,0,0,0,941,942,5,12,0,0,942,943,
        3,122,61,0,943,141,1,0,0,0,944,946,5,52,0,0,945,944,1,0,0,0,945,
        946,1,0,0,0,946,947,1,0,0,0,947,948,5,51,0,0,948,949,3,106,53,0,
        949,950,3,144,72,0,950,143,1,0,0,0,951,955,5,80,0,0,952,954,3,146,
        73,0,953,952,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,955,956,1,0,
        0,0,956,958,1,0,0,0,957,955,1,0,0,0,958,959,5,81,0,0,959,145,1,0,
        0,0,960,964,5,53,0,0,961,963,3,148,74,0,962,961,1,0,0,0,963,966,
        1,0,0,0,964,962,1,0,0,0,964,965,1,0,0,0,965,967,1,0,0,0,966,964,
        1,0,0,0,967,968,3,106,53,0,968,969,5,84,0,0,969,997,1,0,0,0,970,
        971,5,54,0,0,971,974,3,106,53,0,972,973,5,56,0,0,973,975,3,106,53,
        0,974,972,1,0,0,0,974,975,1,0,0,0,975,976,1,0,0,0,976,977,5,84,0,
        0,977,997,1,0,0,0,978,979,5,55,0,0,979,982,3,106,53,0,980,981,5,
        56,0,0,981,983,3,106,53,0,982,980,1,0,0,0,982,983,1,0,0,0,983,984,
        1,0,0,0,984,985,5,84,0,0,985,997,1,0,0,0,986,987,5,57,0,0,987,988,
        3,106,53,0,988,989,5,84,0,0,989,997,1,0,0,0,990,991,5,58,0,0,991,
        992,3,106,53,0,992,993,5,59,0,0,993,994,3,106,53,0,994,995,5,84,
        0,0,995,997,1,0,0,0,996,960,1,0,0,0,996,970,1,0,0,0,996,978,1,0,
        0,0,996,986,1,0,0,0,996,990,1,0,0,0,997,147,1,0,0,0,998,999,7,3,
        0,0,999,149,1,0,0,0,1000,1001,5,63,0,0,1001,1003,3,166,83,0,1002,
        1004,3,16,8,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,
        0,0,1005,1008,3,152,76,0,1006,1007,5,24,0,0,1007,1009,3,242,121,
        0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1010,1,0,0,0,1010,1011,
        3,158,79,0,1011,151,1,0,0,0,1012,1014,5,78,0,0,1013,1015,3,154,77,
        0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,1016,1,0,0,0,1016,1017,
        5,79,0,0,1017,153,1,0,0,0,1018,1023,3,156,78,0,1019,1020,5,85,0,
        0,1020,1022,3,156,78,0,1021,1019,1,0,0,0,1022,1025,1,0,0,0,1023,
        1021,1,0,0,0,1023,1024,1,0,0,0,1024,155,1,0,0,0,1025,1023,1,0,0,
        0,1026,1027,3,244,122,0,1027,1028,3,166,83,0,1028,157,1,0,0,0,1029,
        1034,5,80,0,0,1030,1033,3,36,18,0,1031,1033,3,54,27,0,1032,1030,
        1,0,0,0,1032,1031,1,0,0,0,1033,1036,1,0,0,0,1034,1032,1,0,0,0,1034,
        1035,1,0,0,0,1035,1037,1,0,0,0,1036,1034,1,0,0,0,1037,1038,5,81,
        0,0,1038,159,1,0,0,0,1039,1043,5,80,0,0,1040,1042,3,162,81,0,1041,
        1040,1,0,0,0,1042,1045,1,0,0,0,1043,1041,1,0,0,0,1043,1044,1,0,0,
        0,1044,1046,1,0,0,0,1045,1043,1,0,0,0,1046,1047,5,81,0,0,1047,161,
        1,0,0,0,1048,1049,3,164,82,0,1049,1050,5,84,0,0,1050,1054,1,0,0,
        0,1051,1054,3,170,85,0,1052,1054,3,172,86,0,1053,1048,1,0,0,0,1053,
        1051,1,0,0,0,1053,1052,1,0,0,0,1054,163,1,0,0,0,1055,1057,3,12,6,
        0,1056,1055,1,0,0,0,1057,1060,1,0,0,0,1058,1056,1,0,0,0,1058,1059,
        1,0,0,0,1059,1069,1,0,0,0,1060,1058,1,0,0,0,1061,1062,5,61,0,0,1062,
        1063,3,166,83,0,1063,1064,5,87,0,0,1064,1065,3,202,101,0,1065,1070,
        1,0,0,0,1066,1067,3,244,122,0,1067,1068,3,74,37,0,1068,1070,1,0,
        0,0,1069,1061,1,0,0,0,1069,1066,1,0,0,0,1070,165,1,0,0,0,1071,1072,
        7,4,0,0,1072,167,1,0,0,0,1073,1074,7,5,0,0,1074,169,1,0,0,0,1075,
        1077,3,10,5,0,1076,1075,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,
        0,0,1078,1079,1,0,0,0,1079,1084,1,0,0,0,1080,1078,1,0,0,0,1081,1085,
        3,14,7,0,1082,1085,3,30,15,0,1083,1085,3,150,75,0,1084,1081,1,0,
        0,0,1084,1082,1,0,0,0,1084,1083,1,0,0,0,1085,171,1,0,0,0,1086,1200,
        3,160,80,0,1087,1088,5,2,0,0,1088,1091,3,202,101,0,1089,1090,5,93,
        0,0,1090,1092,3,202,101,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,
        1093,1,0,0,0,1093,1094,5,84,0,0,1094,1200,1,0,0,0,1095,1096,5,22,
        0,0,1096,1097,3,196,98,0,1097,1100,3,172,86,0,1098,1099,5,15,0,0,
        1099,1101,3,172,86,0,1100,1098,1,0,0,0,1100,1101,1,0,0,0,1101,1200,
        1,0,0,0,1102,1103,5,21,0,0,1103,1104,5,78,0,0,1104,1105,3,190,95,
        0,1105,1106,5,79,0,0,1106,1107,3,172,86,0,1107,1200,1,0,0,0,1108,
        1109,5,50,0,0,1109,1110,3,196,98,0,1110,1111,3,172,86,0,1111,1200,
        1,0,0,0,1112,1113,5,13,0,0,1113,1114,3,172,86,0,1114,1115,5,50,0,
        0,1115,1116,3,196,98,0,1116,1117,5,84,0,0,1117,1200,1,0,0,0,1118,
        1119,5,47,0,0,1119,1129,3,160,80,0,1120,1122,3,174,87,0,1121,1120,
        1,0,0,0,1122,1123,1,0,0,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,1124,
        1126,1,0,0,0,1125,1127,3,178,89,0,1126,1125,1,0,0,0,1126,1127,1,
        0,0,0,1127,1130,1,0,0,0,1128,1130,3,178,89,0,1129,1121,1,0,0,0,1129,
        1128,1,0,0,0,1130,1200,1,0,0,0,1131,1132,5,47,0,0,1132,1133,3,180,
        90,0,1133,1137,3,160,80,0,1134,1136,3,174,87,0,1135,1134,1,0,0,0,
        1136,1139,1,0,0,0,1137,1135,1,0,0,0,1137,1138,1,0,0,0,1138,1141,
        1,0,0,0,1139,1137,1,0,0,0,1140,1142,3,178,89,0,1141,1140,1,0,0,0,
        1141,1142,1,0,0,0,1142,1200,1,0,0,0,1143,1144,5,41,0,0,1144,1145,
        3,196,98,0,1145,1149,5,80,0,0,1146,1148,3,186,93,0,1147,1146,1,0,
        0,0,1148,1151,1,0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,1155,
        1,0,0,0,1151,1149,1,0,0,0,1152,1154,3,188,94,0,1153,1152,1,0,0,0,
        1154,1157,1,0,0,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,1158,
        1,0,0,0,1157,1155,1,0,0,0,1158,1159,5,81,0,0,1159,1200,1,0,0,0,1160,
        1161,5,42,0,0,1161,1162,3,196,98,0,1162,1163,3,160,80,0,1163,1200,
        1,0,0,0,1164,1166,5,36,0,0,1165,1167,3,202,101,0,1166,1165,1,0,0,
        0,1166,1167,1,0,0,0,1167,1168,1,0,0,0,1168,1200,5,84,0,0,1169,1170,
        5,44,0,0,1170,1171,3,202,101,0,1171,1172,5,84,0,0,1172,1200,1,0,
        0,0,1173,1175,5,4,0,0,1174,1176,3,166,83,0,1175,1174,1,0,0,0,1175,
        1176,1,0,0,0,1176,1177,1,0,0,0,1177,1200,5,84,0,0,1178,1180,5,11,
        0,0,1179,1181,3,166,83,0,1180,1179,1,0,0,0,1180,1181,1,0,0,0,1181,
        1182,1,0,0,0,1182,1200,5,84,0,0,1183,1184,5,62,0,0,1184,1185,3,202,
        101,0,1185,1186,5,84,0,0,1186,1200,1,0,0,0,1187,1200,5,84,0,0,1188,
        1189,3,202,101,0,1189,1190,5,84,0,0,1190,1200,1,0,0,0,1191,1193,
        3,214,107,0,1192,1194,5,84,0,0,1193,1192,1,0,0,0,1193,1194,1,0,0,
        0,1194,1200,1,0,0,0,1195,1196,3,166,83,0,1196,1197,5,93,0,0,1197,
        1198,3,172,86,0,1198,1200,1,0,0,0,1199,1086,1,0,0,0,1199,1087,1,
        0,0,0,1199,1095,1,0,0,0,1199,1102,1,0,0,0,1199,1108,1,0,0,0,1199,
        1112,1,0,0,0,1199,1118,1,0,0,0,1199,1131,1,0,0,0,1199,1143,1,0,0,
        0,1199,1160,1,0,0,0,1199,1164,1,0,0,0,1199,1169,1,0,0,0,1199,1173,
        1,0,0,0,1199,1178,1,0,0,0,1199,1183,1,0,0,0,1199,1187,1,0,0,0,1199,
        1188,1,0,0,0,1199,1191,1,0,0,0,1199,1195,1,0,0,0,1200,173,1,0,0,
        0,1201,1202,5,7,0,0,1202,1206,5,78,0,0,1203,1205,3,12,6,0,1204,1203,
        1,0,0,0,1205,1208,1,0,0,0,1206,1204,1,0,0,0,1206,1207,1,0,0,0,1207,
        1209,1,0,0,0,1208,1206,1,0,0,0,1209,1210,3,176,88,0,1210,1211,3,
        166,83,0,1211,1212,5,79,0,0,1212,1213,3,160,80,0,1213,175,1,0,0,
        0,1214,1219,3,106,53,0,1215,1216,5,107,0,0,1216,1218,3,106,53,0,
        1217,1215,1,0,0,0,1218,1221,1,0,0,0,1219,1217,1,0,0,0,1219,1220,
        1,0,0,0,1220,177,1,0,0,0,1221,1219,1,0,0,0,1222,1223,5,19,0,0,1223,
        1224,3,160,80,0,1224,179,1,0,0,0,1225,1226,5,78,0,0,1226,1228,3,
        182,91,0,1227,1229,5,84,0,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,
        1229,1230,1,0,0,0,1230,1231,5,79,0,0,1231,181,1,0,0,0,1232,1237,
        3,184,92,0,1233,1234,5,84,0,0,1234,1236,3,184,92,0,1235,1233,1,0,
        0,0,1236,1239,1,0,0,0,1237,1235,1,0,0,0,1237,1238,1,0,0,0,1238,183,
        1,0,0,0,1239,1237,1,0,0,0,1240,1242,3,12,6,0,1241,1240,1,0,0,0,1242,
        1245,1,0,0,0,1243,1241,1,0,0,0,1243,1244,1,0,0,0,1244,1251,1,0,0,
        0,1245,1243,1,0,0,0,1246,1247,3,86,43,0,1247,1248,3,78,39,0,1248,
        1252,1,0,0,0,1249,1250,5,61,0,0,1250,1252,3,166,83,0,1251,1246,1,
        0,0,0,1251,1249,1,0,0,0,1252,1253,1,0,0,0,1253,1254,5,87,0,0,1254,
        1255,3,202,101,0,1255,1258,1,0,0,0,1256,1258,3,106,53,0,1257,1243,
        1,0,0,0,1257,1256,1,0,0,0,1258,185,1,0,0,0,1259,1261,3,188,94,0,
        1260,1259,1,0,0,0,1261,1262,1,0,0,0,1262,1260,1,0,0,0,1262,1263,
        1,0,0,0,1263,1265,1,0,0,0,1264,1266,3,162,81,0,1265,1264,1,0,0,0,
        1266,1267,1,0,0,0,1267,1265,1,0,0,0,1267,1268,1,0,0,0,1268,187,1,
        0,0,0,1269,1275,5,6,0,0,1270,1276,3,202,101,0,1271,1276,5,129,0,
        0,1272,1273,3,244,122,0,1273,1274,3,166,83,0,1274,1276,1,0,0,0,1275,
        1270,1,0,0,0,1275,1271,1,0,0,0,1275,1272,1,0,0,0,1276,1277,1,0,0,
        0,1277,1281,5,93,0,0,1278,1279,5,12,0,0,1279,1281,5,93,0,0,1280,
        1269,1,0,0,0,1280,1278,1,0,0,0,1281,189,1,0,0,0,1282,1295,3,194,
        97,0,1283,1285,3,192,96,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,
        1286,1,0,0,0,1286,1288,5,84,0,0,1287,1289,3,202,101,0,1288,1287,
        1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1292,5,84,0,0,1291,
        1293,3,198,99,0,1292,1291,1,0,0,0,1292,1293,1,0,0,0,1293,1295,1,
        0,0,0,1294,1282,1,0,0,0,1294,1284,1,0,0,0,1295,191,1,0,0,0,1296,
        1299,3,164,82,0,1297,1299,3,198,99,0,1298,1296,1,0,0,0,1298,1297,
        1,0,0,0,1299,193,1,0,0,0,1300,1302,3,12,6,0,1301,1300,1,0,0,0,1302,
        1305,1,0,0,0,1303,1301,1,0,0,0,1303,1304,1,0,0,0,1304,1308,1,0,0,
        0,1305,1303,1,0,0,0,1306,1309,3,244,122,0,1307,1309,5,61,0,0,1308,
        1306,1,0,0,0,1308,1307,1,0,0,0,1309,1310,1,0,0,0,1310,1311,3,78,
        39,0,1311,1312,5,93,0,0,1312,1313,3,202,101,0,1313,195,1,0,0,0,1314,
        1315,5,78,0,0,1315,1316,3,202,101,0,1316,1317,5,79,0,0,1317,197,
        1,0,0,0,1318,1323,3,202,101,0,1319,1320,5,85,0,0,1320,1322,3,202,
        101,0,1321,1319,1,0,0,0,1322,1325,1,0,0,0,1323,1321,1,0,0,0,1323,
        1324,1,0,0,0,1324,199,1,0,0,0,1325,1323,1,0,0,0,1326,1330,3,166,
        83,0,1327,1330,5,43,0,0,1328,1330,5,40,0,0,1329,1326,1,0,0,0,1329,
        1327,1,0,0,0,1329,1328,1,0,0,0,1330,1331,1,0,0,0,1331,1332,3,254,
        127,0,1332,201,1,0,0,0,1333,1334,6,101,-1,0,1334,1377,3,212,106,
        0,1335,1377,3,200,100,0,1336,1337,3,244,122,0,1337,1343,5,122,0,
        0,1338,1340,3,248,124,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,
        1341,1,0,0,0,1341,1344,3,166,83,0,1342,1344,5,31,0,0,1343,1339,1,
        0,0,0,1343,1342,1,0,0,0,1344,1377,1,0,0,0,1345,1346,3,222,111,0,
        1346,1348,5,122,0,0,1347,1349,3,248,124,0,1348,1347,1,0,0,0,1348,
        1349,1,0,0,0,1349,1350,1,0,0,0,1350,1351,5,31,0,0,1351,1377,1,0,
        0,0,1352,1377,3,214,107,0,1353,1354,7,6,0,0,1354,1377,3,202,101,
        17,1355,1359,5,78,0,0,1356,1358,3,116,58,0,1357,1356,1,0,0,0,1358,
        1361,1,0,0,0,1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,
        0,1361,1359,1,0,0,0,1362,1367,3,244,122,0,1363,1364,5,106,0,0,1364,
        1366,3,244,122,0,1365,1363,1,0,0,0,1366,1369,1,0,0,0,1367,1365,1,
        0,0,0,1367,1368,1,0,0,0,1368,1370,1,0,0,0,1369,1367,1,0,0,0,1370,
        1371,5,79,0,0,1371,1372,3,202,101,16,1372,1377,1,0,0,0,1373,1374,
        5,31,0,0,1374,1377,3,224,112,0,1375,1377,3,206,103,0,1376,1333,1,
        0,0,0,1376,1335,1,0,0,0,1376,1336,1,0,0,0,1376,1345,1,0,0,0,1376,
        1352,1,0,0,0,1376,1353,1,0,0,0,1376,1355,1,0,0,0,1376,1373,1,0,0,
        0,1376,1375,1,0,0,0,1377,1461,1,0,0,0,1378,1379,10,14,0,0,1379,1380,
        7,7,0,0,1380,1460,3,202,101,15,1381,1382,10,13,0,0,1382,1383,7,8,
        0,0,1383,1460,3,202,101,14,1384,1392,10,12,0,0,1385,1386,5,89,0,
        0,1386,1393,5,89,0,0,1387,1388,5,88,0,0,1388,1389,5,88,0,0,1389,
        1393,5,88,0,0,1390,1391,5,88,0,0,1391,1393,5,88,0,0,1392,1385,1,
        0,0,0,1392,1387,1,0,0,0,1392,1390,1,0,0,0,1393,1394,1,0,0,0,1394,
        1460,3,202,101,13,1395,1396,10,11,0,0,1396,1397,7,9,0,0,1397,1460,
        3,202,101,12,1398,1399,10,9,0,0,1399,1400,7,10,0,0,1400,1460,3,202,
        101,10,1401,1402,10,8,0,0,1402,1403,5,106,0,0,1403,1460,3,202,101,
        9,1404,1405,10,7,0,0,1405,1406,5,108,0,0,1406,1460,3,202,101,8,1407,
        1408,10,6,0,0,1408,1409,5,107,0,0,1409,1460,3,202,101,7,1410,1411,
        10,5,0,0,1411,1412,5,98,0,0,1412,1460,3,202,101,6,1413,1414,10,4,
        0,0,1414,1415,5,99,0,0,1415,1460,3,202,101,5,1416,1417,10,3,0,0,
        1417,1418,5,92,0,0,1418,1419,3,202,101,0,1419,1420,5,93,0,0,1420,
        1421,3,202,101,3,1421,1460,1,0,0,0,1422,1423,10,2,0,0,1423,1424,
        7,11,0,0,1424,1460,3,202,101,2,1425,1426,10,25,0,0,1426,1427,5,82,
        0,0,1427,1428,3,202,101,0,1428,1429,5,83,0,0,1429,1460,1,0,0,0,1430,
        1431,10,24,0,0,1431,1443,5,86,0,0,1432,1444,3,166,83,0,1433,1444,
        3,200,100,0,1434,1444,5,43,0,0,1435,1437,5,31,0,0,1436,1438,3,240,
        120,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,1,0,0,0,1439,
        1444,3,228,114,0,1440,1441,5,40,0,0,1441,1444,3,250,125,0,1442,1444,
        3,234,117,0,1443,1432,1,0,0,0,1443,1433,1,0,0,0,1443,1434,1,0,0,
        0,1443,1435,1,0,0,0,1443,1440,1,0,0,0,1443,1442,1,0,0,0,1444,1460,
        1,0,0,0,1445,1446,10,22,0,0,1446,1448,5,122,0,0,1447,1449,3,248,
        124,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1450,1,0,0,0,1450,
        1460,3,166,83,0,1451,1452,10,18,0,0,1452,1460,7,12,0,0,1453,1454,
        10,10,0,0,1454,1457,5,26,0,0,1455,1458,3,244,122,0,1456,1458,3,204,
        102,0,1457,1455,1,0,0,0,1457,1456,1,0,0,0,1458,1460,1,0,0,0,1459,
        1378,1,0,0,0,1459,1381,1,0,0,0,1459,1384,1,0,0,0,1459,1395,1,0,0,
        0,1459,1398,1,0,0,0,1459,1401,1,0,0,0,1459,1404,1,0,0,0,1459,1407,
        1,0,0,0,1459,1410,1,0,0,0,1459,1413,1,0,0,0,1459,1416,1,0,0,0,1459,
        1422,1,0,0,0,1459,1425,1,0,0,0,1459,1430,1,0,0,0,1459,1445,1,0,0,
        0,1459,1451,1,0,0,0,1459,1453,1,0,0,0,1460,1463,1,0,0,0,1461,1459,
        1,0,0,0,1461,1462,1,0,0,0,1462,203,1,0,0,0,1463,1461,1,0,0,0,1464,
        1466,3,12,6,0,1465,1464,1,0,0,0,1466,1469,1,0,0,0,1467,1465,1,0,
        0,0,1467,1468,1,0,0,0,1468,1470,1,0,0,0,1469,1467,1,0,0,0,1470,1474,
        3,244,122,0,1471,1473,3,116,58,0,1472,1471,1,0,0,0,1473,1476,1,0,
        0,0,1474,1472,1,0,0,0,1474,1475,1,0,0,0,1475,1477,1,0,0,0,1476,1474,
        1,0,0,0,1477,1478,3,166,83,0,1478,205,1,0,0,0,1479,1480,3,208,104,
        0,1480,1481,5,121,0,0,1481,1482,3,210,105,0,1482,207,1,0,0,0,1483,
        1506,3,166,83,0,1484,1486,5,78,0,0,1485,1487,3,96,48,0,1486,1485,
        1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,1488,1506,5,79,0,0,1489,
        1490,5,78,0,0,1490,1495,3,166,83,0,1491,1492,5,85,0,0,1492,1494,
        3,166,83,0,1493,1491,1,0,0,0,1494,1497,1,0,0,0,1495,1493,1,0,0,0,
        1495,1496,1,0,0,0,1496,1498,1,0,0,0,1497,1495,1,0,0,0,1498,1499,
        5,79,0,0,1499,1506,1,0,0,0,1500,1502,5,78,0,0,1501,1503,3,102,51,
        0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1506,
        5,79,0,0,1505,1483,1,0,0,0,1505,1484,1,0,0,0,1505,1489,1,0,0,0,1505,
        1500,1,0,0,0,1506,209,1,0,0,0,1507,1510,3,202,101,0,1508,1510,3,
        160,80,0,1509,1507,1,0,0,0,1509,1508,1,0,0,0,1510,211,1,0,0,0,1511,
        1512,5,78,0,0,1512,1513,3,202,101,0,1513,1514,5,79,0,0,1514,1530,
        1,0,0,0,1515,1530,5,43,0,0,1516,1530,5,40,0,0,1517,1530,3,108,54,
        0,1518,1530,3,166,83,0,1519,1520,3,46,23,0,1520,1521,5,86,0,0,1521,
        1522,5,9,0,0,1522,1530,1,0,0,0,1523,1527,3,240,120,0,1524,1528,3,
        252,126,0,1525,1526,5,43,0,0,1526,1528,3,254,127,0,1527,1524,1,0,
        0,0,1527,1525,1,0,0,0,1528,1530,1,0,0,0,1529,1511,1,0,0,0,1529,1515,
        1,0,0,0,1529,1516,1,0,0,0,1529,1517,1,0,0,0,1529,1518,1,0,0,0,1529,
        1519,1,0,0,0,1529,1523,1,0,0,0,1530,213,1,0,0,0,1531,1532,5,41,0,
        0,1532,1533,3,196,98,0,1533,1537,5,80,0,0,1534,1536,3,216,108,0,
        1535,1534,1,0,0,0,1536,1539,1,0,0,0,1537,1535,1,0,0,0,1537,1538,
        1,0,0,0,1538,1540,1,0,0,0,1539,1537,1,0,0,0,1540,1541,5,81,0,0,1541,
        215,1,0,0,0,1542,1546,5,6,0,0,1543,1547,3,198,99,0,1544,1547,5,77,
        0,0,1545,1547,3,218,109,0,1546,1543,1,0,0,0,1546,1544,1,0,0,0,1546,
        1545,1,0,0,0,1547,1548,1,0,0,0,1548,1549,7,13,0,0,1549,1554,3,220,
        110,0,1550,1551,5,12,0,0,1551,1552,7,13,0,0,1552,1554,3,220,110,
        0,1553,1542,1,0,0,0,1553,1550,1,0,0,0,1554,217,1,0,0,0,1555,1556,
        6,109,-1,0,1556,1557,5,78,0,0,1557,1558,3,218,109,0,1558,1559,5,
        79,0,0,1559,1582,1,0,0,0,1560,1562,3,12,6,0,1561,1560,1,0,0,0,1562,
        1565,1,0,0,0,1563,1561,1,0,0,0,1563,1564,1,0,0,0,1564,1566,1,0,0,
        0,1565,1563,1,0,0,0,1566,1570,3,244,122,0,1567,1569,3,116,58,0,1568,
        1567,1,0,0,0,1569,1572,1,0,0,0,1570,1568,1,0,0,0,1570,1571,1,0,0,
        0,1571,1573,1,0,0,0,1572,1570,1,0,0,0,1573,1578,3,166,83,0,1574,
        1575,5,98,0,0,1575,1577,3,202,101,0,1576,1574,1,0,0,0,1577,1580,
        1,0,0,0,1578,1576,1,0,0,0,1578,1579,1,0,0,0,1579,1582,1,0,0,0,1580,
        1578,1,0,0,0,1581,1555,1,0,0,0,1581,1563,1,0,0,0,1582,1588,1,0,0,
        0,1583,1584,10,1,0,0,1584,1585,5,98,0,0,1585,1587,3,202,101,0,1586,
        1583,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1588,1589,1,0,0,
        0,1589,219,1,0,0,0,1590,1588,1,0,0,0,1591,1599,3,160,80,0,1592,1594,
        3,162,81,0,1593,1592,1,0,0,0,1594,1597,1,0,0,0,1595,1593,1,0,0,0,
        1595,1596,1,0,0,0,1596,1599,1,0,0,0,1597,1595,1,0,0,0,1598,1591,
        1,0,0,0,1598,1595,1,0,0,0,1599,221,1,0,0,0,1600,1601,3,86,43,0,1601,
        1602,5,86,0,0,1602,1604,1,0,0,0,1603,1600,1,0,0,0,1603,1604,1,0,
        0,0,1604,1608,1,0,0,0,1605,1607,3,116,58,0,1606,1605,1,0,0,0,1607,
        1610,1,0,0,0,1608,1606,1,0,0,0,1608,1609,1,0,0,0,1609,1611,1,0,0,
        0,1610,1608,1,0,0,0,1611,1613,3,166,83,0,1612,1614,3,248,124,0,1613,
        1612,1,0,0,0,1613,1614,1,0,0,0,1614,223,1,0,0,0,1615,1617,3,240,
        120,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,1618,1,0,0,0,1618,
        1619,3,226,113,0,1619,1620,3,232,116,0,1620,1625,1,0,0,0,1621,1622,
        3,226,113,0,1622,1623,3,230,115,0,1623,1625,1,0,0,0,1624,1616,1,
        0,0,0,1624,1621,1,0,0,0,1625,225,1,0,0,0,1626,1628,3,166,83,0,1627,
        1629,3,236,118,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1637,1,
        0,0,0,1630,1631,5,86,0,0,1631,1633,3,166,83,0,1632,1634,3,236,118,
        0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1636,1,0,0,0,1635,1630,
        1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,1638,
        1642,1,0,0,0,1639,1637,1,0,0,0,1640,1642,3,246,123,0,1641,1626,1,
        0,0,0,1641,1640,1,0,0,0,1642,227,1,0,0,0,1643,1645,3,166,83,0,1644,
        1646,3,238,119,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,
        0,0,0,1647,1648,3,232,116,0,1648,229,1,0,0,0,1649,1650,5,82,0,0,
        1650,1652,5,83,0,0,1651,1649,1,0,0,0,1652,1653,1,0,0,0,1653,1651,
        1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,1672,3,84,42,0,
        1656,1657,5,82,0,0,1657,1658,3,202,101,0,1658,1659,5,83,0,0,1659,
        1661,1,0,0,0,1660,1656,1,0,0,0,1661,1662,1,0,0,0,1662,1660,1,0,0,
        0,1662,1663,1,0,0,0,1663,1668,1,0,0,0,1664,1665,5,82,0,0,1665,1667,
        5,83,0,0,1666,1664,1,0,0,0,1667,1670,1,0,0,0,1668,1666,1,0,0,0,1668,
        1669,1,0,0,0,1669,1672,1,0,0,0,1670,1668,1,0,0,0,1671,1651,1,0,0,
        0,1671,1660,1,0,0,0,1672,231,1,0,0,0,1673,1675,3,254,127,0,1674,
        1676,3,32,16,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,233,1,0,
        0,0,1677,1678,3,240,120,0,1678,1679,3,252,126,0,1679,235,1,0,0,0,
        1680,1681,5,89,0,0,1681,1684,5,88,0,0,1682,1684,3,248,124,0,1683,
        1680,1,0,0,0,1683,1682,1,0,0,0,1684,237,1,0,0,0,1685,1686,5,89,0,
        0,1686,1689,5,88,0,0,1687,1689,3,240,120,0,1688,1685,1,0,0,0,1688,
        1687,1,0,0,0,1689,239,1,0,0,0,1690,1691,5,89,0,0,1691,1692,3,242,
        121,0,1692,1693,5,88,0,0,1693,241,1,0,0,0,1694,1699,3,244,122,0,
        1695,1696,5,85,0,0,1696,1698,3,244,122,0,1697,1695,1,0,0,0,1698,
        1701,1,0,0,0,1699,1697,1,0,0,0,1699,1700,1,0,0,0,1700,243,1,0,0,
        0,1701,1699,1,0,0,0,1702,1704,3,116,58,0,1703,1702,1,0,0,0,1704,
        1707,1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,1710,1,0,0,
        0,1707,1705,1,0,0,0,1708,1711,3,86,43,0,1709,1711,3,246,123,0,1710,
        1708,1,0,0,0,1710,1709,1,0,0,0,1711,1722,1,0,0,0,1712,1714,3,116,
        58,0,1713,1712,1,0,0,0,1714,1717,1,0,0,0,1715,1713,1,0,0,0,1715,
        1716,1,0,0,0,1716,1718,1,0,0,0,1717,1715,1,0,0,0,1718,1719,5,82,
        0,0,1719,1721,5,83,0,0,1720,1715,1,0,0,0,1721,1724,1,0,0,0,1722,
        1720,1,0,0,0,1722,1723,1,0,0,0,1723,245,1,0,0,0,1724,1722,1,0,0,
        0,1725,1726,7,14,0,0,1726,247,1,0,0,0,1727,1728,5,89,0,0,1728,1733,
        3,88,44,0,1729,1730,5,85,0,0,1730,1732,3,88,44,0,1731,1729,1,0,0,
        0,1732,1735,1,0,0,0,1733,1731,1,0,0,0,1733,1734,1,0,0,0,1734,1736,
        1,0,0,0,1735,1733,1,0,0,0,1736,1737,5,88,0,0,1737,249,1,0,0,0,1738,
        1748,3,254,127,0,1739,1741,5,86,0,0,1740,1742,3,248,124,0,1741,1740,
        1,0,0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,1745,3,166,83,0,
        1744,1746,3,254,127,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1748,
        1,0,0,0,1747,1738,1,0,0,0,1747,1739,1,0,0,0,1748,251,1,0,0,0,1749,
        1750,5,40,0,0,1750,1755,3,250,125,0,1751,1752,3,166,83,0,1752,1753,
        3,254,127,0,1753,1755,1,0,0,0,1754,1749,1,0,0,0,1754,1751,1,0,0,
        0,1755,253,1,0,0,0,1756,1758,5,78,0,0,1757,1759,3,198,99,0,1758,
        1757,1,0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1761,5,79,
        0,0,1761,255,1,0,0,0,219,257,261,263,268,270,276,281,290,295,302,
        310,317,329,333,338,342,346,350,360,368,376,380,387,394,398,401,
        404,413,419,424,427,433,439,443,447,455,464,471,477,481,493,502,
        507,515,519,531,538,551,556,566,574,584,593,604,609,618,628,633,
        642,648,655,662,670,674,676,682,688,693,699,705,707,714,719,724,
        727,729,739,749,754,757,762,771,778,789,795,806,816,827,836,841,
        844,851,861,869,872,875,888,896,901,909,913,917,921,925,927,931,
        937,945,955,964,974,982,996,1003,1008,1014,1023,1032,1034,1043,1053,
        1058,1069,1078,1084,1091,1100,1123,1126,1129,1137,1141,1149,1155,
        1166,1175,1180,1193,1199,1206,1219,1228,1237,1243,1251,1257,1262,
        1267,1275,1280,1284,1288,1292,1294,1298,1303,1308,1323,1329,1339,
        1343,1348,1359,1367,1376,1392,1437,1443,1448,1457,1459,1461,1467,
        1474,1486,1495,1502,1505,1509,1527,1529,1537,1546,1553,1563,1570,
        1578,1581,1588,1595,1598,1603,1608,1613,1616,1624,1628,1633,1637,
        1641,1645,1653,1662,1668,1671,1675,1683,1688,1699,1705,1710,1715,
        1722,1733,1741,1745,1747,1754,1758
    ]

class JavaParser ( Parser ):

    grammarFileName = "JavaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'assert'", "'boolean'", 
                     "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'extends'", "'final'", 
                     "'finally'", "'float'", "'for'", "'if'", "'goto'", 
                     "'implements'", "'import'", "'instanceof'", "'int'", 
                     "'interface'", "'long'", "'native'", "'new'", "'package'", 
                     "'private'", "'protected'", "'public'", "'return'", 
                     "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'transient'", "'try'", "'void'", "'volatile'", "'while'", 
                     "'module'", "'open'", "'requires'", "'exports'", "'opens'", 
                     "'to'", "'uses'", "'provides'", "'with'", "'transitive'", 
                     "'var'", "'yield'", "'record'", "'sealed'", "'permits'", 
                     "'non-sealed'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'null'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", 
                     "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'>>>='", "'->'", "'::'", 
                     "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", 
                      "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                      "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", 
                      "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", 
                      "OPENS", "TO", "USES", "PROVIDES", "WITH", "TRANSITIVE", 
                      "VAR", "YIELD", "RECORD", "SEALED", "PERMITS", "NON_SEALED", 
                      "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", 
                      "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
                      "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", 
                      "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
                      "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", 
                      "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
                      "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
                      "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "Newline", 
                      "COMMENT", "LINE_COMMENT", "IDENTIFIER" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_typeDeclaration = 3
    RULE_modifier = 4
    RULE_classOrInterfaceModifier = 5
    RULE_variableModifier = 6
    RULE_classDeclaration = 7
    RULE_typeParameters = 8
    RULE_typeParameter = 9
    RULE_typeBound = 10
    RULE_enumDeclaration = 11
    RULE_enumConstants = 12
    RULE_enumConstant = 13
    RULE_enumBodyDeclarations = 14
    RULE_interfaceDeclaration = 15
    RULE_classBody = 16
    RULE_interfaceBody = 17
    RULE_classBodyDeclaration = 18
    RULE_memberDeclaration = 19
    RULE_methodDeclaration = 20
    RULE_method_name = 21
    RULE_methodBody = 22
    RULE_typeTypeOrVoid = 23
    RULE_genericMethodDeclaration = 24
    RULE_genericConstructorDeclaration = 25
    RULE_constructorDeclaration = 26
    RULE_compactConstructorDeclaration = 27
    RULE_fieldDeclaration = 28
    RULE_interfaceBodyDeclaration = 29
    RULE_interfaceMemberDeclaration = 30
    RULE_constDeclaration = 31
    RULE_constantDeclarator = 32
    RULE_interfaceMethodDeclaration = 33
    RULE_interfaceMethodModifier = 34
    RULE_genericInterfaceMethodDeclaration = 35
    RULE_interfaceCommonBodyDeclaration = 36
    RULE_variableDeclarators = 37
    RULE_variableDeclarator = 38
    RULE_variableDeclaratorId = 39
    RULE_paramater_name = 40
    RULE_variableInitializer = 41
    RULE_arrayInitializer = 42
    RULE_classOrInterfaceType = 43
    RULE_typeArgument = 44
    RULE_qualifiedNameList = 45
    RULE_formalParameters = 46
    RULE_receiverParameter = 47
    RULE_formalParameterList = 48
    RULE_formalParameter = 49
    RULE_lastFormalParameter = 50
    RULE_lambdaLVTIList = 51
    RULE_lambdaLVTIParameter = 52
    RULE_qualifiedName = 53
    RULE_literal = 54
    RULE_integerLiteral = 55
    RULE_floatLiteral = 56
    RULE_altAnnotationQualifiedName = 57
    RULE_annotation = 58
    RULE_elementValuePairs = 59
    RULE_elementValuePair = 60
    RULE_elementValue = 61
    RULE_elementValueArrayInitializer = 62
    RULE_annotationTypeDeclaration = 63
    RULE_annotationTypeBody = 64
    RULE_annotationTypeElementDeclaration = 65
    RULE_annotationTypeElementRest = 66
    RULE_annotationMethodOrConstantRest = 67
    RULE_annotationMethodRest = 68
    RULE_annotationConstantRest = 69
    RULE_defaultValue = 70
    RULE_moduleDeclaration = 71
    RULE_moduleBody = 72
    RULE_moduleDirective = 73
    RULE_requiresModifier = 74
    RULE_recordDeclaration = 75
    RULE_recordHeader = 76
    RULE_recordComponentList = 77
    RULE_recordComponent = 78
    RULE_recordBody = 79
    RULE_block = 80
    RULE_blockStatement = 81
    RULE_localVariableDeclaration = 82
    RULE_identifier = 83
    RULE_typeIdentifier = 84
    RULE_localTypeDeclaration = 85
    RULE_statement = 86
    RULE_catchClause = 87
    RULE_catchType = 88
    RULE_finallyBlock = 89
    RULE_resourceSpecification = 90
    RULE_resources = 91
    RULE_resource = 92
    RULE_switchBlockStatementGroup = 93
    RULE_switchLabel = 94
    RULE_forControl = 95
    RULE_forInit = 96
    RULE_enhancedForControl = 97
    RULE_parExpression = 98
    RULE_expressionList = 99
    RULE_methodCall = 100
    RULE_expression = 101
    RULE_pattern = 102
    RULE_lambdaExpression = 103
    RULE_lambdaParameters = 104
    RULE_lambdaBody = 105
    RULE_primary = 106
    RULE_switchExpression = 107
    RULE_switchLabeledRule = 108
    RULE_guardedPattern = 109
    RULE_switchRuleOutcome = 110
    RULE_classType = 111
    RULE_creator = 112
    RULE_createdName = 113
    RULE_innerCreator = 114
    RULE_arrayCreatorRest = 115
    RULE_classCreatorRest = 116
    RULE_explicitGenericInvocation = 117
    RULE_typeArgumentsOrDiamond = 118
    RULE_nonWildcardTypeArgumentsOrDiamond = 119
    RULE_nonWildcardTypeArguments = 120
    RULE_typeList = 121
    RULE_typeType = 122
    RULE_primitiveType = 123
    RULE_typeArguments = 124
    RULE_superSuffix = 125
    RULE_explicitGenericInvocationSuffix = 126
    RULE_arguments = 127

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
                   "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                   "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "method_name", 
                   "methodBody", "typeTypeOrVoid", "genericMethodDeclaration", 
                   "genericConstructorDeclaration", "constructorDeclaration", 
                   "compactConstructorDeclaration", "fieldDeclaration", 
                   "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                   "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                   "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
                   "interfaceCommonBodyDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "paramater_name", 
                   "variableInitializer", "arrayInitializer", "classOrInterfaceType", 
                   "typeArgument", "qualifiedNameList", "formalParameters", 
                   "receiverParameter", "formalParameterList", "formalParameter", 
                   "lastFormalParameter", "lambdaLVTIList", "lambdaLVTIParameter", 
                   "qualifiedName", "literal", "integerLiteral", "floatLiteral", 
                   "altAnnotationQualifiedName", "annotation", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "moduleDeclaration", "moduleBody", "moduleDirective", 
                   "requiresModifier", "recordDeclaration", "recordHeader", 
                   "recordComponentList", "recordComponent", "recordBody", 
                   "block", "blockStatement", "localVariableDeclaration", 
                   "identifier", "typeIdentifier", "localTypeDeclaration", 
                   "statement", "catchClause", "catchType", "finallyBlock", 
                   "resourceSpecification", "resources", "resource", "switchBlockStatementGroup", 
                   "switchLabel", "forControl", "forInit", "enhancedForControl", 
                   "parExpression", "expressionList", "methodCall", "expression", 
                   "pattern", "lambdaExpression", "lambdaParameters", "lambdaBody", 
                   "primary", "switchExpression", "switchLabeledRule", "guardedPattern", 
                   "switchRuleOutcome", "classType", "creator", "createdName", 
                   "innerCreator", "arrayCreatorRest", "classCreatorRest", 
                   "explicitGenericInvocation", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
                   "typeList", "typeType", "primitiveType", "typeArguments", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments" ]

    EOF = Token.EOF
    ABSTRACT=1
    ASSERT=2
    BOOLEAN=3
    BREAK=4
    BYTE=5
    CASE=6
    CATCH=7
    CHAR=8
    CLASS=9
    CONST=10
    CONTINUE=11
    DEFAULT=12
    DO=13
    DOUBLE=14
    ELSE=15
    ENUM=16
    EXTENDS=17
    FINAL=18
    FINALLY=19
    FLOAT=20
    FOR=21
    IF=22
    GOTO=23
    IMPLEMENTS=24
    IMPORT=25
    INSTANCEOF=26
    INT=27
    INTERFACE=28
    LONG=29
    NATIVE=30
    NEW=31
    PACKAGE=32
    PRIVATE=33
    PROTECTED=34
    PUBLIC=35
    RETURN=36
    SHORT=37
    STATIC=38
    STRICTFP=39
    SUPER=40
    SWITCH=41
    SYNCHRONIZED=42
    THIS=43
    THROW=44
    THROWS=45
    TRANSIENT=46
    TRY=47
    VOID=48
    VOLATILE=49
    WHILE=50
    MODULE=51
    OPEN=52
    REQUIRES=53
    EXPORTS=54
    OPENS=55
    TO=56
    USES=57
    PROVIDES=58
    WITH=59
    TRANSITIVE=60
    VAR=61
    YIELD=62
    RECORD=63
    SEALED=64
    PERMITS=65
    NON_SEALED=66
    DECIMAL_LITERAL=67
    HEX_LITERAL=68
    OCT_LITERAL=69
    BINARY_LITERAL=70
    FLOAT_LITERAL=71
    HEX_FLOAT_LITERAL=72
    BOOL_LITERAL=73
    CHAR_LITERAL=74
    STRING_LITERAL=75
    TEXT_BLOCK=76
    NULL_LITERAL=77
    LPAREN=78
    RPAREN=79
    LBRACE=80
    RBRACE=81
    LBRACK=82
    RBRACK=83
    SEMI=84
    COMMA=85
    DOT=86
    ASSIGN=87
    GT=88
    LT=89
    BANG=90
    TILDE=91
    QUESTION=92
    COLON=93
    EQUAL=94
    LE=95
    GE=96
    NOTEQUAL=97
    AND=98
    OR=99
    INC=100
    DEC=101
    ADD=102
    SUB=103
    MUL=104
    DIV=105
    BITAND=106
    BITOR=107
    CARET=108
    MOD=109
    ADD_ASSIGN=110
    SUB_ASSIGN=111
    MUL_ASSIGN=112
    DIV_ASSIGN=113
    AND_ASSIGN=114
    OR_ASSIGN=115
    XOR_ASSIGN=116
    MOD_ASSIGN=117
    LSHIFT_ASSIGN=118
    RSHIFT_ASSIGN=119
    URSHIFT_ASSIGN=120
    ARROW=121
    COLONCOLON=122
    AT=123
    ELLIPSIS=124
    WS=125
    Newline=126
    COMMENT=127
    LINE_COMMENT=128
    IDENTIFIER=129

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationContext,i)


        def moduleDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ModuleDeclarationContext,0)


        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 256
                    self.packageDeclaration()


                self.state = 263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 261
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [25]:
                            self.state = 259
                            self.importDeclaration()
                            pass
                        elif token in [84]:
                            self.state = 260
                            self.match(JavaParser.SEMI)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 265
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2250914781658622) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752304472071) != 0) or _la==129:
                    self.state = 268
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 9, 16, 18, 28, 33, 34, 35, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 123, 129]:
                        self.state = 266
                        self.typeDeclaration()
                        pass
                    elif token in [84]:
                        self.state = 267
                        self.match(JavaParser.SEMI)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.moduleDeclaration()
                self.state = 274
                self.match(JavaParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                self.state = 278
                self.annotation()
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 284
            self.match(JavaParser.PACKAGE)
            self.state = 285
            self.qualifiedName()
            self.state = 286
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(JavaParser.IMPORT)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 289
                self.match(JavaParser.STATIC)


            self.state = 292
            self.qualifiedName()
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 293
                self.match(JavaParser.DOT)
                self.state = 294
                self.match(JavaParser.MUL)


            self.state = 297
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 299
                    self.classOrInterfaceModifier() 
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 305
                self.classDeclaration()
                pass
            elif token in [16]:
                self.state = 306
                self.enumDeclaration()
                pass
            elif token in [28]:
                self.state = 307
                self.interfaceDeclaration()
                pass
            elif token in [123]:
                self.state = 308
                self.annotationTypeDeclaration()
                pass
            elif token in [63]:
                self.state = 309
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modifier)
        try:
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 18, 33, 34, 35, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 312
                self.classOrInterfaceModifier()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.match(JavaParser.NATIVE)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 314
                self.match(JavaParser.SYNCHRONIZED)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 315
                self.match(JavaParser.TRANSIENT)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 5)
                self.state = 316
                self.match(JavaParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def NON_SEALED(self):
            return self.getToken(JavaParser.NON_SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)




    def classOrInterfaceModifier(self):

        localctx = JavaParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self.annotation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.match(JavaParser.PUBLIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 321
                self.match(JavaParser.PROTECTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 322
                self.match(JavaParser.PRIVATE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 323
                self.match(JavaParser.STATIC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 324
                self.match(JavaParser.ABSTRACT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 325
                self.match(JavaParser.FINAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 326
                self.match(JavaParser.STRICTFP)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 327
                self.match(JavaParser.SEALED)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 328
                self.match(JavaParser.NON_SEALED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)




    def variableModifier(self):

        localctx = JavaParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_variableModifier)
        try:
            self.state = 333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.match(JavaParser.FINAL)
                pass
            elif token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 123, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(JavaParser.CLASS)
            self.state = 336
            self.identifier()
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 337
                self.typeParameters()


            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 340
                self.match(JavaParser.EXTENDS)
                self.state = 341
                self.typeType()


            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 344
                self.match(JavaParser.IMPLEMENTS)
                self.state = 345
                self.typeList()


            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 348
                self.match(JavaParser.PERMITS)
                self.state = 349
                self.typeList()


            self.state = 352
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = JavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(JavaParser.LT)
            self.state = 355
            self.typeParameter()
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 356
                self.match(JavaParser.COMMA)
                self.state = 357
                self.typeParameter()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 363
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = JavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 365
                    self.annotation() 
                self.state = 370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

            self.state = 371
            self.identifier()
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 372
                self.match(JavaParser.EXTENDS)
                self.state = 376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 373
                        self.annotation() 
                    self.state = 378
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                self.state = 379
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)




    def typeBound(self):

        localctx = JavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.typeType()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==106:
                self.state = 383
                self.match(JavaParser.BITAND)
                self.state = 384
                self.typeType()
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(JavaParser.EnumConstantsContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = JavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(JavaParser.ENUM)
            self.state = 391
            self.identifier()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 392
                self.match(JavaParser.IMPLEMENTS)
                self.state = 393
                self.typeList()


            self.state = 396
            self.match(JavaParser.LBRACE)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                self.state = 397
                self.enumConstants()


            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 400
                self.match(JavaParser.COMMA)


            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 403
                self.enumBodyDeclarations()


            self.state = 406
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)




    def enumConstants(self):

        localctx = JavaParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.enumConstant()
            self.state = 413
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 409
                    self.match(JavaParser.COMMA)
                    self.state = 410
                    self.enumConstant() 
                self.state = 415
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = JavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 416
                    self.annotation() 
                self.state = 421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

            self.state = 422
            self.identifier()
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 423
                self.arguments()


            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 426
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)




    def enumBodyDeclarations(self):

        localctx = JavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(JavaParser.SEMI)
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1331583875988694) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752338092039) != 0) or _la==129:
                self.state = 430
                self.classBodyDeclaration()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(JavaParser.INTERFACE)
            self.state = 437
            self.identifier()
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 438
                self.typeParameters()


            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 441
                self.match(JavaParser.EXTENDS)
                self.state = 442
                self.typeList()


            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 445
                self.match(JavaParser.PERMITS)
                self.state = 446
                self.typeList()


            self.state = 449
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(JavaParser.LBRACE)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1331583875988694) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752338092039) != 0) or _la==129:
                self.state = 452
                self.classBodyDeclaration()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 458
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(JavaParser.LBRACE)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1331583875984598) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752338026503) != 0) or _la==129:
                self.state = 461
                self.interfaceBodyDeclaration()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 467
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 469
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 470
                    self.match(JavaParser.STATIC)


                self.state = 473
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 474
                        self.modifier() 
                    self.state = 479
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                self.state = 480
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericMethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def genericConstructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)




    def memberDeclaration(self):

        localctx = JavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_memberDeclaration)
        try:
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 485
                self.genericMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 486
                self.fieldDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 487
                self.constructorDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 488
                self.genericConstructorDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 489
                self.interfaceDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 490
                self.annotationTypeDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 491
                self.classDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 492
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def method_name(self):
            return self.getTypedRuleContext(JavaParser.Method_nameContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.typeTypeOrVoid()
            self.state = 496
            self.method_name()
            self.state = 497
            self.formalParameters()
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82:
                self.state = 498
                self.match(JavaParser.LBRACK)
                self.state = 499
                self.match(JavaParser.RBRACK)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 505
                self.match(JavaParser.THROWS)
                self.state = 506
                self.qualifiedNameList()


            self.state = 509
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_method_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_name" ):
                listener.enterMethod_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_name" ):
                listener.exitMethod_name(self)




    def method_name(self):

        localctx = JavaParser.Method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_method_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodBody)
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.block()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeTypeOrVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVoid" ):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVoid" ):
                listener.exitTypeTypeOrVoid(self)




    def typeTypeOrVoid(self):

        localctx = JavaParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_typeTypeOrVoid)
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 20, 27, 29, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.typeType()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)




    def genericMethodDeclaration(self):

        localctx = JavaParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.typeParameters()
            self.state = 522
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericConstructorDeclaration" ):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericConstructorDeclaration" ):
                listener.exitGenericConstructorDeclaration(self)




    def genericConstructorDeclaration(self):

        localctx = JavaParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.typeParameters()
            self.state = 525
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.identifier()
            self.state = 528
            self.formalParameters()
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 529
                self.match(JavaParser.THROWS)
                self.state = 530
                self.qualifiedNameList()


            self.state = 533
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_compactConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactConstructorDeclaration" ):
                listener.enterCompactConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactConstructorDeclaration" ):
                listener.exitCompactConstructorDeclaration(self)




    def compactConstructorDeclaration(self):

        localctx = JavaParser.CompactConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_compactConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 535
                    self.modifier() 
                self.state = 540
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 541
            self.identifier()
            self.state = 542
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.typeType()
            self.state = 545
            self.variableDeclarators()
            self.state = 546
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 12, 14, 16, 18, 20, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 42, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 89, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 548
                        self.modifier() 
                    self.state = 553
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                self.state = 554
                self.interfaceMemberDeclaration()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def constDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext,0)


        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericInterfaceMethodDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)




    def interfaceMemberDeclaration(self):

        localctx = JavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self.constDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 560
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 561
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 562
                self.interfaceDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 563
                self.annotationTypeDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 564
                self.classDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 565
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConstantDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)




    def constDeclaration(self):

        localctx = JavaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.typeType()
            self.state = 569
            self.constantDeclarator()
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 570
                self.match(JavaParser.COMMA)
                self.state = 571
                self.constantDeclarator()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 577
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)




    def constantDeclarator(self):

        localctx = JavaParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.identifier()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82:
                self.state = 580
                self.match(JavaParser.LBRACK)
                self.state = 581
                self.match(JavaParser.RBRACK)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 587
            self.match(JavaParser.ASSIGN)
            self.state = 588
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)




    def interfaceMethodDeclaration(self):

        localctx = JavaParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_interfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 590
                    self.interfaceMethodModifier() 
                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 596
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodModifier" ):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodModifier" ):
                listener.exitInterfaceMethodModifier(self)




    def interfaceMethodModifier(self):

        localctx = JavaParser.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_interfaceMethodModifier)
        try:
            self.state = 604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 599
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 600
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 601
                self.match(JavaParser.DEFAULT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 602
                self.match(JavaParser.STATIC)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 603
                self.match(JavaParser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInterfaceMethodDeclaration" ):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInterfaceMethodDeclaration" ):
                listener.exitGenericInterfaceMethodDeclaration(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = JavaParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_genericInterfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2250940820221950) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752303423491) != 0) or _la==129:
                self.state = 606
                self.interfaceMethodModifier()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 612
            self.typeParameters()
            self.state = 613
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceCommonBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceCommonBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceCommonBodyDeclaration" ):
                listener.enterInterfaceCommonBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceCommonBodyDeclaration" ):
                listener.exitInterfaceCommonBodyDeclaration(self)




    def interfaceCommonBodyDeclaration(self):

        localctx = JavaParser.InterfaceCommonBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_interfaceCommonBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 615
                    self.annotation() 
                self.state = 620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 621
            self.typeTypeOrVoid()
            self.state = 622
            self.identifier()
            self.state = 623
            self.formalParameters()
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82:
                self.state = 624
                self.match(JavaParser.LBRACK)
                self.state = 625
                self.match(JavaParser.RBRACK)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 631
                self.match(JavaParser.THROWS)
                self.state = 632
                self.qualifiedNameList()


            self.state = 635
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)




    def variableDeclarators(self):

        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.variableDeclarator()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 638
                self.match(JavaParser.COMMA)
                self.state = 639
                self.variableDeclarator()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.variableDeclaratorId()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 646
                self.match(JavaParser.ASSIGN)
                self.state = 647
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramater_name(self):
            return self.getTypedRuleContext(JavaParser.Paramater_nameContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.paramater_name()
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82:
                self.state = 651
                self.match(JavaParser.LBRACK)
                self.state = 652
                self.match(JavaParser.RBRACK)
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Paramater_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_paramater_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamater_name" ):
                listener.enterParamater_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamater_name" ):
                listener.exitParamater_name(self)




    def paramater_name(self):

        localctx = JavaParser.Paramater_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_paramater_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_variableInitializer)
        try:
            self.state = 662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self.arrayInitializer()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 41, 43, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89, 90, 91, 100, 101, 102, 103, 123, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 661
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(JavaParser.LBRACE)
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343707135) != 0):
                self.state = 665
                self.variableInitializer()
                self.state = 670
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 666
                        self.match(JavaParser.COMMA)
                        self.state = 667
                        self.variableInitializer() 
                    self.state = 672
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 673
                    self.match(JavaParser.COMMA)




            self.state = 678
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(JavaParser.TypeIdentifierContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_classOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 680
                    self.identifier()
                    self.state = 682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 681
                        self.typeArguments()


                    self.state = 684
                    self.match(JavaParser.DOT) 
                self.state = 690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 691
            self.typeIdentifier()
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 692
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = JavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                    self.state = 696
                    self.annotation()
                    self.state = 701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 702
                self.match(JavaParser.QUESTION)
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17 or _la==40:
                    self.state = 703
                    _la = self._input.LA(1)
                    if not(_la==17 or _la==40):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 704
                    self.typeType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = JavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.qualifiedName()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 710
                self.match(JavaParser.COMMA)
                self.state = 711
                self.qualifiedName()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JavaParser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = JavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(JavaParser.LPAREN)
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141953573) != 0) or _la==123 or _la==129:
                    self.state = 718
                    self.receiverParameter()


                pass

            elif la_ == 2:
                self.state = 721
                self.receiverParameter()
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 722
                    self.match(JavaParser.COMMA)
                    self.state = 723
                    self.formalParameterList()


                pass

            elif la_ == 3:
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141986341) != 0) or _la==123 or _la==129:
                    self.state = 726
                    self.formalParameterList()


                pass


            self.state = 731
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)




    def receiverParameter(self):

        localctx = JavaParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.typeType()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129:
                self.state = 734
                self.identifier()
                self.state = 735
                self.match(JavaParser.DOT)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 742
            self.match(JavaParser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.formalParameter()
                self.state = 749
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 745
                        self.match(JavaParser.COMMA)
                        self.state = 746
                        self.formalParameter() 
                    self.state = 751
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 752
                    self.match(JavaParser.COMMA)
                    self.state = 753
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 759
                    self.variableModifier() 
                self.state = 764
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 765
            self.typeType()
            self.state = 766
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)




    def lastFormalParameter(self):

        localctx = JavaParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 768
                    self.variableModifier() 
                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 774
            self.typeType()
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                self.state = 775
                self.annotation()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 781
            self.match(JavaParser.ELLIPSIS)
            self.state = 782
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.LambdaLVTIParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIList" ):
                listener.enterLambdaLVTIList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIList" ):
                listener.exitLambdaLVTIList(self)




    def lambdaLVTIList(self):

        localctx = JavaParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lambdaLVTIList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.lambdaLVTIParameter()
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 785
                self.match(JavaParser.COMMA)
                self.state = 786
                self.lambdaLVTIParameter()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIParameter" ):
                listener.enterLambdaLVTIParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIParameter" ):
                listener.exitLambdaLVTIParameter(self)




    def lambdaLVTIParameter(self):

        localctx = JavaParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_lambdaLVTIParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 792
                    self.variableModifier() 
                self.state = 797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

            self.state = 798
            self.match(JavaParser.VAR)
            self.state = 799
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = JavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.identifier()
            self.state = 806
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 802
                    self.match(JavaParser.DOT)
                    self.state = 803
                    self.identifier() 
                self.state = 808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(JavaParser.FloatLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JavaParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JavaParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JavaParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaParser.TEXT_BLOCK, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_literal)
        try:
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.integerLiteral()
                pass
            elif token in [71, 72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.floatLiteral()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 3)
                self.state = 811
                self.match(JavaParser.CHAR_LITERAL)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 4)
                self.state = 812
                self.match(JavaParser.STRING_LITERAL)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 5)
                self.state = 813
                self.match(JavaParser.BOOL_LITERAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 6)
                self.state = 814
                self.match(JavaParser.NULL_LITERAL)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 7)
                self.state = 815
                self.match(JavaParser.TEXT_BLOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaParser.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaParser.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaParser.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)




    def integerLiteral(self):

        localctx = JavaParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaParser.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaParser.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)




    def floatLiteral(self):

        localctx = JavaParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            _la = self._input.LA(1)
            if not(_la==71 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltAnnotationQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_altAnnotationQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltAnnotationQualifiedName" ):
                listener.enterAltAnnotationQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltAnnotationQualifiedName" ):
                listener.exitAltAnnotationQualifiedName(self)




    def altAnnotationQualifiedName(self):

        localctx = JavaParser.AltAnnotationQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_altAnnotationQualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129:
                self.state = 822
                self.identifier()
                self.state = 823
                self.match(JavaParser.DOT)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 830
            self.match(JavaParser.AT)
            self.state = 831
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def altAnnotationQualifiedName(self):
            return self.getTypedRuleContext(JavaParser.AltAnnotationQualifiedNameContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 833
                self.match(JavaParser.AT)
                self.state = 834
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.state = 835
                self.altAnnotationQualifiedName()
                pass


            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 838
                self.match(JavaParser.LPAREN)
                self.state = 841
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 839
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 840
                    self.elementValue()


                self.state = 843
                self.match(JavaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)




    def elementValuePairs(self):

        localctx = JavaParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.elementValuePair()
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 847
                self.match(JavaParser.COMMA)
                self.state = 848
                self.elementValuePair()
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = JavaParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.identifier()
            self.state = 855
            self.match(JavaParser.ASSIGN)
            self.state = 856
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = JavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_elementValue)
        try:
            self.state = 861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 859
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 860
                self.elementValueArrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = JavaParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(JavaParser.LBRACE)
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343707135) != 0):
                self.state = 864
                self.elementValue()
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 865
                        self.match(JavaParser.COMMA)
                        self.state = 866
                        self.elementValue() 
                    self.state = 871
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)



            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 874
                self.match(JavaParser.COMMA)


            self.state = 877
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)




    def annotationTypeDeclaration(self):

        localctx = JavaParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(JavaParser.AT)
            self.state = 880
            self.match(JavaParser.INTERFACE)
            self.state = 881
            self.identifier()
            self.state = 882
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)




    def annotationTypeBody(self):

        localctx = JavaParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(JavaParser.LBRACE)
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1613058852699350) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752304472071) != 0) or _la==129:
                self.state = 885
                self.annotationTypeElementDeclaration()
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 891
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 14, 16, 18, 20, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 42, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 893
                        self.modifier() 
                    self.state = 898
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                self.state = 899
                self.annotationTypeElementRest()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodOrConstantRestContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest" ):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest" ):
                listener.exitAnnotationTypeElementRest(self)




    def annotationTypeElementRest(self):

        localctx = JavaParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationTypeElementRest)
        try:
            self.state = 927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 903
                self.typeType()
                self.state = 904
                self.annotationMethodOrConstantRest()
                self.state = 905
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 907
                self.classDeclaration()
                self.state = 909
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 908
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 911
                self.interfaceDeclaration()
                self.state = 913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 912
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 915
                self.enumDeclaration()
                self.state = 917
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 916
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 919
                self.annotationTypeDeclaration()
                self.state = 921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 920
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 923
                self.recordDeclaration()
                self.state = 925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 924
                    self.match(JavaParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest" ):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest" ):
                listener.exitAnnotationMethodOrConstantRest(self)




    def annotationMethodOrConstantRest(self):

        localctx = JavaParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 929
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)




    def annotationMethodRest(self):

        localctx = JavaParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.identifier()
            self.state = 934
            self.match(JavaParser.LPAREN)
            self.state = 935
            self.match(JavaParser.RPAREN)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 936
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)




    def annotationConstantRest(self):

        localctx = JavaParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = JavaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(JavaParser.DEFAULT)
            self.state = 942
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(JavaParser.ModuleBodyContext,0)


        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclaration" ):
                listener.enterModuleDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclaration" ):
                listener.exitModuleDeclaration(self)




    def moduleDeclaration(self):

        localctx = JavaParser.ModuleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_moduleDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 944
                self.match(JavaParser.OPEN)


            self.state = 947
            self.match(JavaParser.MODULE)
            self.state = 948
            self.qualifiedName()
            self.state = 949
            self.moduleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def moduleDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModuleDirectiveContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModuleDirectiveContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)




    def moduleBody(self):

        localctx = JavaParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(JavaParser.LBRACE)
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 495395959010754560) != 0):
                self.state = 952
                self.moduleDirective()
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 958
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def requiresModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RequiresModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.RequiresModifierContext,i)


        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDirective" ):
                listener.enterModuleDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDirective" ):
                listener.exitModuleDirective(self)




    def moduleDirective(self):

        localctx = JavaParser.ModuleDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_moduleDirective)
        self._la = 0 # Token type
        try:
            self.state = 996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.match(JavaParser.REQUIRES)
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 961
                        self.requiresModifier() 
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                self.state = 967
                self.qualifiedName()
                self.state = 968
                self.match(JavaParser.SEMI)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 970
                self.match(JavaParser.EXPORTS)
                self.state = 971
                self.qualifiedName()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 972
                    self.match(JavaParser.TO)
                    self.state = 973
                    self.qualifiedName()


                self.state = 976
                self.match(JavaParser.SEMI)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 978
                self.match(JavaParser.OPENS)
                self.state = 979
                self.qualifiedName()
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 980
                    self.match(JavaParser.TO)
                    self.state = 981
                    self.qualifiedName()


                self.state = 984
                self.match(JavaParser.SEMI)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 986
                self.match(JavaParser.USES)
                self.state = 987
                self.qualifiedName()
                self.state = 988
                self.match(JavaParser.SEMI)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 5)
                self.state = 990
                self.match(JavaParser.PROVIDES)
                self.state = 991
                self.qualifiedName()
                self.state = 992
                self.match(JavaParser.WITH)
                self.state = 993
                self.qualifiedName()
                self.state = 994
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiresModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_requiresModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiresModifier" ):
                listener.enterRequiresModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiresModifier" ):
                listener.exitRequiresModifier(self)




    def requiresModifier(self):

        localctx = JavaParser.RequiresModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_requiresModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            _la = self._input.LA(1)
            if not(_la==38 or _la==60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def recordHeader(self):
            return self.getTypedRuleContext(JavaParser.RecordHeaderContext,0)


        def recordBody(self):
            return self.getTypedRuleContext(JavaParser.RecordBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordDeclaration" ):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordDeclaration" ):
                listener.exitRecordDeclaration(self)




    def recordDeclaration(self):

        localctx = JavaParser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_recordDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(JavaParser.RECORD)
            self.state = 1001
            self.identifier()
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1002
                self.typeParameters()


            self.state = 1005
            self.recordHeader()
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1006
                self.match(JavaParser.IMPLEMENTS)
                self.state = 1007
                self.typeList()


            self.state = 1010
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def recordComponentList(self):
            return self.getTypedRuleContext(JavaParser.RecordComponentListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordHeader" ):
                listener.enterRecordHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordHeader" ):
                listener.exitRecordHeader(self)




    def recordHeader(self):

        localctx = JavaParser.RecordHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_recordHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(JavaParser.LPAREN)
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141953573) != 0) or _la==123 or _la==129:
                self.state = 1013
                self.recordComponentList()


            self.state = 1016
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(JavaParser.RecordComponentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponentList" ):
                listener.enterRecordComponentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponentList" ):
                listener.exitRecordComponentList(self)




    def recordComponentList(self):

        localctx = JavaParser.RecordComponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_recordComponentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.recordComponent()
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 1019
                self.match(JavaParser.COMMA)
                self.state = 1020
                self.recordComponent()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponent" ):
                listener.enterRecordComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponent" ):
                listener.exitRecordComponent(self)




    def recordComponent(self):

        localctx = JavaParser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_recordComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.typeType()
            self.state = 1027
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def compactConstructorDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CompactConstructorDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.CompactConstructorDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_recordBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordBody" ):
                listener.enterRecordBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordBody" ):
                listener.exitRecordBody(self)




    def recordBody(self):

        localctx = JavaParser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_recordBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(JavaParser.LBRACE)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1331583875988694) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752338092039) != 0) or _la==129:
                self.state = 1032
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1030
                    self.classBodyDeclaration()
                    pass

                elif la_ == 2:
                    self.state = 1031
                    self.compactConstructorDeclaration()
                    pass


                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1037
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(JavaParser.LBRACE)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -668508564985026) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576461783331602431) != 0) or _la==129:
                self.state = 1040
                self.blockStatement()
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1046
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def localTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalTypeDeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_blockStatement)
        try:
            self.state = 1053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.localVariableDeclaration()
                self.state = 1049
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.localTypeDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1052
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = JavaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1055
                    self.variableModifier() 
                self.state = 1060
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

            self.state = 1069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1061
                self.match(JavaParser.VAR)
                self.state = 1062
                self.identifier()
                self.state = 1063
                self.match(JavaParser.ASSIGN)
                self.state = 1064
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1066
                self.typeType()
                self.state = 1067
                self.variableDeclarators()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = JavaParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)




    def typeIdentifier(self):

        localctx = JavaParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_typeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 29695) != 0) or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalTypeDeclaration" ):
                listener.enterLocalTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalTypeDeclaration" ):
                listener.exitLocalTypeDeclaration(self)




    def localTypeDeclaration(self):

        localctx = JavaParser.LocalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_localTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1075
                    self.classOrInterfaceModifier() 
                self.state = 1080
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

            self.state = 1084
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 1081
                self.classDeclaration()
                pass
            elif token in [28]:
                self.state = 1082
                self.interfaceDeclaration()
                pass
            elif token in [63]:
                self.state = 1083
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def ASSERT(self):
            return self.getToken(JavaParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(JavaParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.CatchClauseContext,i)


        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaParser.ResourceSpecificationContext,0)


        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1086
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1087
                self.match(JavaParser.ASSERT)
                self.state = 1088
                self.expression(0)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 1089
                    self.match(JavaParser.COLON)
                    self.state = 1090
                    self.expression(0)


                self.state = 1093
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1095
                self.match(JavaParser.IF)
                self.state = 1096
                self.parExpression()
                self.state = 1097
                self.statement()
                self.state = 1100
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 1098
                    self.match(JavaParser.ELSE)
                    self.state = 1099
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1102
                self.match(JavaParser.FOR)
                self.state = 1103
                self.match(JavaParser.LPAREN)
                self.state = 1104
                self.forControl()
                self.state = 1105
                self.match(JavaParser.RPAREN)
                self.state = 1106
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1108
                self.match(JavaParser.WHILE)
                self.state = 1109
                self.parExpression()
                self.state = 1110
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1112
                self.match(JavaParser.DO)
                self.state = 1113
                self.statement()
                self.state = 1114
                self.match(JavaParser.WHILE)
                self.state = 1115
                self.parExpression()
                self.state = 1116
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1118
                self.match(JavaParser.TRY)
                self.state = 1119
                self.block()
                self.state = 1129
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 1121 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1120
                        self.catchClause()
                        self.state = 1123 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==7):
                            break

                    self.state = 1126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==19:
                        self.state = 1125
                        self.finallyBlock()


                    pass
                elif token in [19]:
                    self.state = 1128
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1131
                self.match(JavaParser.TRY)
                self.state = 1132
                self.resourceSpecification()
                self.state = 1133
                self.block()
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 1134
                    self.catchClause()
                    self.state = 1139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 1140
                    self.finallyBlock()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1143
                self.match(JavaParser.SWITCH)
                self.state = 1144
                self.parExpression()
                self.state = 1145
                self.match(JavaParser.LBRACE)
                self.state = 1149
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1146
                        self.switchBlockStatementGroup() 
                    self.state = 1151
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6 or _la==12:
                    self.state = 1152
                    self.switchLabel()
                    self.state = 1157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1158
                self.match(JavaParser.RBRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1160
                self.match(JavaParser.SYNCHRONIZED)
                self.state = 1161
                self.parExpression()
                self.state = 1162
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1164
                self.match(JavaParser.RETURN)
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                    self.state = 1165
                    self.expression(0)


                self.state = 1168
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1169
                self.match(JavaParser.THROW)
                self.state = 1170
                self.expression(0)
                self.state = 1171
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1173
                self.match(JavaParser.BREAK)
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129:
                    self.state = 1174
                    self.identifier()


                self.state = 1177
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1178
                self.match(JavaParser.CONTINUE)
                self.state = 1180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129:
                    self.state = 1179
                    self.identifier()


                self.state = 1182
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1183
                self.match(JavaParser.YIELD)
                self.state = 1184
                self.expression(0)
                self.state = 1185
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1187
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1188
                localctx.statementExpression = self.expression(0)
                self.state = 1189
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1191
                self.switchExpression()
                self.state = 1193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1192
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1195
                localctx.identifierLabel = self.identifier()
                self.state = 1196
                self.match(JavaParser.COLON)
                self.state = 1197
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaParser.CatchTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.match(JavaParser.CATCH)
            self.state = 1202
            self.match(JavaParser.LPAREN)
            self.state = 1206
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1203
                    self.variableModifier() 
                self.state = 1208
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1209
            self.catchType()
            self.state = 1210
            self.identifier()
            self.state = 1211
            self.match(JavaParser.RPAREN)
            self.state = 1212
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITOR)
            else:
                return self.getToken(JavaParser.BITOR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)




    def catchType(self):

        localctx = JavaParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.qualifiedName()
            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==107:
                self.state = 1215
                self.match(JavaParser.BITOR)
                self.state = 1216
                self.qualifiedName()
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = JavaParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(JavaParser.FINALLY)
            self.state = 1223
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParser.ResourcesContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)




    def resourceSpecification(self):

        localctx = JavaParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(JavaParser.LPAREN)
            self.state = 1226
            self.resources()
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 1227
                self.match(JavaParser.SEMI)


            self.state = 1230
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)




    def resources(self):

        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.resource()
            self.state = 1237
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1233
                    self.match(JavaParser.SEMI)
                    self.state = 1234
                    self.resource() 
                self.state = 1239
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_resource)
        try:
            self.state = 1257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1240
                        self.variableModifier() 
                    self.state = 1245
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

                self.state = 1251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1246
                    self.classOrInterfaceType()
                    self.state = 1247
                    self.variableDeclaratorId()
                    pass

                elif la_ == 2:
                    self.state = 1249
                    self.match(JavaParser.VAR)
                    self.state = 1250
                    self.identifier()
                    pass


                self.state = 1253
                self.match(JavaParser.ASSIGN)
                self.state = 1254
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1256
                self.qualifiedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)




    def switchBlockStatementGroup(self):

        localctx = JavaParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1259
                self.switchLabel()
                self.state = 1262 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==6 or _la==12):
                    break

            self.state = 1265 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1264
                self.blockStatement()
                self.state = 1267 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -668508564985026) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576461783331602431) != 0) or _la==129):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.enumConstantName = None # Token
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_switchLabel)
        try:
            self.state = 1280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.match(JavaParser.CASE)
                self.state = 1275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1270
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1271
                    localctx.enumConstantName = self.match(JavaParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 1272
                    self.typeType()
                    self.state = 1273
                    localctx.varName = self.identifier()
                    pass


                self.state = 1277
                self.match(JavaParser.COLON)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.match(JavaParser.DEFAULT)
                self.state = 1279
                self.match(JavaParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # ExpressionListContext

        def enhancedForControl(self):
            return self.getTypedRuleContext(JavaParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)




    def forControl(self):

        localctx = JavaParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1282
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610998821) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                    self.state = 1283
                    self.forInit()


                self.state = 1286
                self.match(JavaParser.SEMI)
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                    self.state = 1287
                    self.expression(0)


                self.state = 1290
                self.match(JavaParser.SEMI)
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                    self.state = 1291
                    localctx.forUpdate = self.expressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_forInit)
        try:
            self.state = 1298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1296
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1297
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)




    def enhancedForControl(self):

        localctx = JavaParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1300
                    self.variableModifier() 
                self.state = 1305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

            self.state = 1308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1306
                self.typeType()
                pass

            elif la_ == 2:
                self.state = 1307
                self.match(JavaParser.VAR)
                pass


            self.state = 1310
            self.variableDeclaratorId()
            self.state = 1311
            self.match(JavaParser.COLON)
            self.state = 1312
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)




    def parExpression(self):

        localctx = JavaParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(JavaParser.LPAREN)
            self.state = 1315
            self.expression(0)
            self.state = 1316
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = JavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.expression(0)
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 1319
                self.match(JavaParser.COMMA)
                self.state = 1320
                self.expression(0)
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)




    def methodCall(self):

        localctx = JavaParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                self.state = 1326
                self.identifier()
                pass
            elif token in [43]:
                self.state = 1327
                self.match(JavaParser.THIS)
                pass
            elif token in [40]:
                self.state = 1328
                self.match(JavaParser.SUPER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1331
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prefix = None # Token
            self.bop = None # Token
            self.postfix = None # Token

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext,0)


        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def INC(self):
            return self.getToken(JavaParser.INC, 0)

        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def TILDE(self):
            return self.getToken(JavaParser.TILDE, 0)

        def BANG(self):
            return self.getToken(JavaParser.BANG, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def creator(self):
            return self.getTypedRuleContext(JavaParser.CreatorContext,0)


        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext,0)


        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def DIV(self):
            return self.getToken(JavaParser.DIV, 0)

        def MOD(self):
            return self.getToken(JavaParser.MOD, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LT)
            else:
                return self.getToken(JavaParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.GT)
            else:
                return self.getToken(JavaParser.GT, i)

        def LE(self):
            return self.getToken(JavaParser.LE, 0)

        def GE(self):
            return self.getToken(JavaParser.GE, 0)

        def EQUAL(self):
            return self.getToken(JavaParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(JavaParser.NOTEQUAL, 0)

        def CARET(self):
            return self.getToken(JavaParser.CARET, 0)

        def BITOR(self):
            return self.getToken(JavaParser.BITOR, 0)

        def AND(self):
            return self.getToken(JavaParser.AND, 0)

        def OR(self):
            return self.getToken(JavaParser.OR, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(JavaParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(JavaParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(JavaParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(JavaParser.DIV_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(JavaParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(JavaParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(JavaParser.XOR_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.URSHIFT_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.LSHIFT_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(JavaParser.MOD_ASSIGN, 0)

        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def innerCreator(self):
            return self.getTypedRuleContext(JavaParser.InnerCreatorContext,0)


        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def INSTANCEOF(self):
            return self.getToken(JavaParser.INSTANCEOF, 0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 202
        self.enterRecursionRule(localctx, 202, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1334
                self.primary()
                pass

            elif la_ == 2:
                self.state = 1335
                self.methodCall()
                pass

            elif la_ == 3:
                self.state = 1336
                self.typeType()
                self.state = 1337
                self.match(JavaParser.COLONCOLON)
                self.state = 1343
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 89, 129]:
                    self.state = 1339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 1338
                        self.typeArguments()


                    self.state = 1341
                    self.identifier()
                    pass
                elif token in [31]:
                    self.state = 1342
                    self.match(JavaParser.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.state = 1345
                self.classType()
                self.state = 1346
                self.match(JavaParser.COLONCOLON)
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1347
                    self.typeArguments()


                self.state = 1350
                self.match(JavaParser.NEW)
                pass

            elif la_ == 5:
                self.state = 1352
                self.switchExpression()
                pass

            elif la_ == 6:
                self.state = 1353
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 15363) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1354
                self.expression(17)
                pass

            elif la_ == 7:
                self.state = 1355
                self.match(JavaParser.LPAREN)
                self.state = 1359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1356
                        self.annotation() 
                    self.state = 1361
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

                self.state = 1362
                self.typeType()
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==106:
                    self.state = 1363
                    self.match(JavaParser.BITAND)
                    self.state = 1364
                    self.typeType()
                    self.state = 1369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1370
                self.match(JavaParser.RPAREN)
                self.state = 1371
                self.expression(16)
                pass

            elif la_ == 8:
                self.state = 1373
                self.match(JavaParser.NEW)
                self.state = 1374
                self.creator()
                pass

            elif la_ == 9:
                self.state = 1375
                self.lambdaExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1461
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1459
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1378
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1379
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 35) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1380
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1381
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1382
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==102 or _la==103):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1383
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1384
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1392
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                        if la_ == 1:
                            self.state = 1385
                            self.match(JavaParser.LT)
                            self.state = 1386
                            self.match(JavaParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1387
                            self.match(JavaParser.GT)
                            self.state = 1388
                            self.match(JavaParser.GT)
                            self.state = 1389
                            self.match(JavaParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1390
                            self.match(JavaParser.GT)
                            self.state = 1391
                            self.match(JavaParser.GT)
                            pass


                        self.state = 1394
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1395
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1396
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 387) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1397
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1398
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1399
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==94 or _la==97):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1400
                        self.expression(10)
                        pass

                    elif la_ == 6:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1401
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1402
                        localctx.bop = self.match(JavaParser.BITAND)
                        self.state = 1403
                        self.expression(9)
                        pass

                    elif la_ == 7:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1404
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1405
                        localctx.bop = self.match(JavaParser.CARET)
                        self.state = 1406
                        self.expression(8)
                        pass

                    elif la_ == 8:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1407
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1408
                        localctx.bop = self.match(JavaParser.BITOR)
                        self.state = 1409
                        self.expression(7)
                        pass

                    elif la_ == 9:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1410
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1411
                        localctx.bop = self.match(JavaParser.AND)
                        self.state = 1412
                        self.expression(6)
                        pass

                    elif la_ == 10:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1413
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1414
                        localctx.bop = self.match(JavaParser.OR)
                        self.state = 1415
                        self.expression(5)
                        pass

                    elif la_ == 11:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1416
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1417
                        localctx.bop = self.match(JavaParser.QUESTION)
                        self.state = 1418
                        self.expression(0)
                        self.state = 1419
                        self.match(JavaParser.COLON)
                        self.state = 1420
                        self.expression(3)
                        pass

                    elif la_ == 12:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1422
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1423
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 17171480577) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1424
                        self.expression(2)
                        pass

                    elif la_ == 13:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1425
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1426
                        self.match(JavaParser.LBRACK)
                        self.state = 1427
                        self.expression(0)
                        self.state = 1428
                        self.match(JavaParser.RBRACK)
                        pass

                    elif la_ == 14:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1430
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1431
                        localctx.bop = self.match(JavaParser.DOT)
                        self.state = 1443
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                        if la_ == 1:
                            self.state = 1432
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1433
                            self.methodCall()
                            pass

                        elif la_ == 3:
                            self.state = 1434
                            self.match(JavaParser.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1435
                            self.match(JavaParser.NEW)
                            self.state = 1437
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==89:
                                self.state = 1436
                                self.nonWildcardTypeArguments()


                            self.state = 1439
                            self.innerCreator()
                            pass

                        elif la_ == 5:
                            self.state = 1440
                            self.match(JavaParser.SUPER)
                            self.state = 1441
                            self.superSuffix()
                            pass

                        elif la_ == 6:
                            self.state = 1442
                            self.explicitGenericInvocation()
                            pass


                        pass

                    elif la_ == 15:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1445
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1446
                        self.match(JavaParser.COLONCOLON)
                        self.state = 1448
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==89:
                            self.state = 1447
                            self.typeArguments()


                        self.state = 1450
                        self.identifier()
                        pass

                    elif la_ == 16:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1451
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1452
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==100 or _la==101):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 17:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1453
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1454
                        localctx.bop = self.match(JavaParser.INSTANCEOF)
                        self.state = 1457
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                        if la_ == 1:
                            self.state = 1455
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 1456
                            self.pattern()
                            pass


                        pass

             
                self.state = 1463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = JavaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1464
                    self.variableModifier() 
                self.state = 1469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

            self.state = 1470
            self.typeType()
            self.state = 1474
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1471
                    self.annotation() 
                self.state = 1476
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

            self.state = 1477
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = JavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.lambdaParameters()
            self.state = 1480
            self.match(JavaParser.ARROW)
            self.state = 1481
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JavaParser.LambdaLVTIListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = JavaParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 1505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1483
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1484
                self.match(JavaParser.LPAREN)
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141986341) != 0) or _la==123 or _la==129:
                    self.state = 1485
                    self.formalParameterList()


                self.state = 1488
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1489
                self.match(JavaParser.LPAREN)
                self.state = 1490
                self.identifier()
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==85:
                    self.state = 1491
                    self.match(JavaParser.COMMA)
                    self.state = 1492
                    self.identifier()
                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1498
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1500
                self.match(JavaParser.LPAREN)
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & 281466386776065) != 0) or _la==123 or _la==129:
                    self.state = 1501
                    self.lambdaLVTIList()


                self.state = 1504
                self.match(JavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = JavaParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_lambdaBody)
        try:
            self.state = 1509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 41, 43, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89, 90, 91, 100, 101, 102, 103, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1507
                self.expression(0)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1508
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_primary)
        try:
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1511
                self.match(JavaParser.LPAREN)
                self.state = 1512
                self.expression(0)
                self.state = 1513
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1515
                self.match(JavaParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1516
                self.match(JavaParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1517
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1518
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1519
                self.typeTypeOrVoid()
                self.state = 1520
                self.match(JavaParser.DOT)
                self.state = 1521
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1523
                self.nonWildcardTypeArguments()
                self.state = 1527
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                    self.state = 1524
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [43]:
                    self.state = 1525
                    self.match(JavaParser.THIS)
                    self.state = 1526
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchLabeledRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabeledRuleContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)




    def switchExpression(self):

        localctx = JavaParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.match(JavaParser.SWITCH)
            self.state = 1532
            self.parExpression()
            self.state = 1533
            self.match(JavaParser.LBRACE)
            self.state = 1537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==12:
                self.state = 1534
                self.switchLabeledRule()
                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1540
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JavaParser.SwitchRuleOutcomeContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabeledRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabeledRule" ):
                listener.enterSwitchLabeledRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabeledRule" ):
                listener.exitSwitchLabeledRule(self)




    def switchLabeledRule(self):

        localctx = JavaParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_switchLabeledRule)
        self._la = 0 # Token type
        try:
            self.state = 1553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1542
                self.match(JavaParser.CASE)
                self.state = 1546
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1543
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 1544
                    self.match(JavaParser.NULL_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 1545
                    self.guardedPattern(0)
                    pass


                self.state = 1548
                _la = self._input.LA(1)
                if not(_la==93 or _la==121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1549
                self.switchRuleOutcome()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1550
                self.match(JavaParser.DEFAULT)
                self.state = 1551
                _la = self._input.LA(1)
                if not(_la==93 or _la==121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1552
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.AND)
            else:
                return self.getToken(JavaParser.AND, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_guardedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuardedPattern" ):
                listener.enterGuardedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuardedPattern" ):
                listener.exitGuardedPattern(self)



    def guardedPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.GuardedPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 218
        self.enterRecursionRule(localctx, 218, self.RULE_guardedPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.state = 1556
                self.match(JavaParser.LPAREN)
                self.state = 1557
                self.guardedPattern(0)
                self.state = 1558
                self.match(JavaParser.RPAREN)
                pass
            elif token in [3, 5, 8, 14, 18, 20, 27, 29, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 123, 129]:
                self.state = 1563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1560
                        self.variableModifier() 
                    self.state = 1565
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

                self.state = 1566
                self.typeType()
                self.state = 1570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1567
                        self.annotation() 
                    self.state = 1572
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

                self.state = 1573
                self.identifier()
                self.state = 1578
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1574
                        self.match(JavaParser.AND)
                        self.state = 1575
                        self.expression(0) 
                    self.state = 1580
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1588
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.GuardedPatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_guardedPattern)
                    self.state = 1583
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1584
                    self.match(JavaParser.AND)
                    self.state = 1585
                    self.expression(0) 
                self.state = 1590
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchRuleOutcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchRuleOutcome" ):
                listener.enterSwitchRuleOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchRuleOutcome" ):
                listener.exitSwitchRuleOutcome(self)




    def switchRuleOutcome(self):

        localctx = JavaParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_switchRuleOutcome)
        self._la = 0 # Token type
        try:
            self.state = 1598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1591
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -668508564985026) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576461783331602431) != 0) or _la==129:
                    self.state = 1592
                    self.blockStatement()
                    self.state = 1597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)




    def classType(self):

        localctx = JavaParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1600
                self.classOrInterfaceType()
                self.state = 1601
                self.match(JavaParser.DOT)


            self.state = 1608
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1605
                    self.annotation() 
                self.state = 1610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

            self.state = 1611
            self.identifier()
            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1612
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdName(self):
            return self.getTypedRuleContext(JavaParser.CreatedNameContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ArrayCreatorRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)




    def creator(self):

        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_creator)
        self._la = 0 # Token type
        try:
            self.state = 1624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1615
                    self.nonWildcardTypeArguments()


                self.state = 1618
                self.createdName()
                self.state = 1619
                self.classCreatorRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1621
                self.createdName()
                self.state = 1622
                self.arrayCreatorRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def typeArgumentsOrDiamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsOrDiamondContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)




    def createdName(self):

        localctx = JavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.state = 1641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1626
                self.identifier()
                self.state = 1628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1627
                    self.typeArgumentsOrDiamond()


                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1630
                    self.match(JavaParser.DOT)
                    self.state = 1631
                    self.identifier()
                    self.state = 1633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 1632
                        self.typeArgumentsOrDiamond()


                    self.state = 1639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1640
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)




    def innerCreator(self):

        localctx = JavaParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.identifier()
            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1644
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1647
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)




    def arrayCreatorRest(self):

        localctx = JavaParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.state = 1671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1651 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1649
                    self.match(JavaParser.LBRACK)
                    self.state = 1650
                    self.match(JavaParser.RBRACK)
                    self.state = 1653 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==82):
                        break

                self.state = 1655
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1660 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1656
                        self.match(JavaParser.LBRACK)
                        self.state = 1657
                        self.expression(0)
                        self.state = 1658
                        self.match(JavaParser.RBRACK)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1662 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

                self.state = 1668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1664
                        self.match(JavaParser.LBRACK)
                        self.state = 1665
                        self.match(JavaParser.RBRACK) 
                    self.state = 1670
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)




    def classCreatorRest(self):

        localctx = JavaParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.arguments()
            self.state = 1675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1674
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)




    def explicitGenericInvocation(self):

        localctx = JavaParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.nonWildcardTypeArguments()
            self.state = 1678
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)




    def typeArgumentsOrDiamond(self):

        localctx = JavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1680
                self.match(JavaParser.LT)
                self.state = 1681
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1682
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArgumentsOrDiamond" ):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArgumentsOrDiamond" ):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = JavaParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1685
                self.match(JavaParser.LT)
                self.state = 1686
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1687
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(JavaParser.LT)
            self.state = 1691
            self.typeList()
            self.state = 1692
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = JavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.typeType()
            self.state = 1699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 1695
                self.match(JavaParser.COMMA)
                self.state = 1696
                self.typeType()
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)




    def typeType(self):

        localctx = JavaParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_typeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1702
                    self.annotation() 
                self.state = 1707
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

            self.state = 1710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                self.state = 1708
                self.classOrInterfaceType()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 37]:
                self.state = 1709
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                        self.state = 1712
                        self.annotation()
                        self.state = 1717
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1718
                    self.match(JavaParser.LBRACK)
                    self.state = 1719
                    self.match(JavaParser.RBRACK) 
                self.state = 1724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParser.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1725
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 138111107368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = JavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(JavaParser.LT)
            self.state = 1728
            self.typeArgument()
            self.state = 1733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 1729
                self.match(JavaParser.COMMA)
                self.state = 1730
                self.typeArgument()
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1736
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_superSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix" ):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix" ):
                listener.exitSuperSuffix(self)




    def superSuffix(self):

        localctx = JavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_superSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1738
                self.arguments()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1739
                self.match(JavaParser.DOT)
                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1740
                    self.typeArguments()


                self.state = 1743
                self.identifier()
                self.state = 1745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1744
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix" ):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix" ):
                listener.exitExplicitGenericInvocationSuffix(self)




    def explicitGenericInvocationSuffix(self):

        localctx = JavaParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1749
                self.match(JavaParser.SUPER)
                self.state = 1750
                self.superSuffix()
                pass
            elif token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1751
                self.identifier()
                self.state = 1752
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.match(JavaParser.LPAREN)
            self.state = 1758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                self.state = 1757
                self.expressionList()


            self.state = 1760
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[101] = self.expression_sempred
        self._predicates[109] = self.guardedPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 10)
         

    def guardedPattern_sempred(self, localctx:GuardedPatternContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         




