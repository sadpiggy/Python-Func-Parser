# Generated from Python3Parser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,102,1437,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,1,0,1,0,1,0,1,0,1,0,3,0,248,8,0,1,1,1,1,5,1,252,8,1,10,1,12,
        1,255,9,1,1,1,1,1,1,2,1,2,5,2,261,8,2,10,2,12,2,264,9,2,1,2,1,2,
        1,3,1,3,1,3,1,3,3,3,272,8,3,1,3,3,3,275,8,3,1,3,1,3,1,4,4,4,280,
        8,4,11,4,12,4,281,1,5,1,5,1,5,1,5,3,5,288,8,5,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,3,7,298,8,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        3,10,309,8,10,1,10,1,10,1,11,1,11,1,11,3,11,316,8,11,1,11,1,11,1,
        11,1,11,3,11,322,8,11,5,11,324,8,11,10,11,12,11,327,9,11,1,11,1,
        11,1,11,3,11,332,8,11,1,11,1,11,1,11,1,11,3,11,338,8,11,5,11,340,
        8,11,10,11,12,11,343,9,11,1,11,1,11,1,11,1,11,3,11,349,8,11,3,11,
        351,8,11,3,11,353,8,11,1,11,1,11,1,11,3,11,358,8,11,3,11,360,8,11,
        3,11,362,8,11,1,11,1,11,3,11,366,8,11,1,11,1,11,1,11,1,11,3,11,372,
        8,11,5,11,374,8,11,10,11,12,11,377,9,11,1,11,1,11,1,11,1,11,3,11,
        383,8,11,3,11,385,8,11,3,11,387,8,11,1,11,1,11,1,11,3,11,392,8,11,
        3,11,394,8,11,1,12,1,12,1,12,3,12,399,8,12,1,13,1,13,1,13,3,13,404,
        8,13,1,13,1,13,1,13,1,13,3,13,410,8,13,5,13,412,8,13,10,13,12,13,
        415,9,13,1,13,1,13,1,13,3,13,420,8,13,1,13,1,13,1,13,1,13,3,13,426,
        8,13,5,13,428,8,13,10,13,12,13,431,9,13,1,13,1,13,1,13,1,13,3,13,
        437,8,13,3,13,439,8,13,3,13,441,8,13,1,13,1,13,1,13,3,13,446,8,13,
        3,13,448,8,13,3,13,450,8,13,1,13,1,13,3,13,454,8,13,1,13,1,13,1,
        13,1,13,3,13,460,8,13,5,13,462,8,13,10,13,12,13,465,9,13,1,13,1,
        13,1,13,1,13,3,13,471,8,13,3,13,473,8,13,3,13,475,8,13,1,13,1,13,
        1,13,3,13,480,8,13,3,13,482,8,13,1,14,1,14,1,15,1,15,3,15,488,8,
        15,1,16,1,16,1,16,5,16,493,8,16,10,16,12,16,496,9,16,1,16,3,16,499,
        8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,511,
        8,17,1,18,1,18,1,18,1,18,1,18,3,18,518,8,18,1,18,1,18,1,18,3,18,
        523,8,18,5,18,525,8,18,10,18,12,18,528,9,18,3,18,530,8,18,1,19,1,
        19,1,19,1,19,3,19,536,8,19,1,20,1,20,3,20,540,8,20,1,20,1,20,1,20,
        3,20,545,8,20,5,20,547,8,20,10,20,12,20,550,9,20,1,20,3,20,553,8,
        20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,
        24,567,8,24,1,25,1,25,1,26,1,26,1,27,1,27,3,27,575,8,27,1,28,1,28,
        1,29,1,29,1,29,1,29,3,29,583,8,29,3,29,585,8,29,1,30,1,30,3,30,589,
        8,30,1,31,1,31,1,31,1,32,1,32,5,32,596,8,32,10,32,12,32,599,9,32,
        1,32,1,32,4,32,603,8,32,11,32,12,32,604,3,32,607,8,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,3,32,616,8,32,1,33,1,33,1,33,3,33,621,8,
        33,1,34,1,34,1,34,3,34,626,8,34,1,35,1,35,1,35,5,35,631,8,35,10,
        35,12,35,634,9,35,1,35,3,35,637,8,35,1,36,1,36,1,36,5,36,642,8,36,
        10,36,12,36,645,9,36,1,37,1,37,1,37,5,37,650,8,37,10,37,12,37,653,
        9,37,1,38,1,38,1,38,1,38,5,38,659,8,38,10,38,12,38,662,9,38,1,39,
        1,39,1,39,1,39,5,39,668,8,39,10,39,12,39,671,9,39,1,40,1,40,1,40,
        1,40,3,40,677,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,3,41,689,8,41,1,42,1,42,1,42,1,42,3,42,695,8,42,1,43,1,43,1,
        43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,706,8,43,10,43,12,43,709,9,
        43,1,43,1,43,1,43,3,43,714,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,
        44,3,44,723,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,
        45,734,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,4,46,743,8,46,11,
        46,12,46,744,1,46,1,46,1,46,3,46,750,8,46,1,46,1,46,1,46,3,46,755,
        8,46,1,46,1,46,1,46,3,46,760,8,46,1,47,1,47,1,47,1,47,5,47,766,8,
        47,10,47,12,47,769,9,47,1,47,1,47,1,47,1,48,1,48,1,48,3,48,777,8,
        48,1,49,1,49,1,49,1,49,3,49,783,8,49,3,49,785,8,49,1,50,1,50,1,50,
        1,50,4,50,791,8,50,11,50,12,50,792,1,50,1,50,3,50,797,8,50,1,51,
        1,51,1,51,1,51,1,51,1,51,4,51,805,8,51,11,51,12,51,806,1,51,1,51,
        1,52,1,52,1,52,3,52,814,8,52,1,52,3,52,817,8,52,1,53,1,53,4,53,821,
        8,53,11,53,12,53,822,1,53,3,53,826,8,53,1,54,1,54,1,54,3,54,831,
        8,54,1,55,1,55,1,55,3,55,836,8,55,1,55,1,55,1,55,1,56,1,56,1,56,
        1,57,1,57,3,57,846,8,57,1,58,1,58,3,58,850,8,58,1,59,1,59,1,59,1,
        59,1,60,1,60,1,60,5,60,859,8,60,10,60,12,60,862,9,60,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,3,61,872,8,61,1,62,1,62,1,62,1,62,1,
        62,1,62,3,62,880,8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,888,8,63,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,898,8,64,1,65,1,65,
        1,65,3,65,903,8,65,1,66,1,66,1,66,3,66,908,8,66,1,67,1,67,1,68,1,
        68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,4,73,925,
        8,73,11,73,12,73,926,1,74,1,74,3,74,931,8,74,1,75,1,75,1,75,1,75,
        1,76,1,76,3,76,939,8,76,1,76,1,76,1,76,3,76,944,8,76,1,76,3,76,947,
        8,76,1,77,1,77,1,77,3,77,952,8,77,1,78,1,78,1,78,5,78,957,8,78,10,
        78,12,78,960,9,78,1,78,3,78,963,8,78,1,79,1,79,3,79,967,8,79,1,80,
        1,80,1,80,1,80,3,80,973,8,80,1,81,1,81,1,81,1,81,1,81,3,81,980,8,
        81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,989,8,81,1,81,1,81,1,
        81,1,81,1,81,3,81,996,8,81,1,81,1,81,3,81,1000,8,81,1,82,1,82,1,
        82,5,82,1005,8,82,10,82,12,82,1008,9,82,1,83,1,83,3,83,1012,8,83,
        1,83,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,3,85,1028,8,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1036,8,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1046,8,85,1,85,1,85,
        3,85,1050,8,85,1,86,1,86,1,86,5,86,1055,8,86,10,86,12,86,1058,9,
        86,1,87,1,87,1,87,5,87,1063,8,87,10,87,12,87,1066,9,87,1,88,1,88,
        1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1078,8,89,1,89,3,89,
        1081,8,89,1,90,1,90,3,90,1085,8,90,1,91,1,91,3,91,1089,8,91,1,91,
        1,91,1,91,1,92,1,92,3,92,1096,8,92,1,92,1,92,1,92,1,93,1,93,1,93,
        5,93,1104,8,93,10,93,12,93,1107,9,93,1,94,1,94,1,94,5,94,1112,8,
        94,10,94,12,94,1115,9,94,1,95,1,95,1,95,3,95,1120,8,95,1,96,1,96,
        1,96,1,96,5,96,1126,8,96,10,96,12,96,1129,9,96,1,97,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1144,8,97,1,
        98,1,98,1,98,1,99,1,99,1,99,4,99,1152,8,99,11,99,12,99,1153,1,99,
        3,99,1157,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,5,99,1180,
        8,99,10,99,12,99,1183,9,99,1,100,3,100,1186,8,100,1,100,1,100,5,
        100,1190,8,100,10,100,12,100,1193,9,100,1,101,1,101,1,101,3,101,
        1198,8,101,1,101,1,101,1,101,3,101,1203,8,101,1,101,1,101,1,101,
        3,101,1208,8,101,1,101,1,101,1,101,1,101,4,101,1214,8,101,11,101,
        12,101,1215,1,101,1,101,1,101,1,101,3,101,1222,8,101,1,102,1,102,
        1,103,1,103,3,103,1228,8,103,1,103,1,103,1,103,1,103,3,103,1234,
        8,103,5,103,1236,8,103,10,103,12,103,1239,9,103,1,103,3,103,1242,
        8,103,3,103,1244,8,103,1,104,1,104,3,104,1248,8,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,3,104,1257,8,104,1,105,1,105,1,105,
        5,105,1262,8,105,10,105,12,105,1265,9,105,1,105,3,105,1268,8,105,
        1,106,1,106,3,106,1272,8,106,1,106,1,106,3,106,1276,8,106,1,106,
        3,106,1279,8,106,3,106,1281,8,106,1,107,1,107,3,107,1285,8,107,1,
        108,1,108,3,108,1289,8,108,1,108,1,108,1,108,3,108,1294,8,108,5,
        108,1296,8,108,10,108,12,108,1299,9,108,1,108,3,108,1302,8,108,1,
        109,1,109,1,109,5,109,1307,8,109,10,109,12,109,1310,9,109,1,109,
        3,109,1313,8,109,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1321,
        8,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1331,
        8,110,5,110,1333,8,110,10,110,12,110,1336,9,110,1,110,3,110,1339,
        8,110,3,110,1341,8,110,1,110,1,110,3,110,1345,8,110,1,110,1,110,
        1,110,1,110,3,110,1351,8,110,5,110,1353,8,110,10,110,12,110,1356,
        9,110,1,110,3,110,1359,8,110,3,110,1361,8,110,3,110,1363,8,110,1,
        111,1,111,1,111,1,111,3,111,1369,8,111,1,111,3,111,1372,8,111,1,
        111,1,111,1,111,1,112,1,112,1,112,5,112,1380,8,112,10,112,12,112,
        1383,9,112,1,112,3,112,1386,8,112,1,113,1,113,3,113,1390,8,113,1,
        113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1400,8,113,1,
        114,1,114,3,114,1404,8,114,1,115,3,115,1407,8,115,1,115,1,115,1,
        115,1,115,1,115,3,115,1414,8,115,1,116,1,116,1,116,3,116,1419,8,
        116,1,117,1,117,1,118,1,118,3,118,1425,8,118,1,119,1,119,1,119,3,
        119,1430,8,119,1,120,4,120,1433,8,120,11,120,12,120,1434,1,120,0,
        1,198,121,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
        40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
        84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,0,7,1,0,88,100,
        1,0,54,55,2,0,71,72,76,76,3,0,56,56,73,75,86,86,1,0,71,72,1,0,69,
        70,3,0,30,30,40,40,45,45,1586,0,247,1,0,0,0,2,253,1,0,0,0,4,258,
        1,0,0,0,6,267,1,0,0,0,8,279,1,0,0,0,10,283,1,0,0,0,12,289,1,0,0,
        0,14,292,1,0,0,0,16,302,1,0,0,0,18,304,1,0,0,0,20,306,1,0,0,0,22,
        393,1,0,0,0,24,395,1,0,0,0,26,481,1,0,0,0,28,483,1,0,0,0,30,487,
        1,0,0,0,32,489,1,0,0,0,34,510,1,0,0,0,36,512,1,0,0,0,38,531,1,0,
        0,0,40,539,1,0,0,0,42,554,1,0,0,0,44,556,1,0,0,0,46,559,1,0,0,0,
        48,566,1,0,0,0,50,568,1,0,0,0,52,570,1,0,0,0,54,572,1,0,0,0,56,576,
        1,0,0,0,58,578,1,0,0,0,60,588,1,0,0,0,62,590,1,0,0,0,64,593,1,0,
        0,0,66,617,1,0,0,0,68,622,1,0,0,0,70,627,1,0,0,0,72,638,1,0,0,0,
        74,646,1,0,0,0,76,654,1,0,0,0,78,663,1,0,0,0,80,672,1,0,0,0,82,688,
        1,0,0,0,84,690,1,0,0,0,86,696,1,0,0,0,88,715,1,0,0,0,90,724,1,0,
        0,0,92,735,1,0,0,0,94,761,1,0,0,0,96,773,1,0,0,0,98,778,1,0,0,0,
        100,796,1,0,0,0,102,798,1,0,0,0,104,816,1,0,0,0,106,818,1,0,0,0,
        108,830,1,0,0,0,110,832,1,0,0,0,112,840,1,0,0,0,114,845,1,0,0,0,
        116,849,1,0,0,0,118,851,1,0,0,0,120,855,1,0,0,0,122,871,1,0,0,0,
        124,879,1,0,0,0,126,887,1,0,0,0,128,897,1,0,0,0,130,902,1,0,0,0,
        132,907,1,0,0,0,134,909,1,0,0,0,136,911,1,0,0,0,138,913,1,0,0,0,
        140,915,1,0,0,0,142,917,1,0,0,0,144,919,1,0,0,0,146,921,1,0,0,0,
        148,930,1,0,0,0,150,932,1,0,0,0,152,946,1,0,0,0,154,948,1,0,0,0,
        156,953,1,0,0,0,158,966,1,0,0,0,160,972,1,0,0,0,162,999,1,0,0,0,
        164,1001,1,0,0,0,166,1011,1,0,0,0,168,1016,1,0,0,0,170,1049,1,0,
        0,0,172,1051,1,0,0,0,174,1059,1,0,0,0,176,1067,1,0,0,0,178,1080,
        1,0,0,0,180,1084,1,0,0,0,182,1086,1,0,0,0,184,1093,1,0,0,0,186,1100,
        1,0,0,0,188,1108,1,0,0,0,190,1119,1,0,0,0,192,1121,1,0,0,0,194,1143,
        1,0,0,0,196,1145,1,0,0,0,198,1156,1,0,0,0,200,1185,1,0,0,0,202,1221,
        1,0,0,0,204,1223,1,0,0,0,206,1227,1,0,0,0,208,1256,1,0,0,0,210,1258,
        1,0,0,0,212,1280,1,0,0,0,214,1282,1,0,0,0,216,1288,1,0,0,0,218,1303,
        1,0,0,0,220,1362,1,0,0,0,222,1364,1,0,0,0,224,1376,1,0,0,0,226,1399,
        1,0,0,0,228,1403,1,0,0,0,230,1406,1,0,0,0,232,1415,1,0,0,0,234,1420,
        1,0,0,0,236,1422,1,0,0,0,238,1429,1,0,0,0,240,1432,1,0,0,0,242,248,
        5,44,0,0,243,248,3,32,16,0,244,245,3,82,41,0,245,246,5,44,0,0,246,
        248,1,0,0,0,247,242,1,0,0,0,247,243,1,0,0,0,247,244,1,0,0,0,248,
        1,1,0,0,0,249,252,5,44,0,0,250,252,3,30,15,0,251,249,1,0,0,0,251,
        250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,
        256,1,0,0,0,255,253,1,0,0,0,256,257,5,0,0,1,257,3,1,0,0,0,258,262,
        3,218,109,0,259,261,5,44,0,0,260,259,1,0,0,0,261,264,1,0,0,0,262,
        260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,
        266,5,0,0,1,266,5,1,0,0,0,267,268,5,86,0,0,268,274,3,74,37,0,269,
        271,5,57,0,0,270,272,3,224,112,0,271,270,1,0,0,0,271,272,1,0,0,0,
        272,273,1,0,0,0,273,275,5,58,0,0,274,269,1,0,0,0,274,275,1,0,0,0,
        275,276,1,0,0,0,276,277,5,44,0,0,277,7,1,0,0,0,278,280,3,6,3,0,279,
        278,1,0,0,0,280,281,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,
        9,1,0,0,0,283,287,3,8,4,0,284,288,3,222,111,0,285,288,3,14,7,0,286,
        288,3,12,6,0,287,284,1,0,0,0,287,285,1,0,0,0,287,286,1,0,0,0,288,
        11,1,0,0,0,289,290,5,9,0,0,290,291,3,14,7,0,291,13,1,0,0,0,292,293,
        5,15,0,0,293,294,3,18,9,0,294,297,3,20,10,0,295,296,5,87,0,0,296,
        298,3,178,89,0,297,295,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,
        300,5,60,0,0,300,301,3,16,8,0,301,15,1,0,0,0,302,303,3,100,50,0,
        303,17,1,0,0,0,304,305,3,204,102,0,305,19,1,0,0,0,306,308,5,57,0,
        0,307,309,3,22,11,0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,
        0,0,310,311,5,58,0,0,311,21,1,0,0,0,312,315,3,24,12,0,313,314,5,
        63,0,0,314,316,3,178,89,0,315,313,1,0,0,0,315,316,1,0,0,0,316,325,
        1,0,0,0,317,318,5,59,0,0,318,321,3,24,12,0,319,320,5,63,0,0,320,
        322,3,178,89,0,321,319,1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,
        317,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,
        361,1,0,0,0,327,325,1,0,0,0,328,359,5,59,0,0,329,331,5,56,0,0,330,
        332,3,24,12,0,331,330,1,0,0,0,331,332,1,0,0,0,332,341,1,0,0,0,333,
        334,5,59,0,0,334,337,3,24,12,0,335,336,5,63,0,0,336,338,3,178,89,
        0,337,335,1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,333,1,0,0,
        0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,352,1,0,0,
        0,343,341,1,0,0,0,344,350,5,59,0,0,345,346,5,62,0,0,346,348,3,24,
        12,0,347,349,5,59,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,351,1,
        0,0,0,350,345,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,344,1,
        0,0,0,352,353,1,0,0,0,353,360,1,0,0,0,354,355,5,62,0,0,355,357,3,
        24,12,0,356,358,5,59,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,360,
        1,0,0,0,359,329,1,0,0,0,359,354,1,0,0,0,359,360,1,0,0,0,360,362,
        1,0,0,0,361,328,1,0,0,0,361,362,1,0,0,0,362,394,1,0,0,0,363,365,
        5,56,0,0,364,366,3,24,12,0,365,364,1,0,0,0,365,366,1,0,0,0,366,375,
        1,0,0,0,367,368,5,59,0,0,368,371,3,24,12,0,369,370,5,63,0,0,370,
        372,3,178,89,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,
        367,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,
        386,1,0,0,0,377,375,1,0,0,0,378,384,5,59,0,0,379,380,5,62,0,0,380,
        382,3,24,12,0,381,383,5,59,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,
        385,1,0,0,0,384,379,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,
        378,1,0,0,0,386,387,1,0,0,0,387,394,1,0,0,0,388,389,5,62,0,0,389,
        391,3,24,12,0,390,392,5,59,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,
        394,1,0,0,0,393,312,1,0,0,0,393,363,1,0,0,0,393,388,1,0,0,0,394,
        23,1,0,0,0,395,398,3,204,102,0,396,397,5,60,0,0,397,399,3,178,89,
        0,398,396,1,0,0,0,398,399,1,0,0,0,399,25,1,0,0,0,400,403,3,28,14,
        0,401,402,5,63,0,0,402,404,3,178,89,0,403,401,1,0,0,0,403,404,1,
        0,0,0,404,413,1,0,0,0,405,406,5,59,0,0,406,409,3,28,14,0,407,408,
        5,63,0,0,408,410,3,178,89,0,409,407,1,0,0,0,409,410,1,0,0,0,410,
        412,1,0,0,0,411,405,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,
        414,1,0,0,0,414,449,1,0,0,0,415,413,1,0,0,0,416,447,5,59,0,0,417,
        419,5,56,0,0,418,420,3,28,14,0,419,418,1,0,0,0,419,420,1,0,0,0,420,
        429,1,0,0,0,421,422,5,59,0,0,422,425,3,28,14,0,423,424,5,63,0,0,
        424,426,3,178,89,0,425,423,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,
        0,427,421,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,
        0,430,440,1,0,0,0,431,429,1,0,0,0,432,438,5,59,0,0,433,434,5,62,
        0,0,434,436,3,28,14,0,435,437,5,59,0,0,436,435,1,0,0,0,436,437,1,
        0,0,0,437,439,1,0,0,0,438,433,1,0,0,0,438,439,1,0,0,0,439,441,1,
        0,0,0,440,432,1,0,0,0,440,441,1,0,0,0,441,448,1,0,0,0,442,443,5,
        62,0,0,443,445,3,28,14,0,444,446,5,59,0,0,445,444,1,0,0,0,445,446,
        1,0,0,0,446,448,1,0,0,0,447,417,1,0,0,0,447,442,1,0,0,0,447,448,
        1,0,0,0,448,450,1,0,0,0,449,416,1,0,0,0,449,450,1,0,0,0,450,482,
        1,0,0,0,451,453,5,56,0,0,452,454,3,28,14,0,453,452,1,0,0,0,453,454,
        1,0,0,0,454,463,1,0,0,0,455,456,5,59,0,0,456,459,3,28,14,0,457,458,
        5,63,0,0,458,460,3,178,89,0,459,457,1,0,0,0,459,460,1,0,0,0,460,
        462,1,0,0,0,461,455,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,
        464,1,0,0,0,464,474,1,0,0,0,465,463,1,0,0,0,466,472,5,59,0,0,467,
        468,5,62,0,0,468,470,3,28,14,0,469,471,5,59,0,0,470,469,1,0,0,0,
        470,471,1,0,0,0,471,473,1,0,0,0,472,467,1,0,0,0,472,473,1,0,0,0,
        473,475,1,0,0,0,474,466,1,0,0,0,474,475,1,0,0,0,475,482,1,0,0,0,
        476,477,5,62,0,0,477,479,3,28,14,0,478,480,5,59,0,0,479,478,1,0,
        0,0,479,480,1,0,0,0,480,482,1,0,0,0,481,400,1,0,0,0,481,451,1,0,
        0,0,481,476,1,0,0,0,482,27,1,0,0,0,483,484,3,204,102,0,484,29,1,
        0,0,0,485,488,3,32,16,0,486,488,3,82,41,0,487,485,1,0,0,0,487,486,
        1,0,0,0,488,31,1,0,0,0,489,494,3,34,17,0,490,491,5,61,0,0,491,493,
        3,34,17,0,492,490,1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,494,495,
        1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,497,499,5,61,0,0,498,497,
        1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,501,5,44,0,0,501,33,
        1,0,0,0,502,511,3,36,18,0,503,511,3,44,22,0,504,511,3,46,23,0,505,
        511,3,48,24,0,506,511,3,60,30,0,507,511,3,76,38,0,508,511,3,78,39,
        0,509,511,3,80,40,0,510,502,1,0,0,0,510,503,1,0,0,0,510,504,1,0,
        0,0,510,505,1,0,0,0,510,506,1,0,0,0,510,507,1,0,0,0,510,508,1,0,
        0,0,510,509,1,0,0,0,511,35,1,0,0,0,512,529,3,40,20,0,513,530,3,38,
        19,0,514,517,3,42,21,0,515,518,3,236,118,0,516,518,3,218,109,0,517,
        515,1,0,0,0,517,516,1,0,0,0,518,530,1,0,0,0,519,522,5,63,0,0,520,
        523,3,236,118,0,521,523,3,40,20,0,522,520,1,0,0,0,522,521,1,0,0,
        0,523,525,1,0,0,0,524,519,1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,
        0,526,527,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,529,513,1,0,0,
        0,529,514,1,0,0,0,529,526,1,0,0,0,530,37,1,0,0,0,531,532,5,60,0,
        0,532,535,3,178,89,0,533,534,5,63,0,0,534,536,3,178,89,0,535,533,
        1,0,0,0,535,536,1,0,0,0,536,39,1,0,0,0,537,540,3,178,89,0,538,540,
        3,196,98,0,539,537,1,0,0,0,539,538,1,0,0,0,540,548,1,0,0,0,541,544,
        5,59,0,0,542,545,3,178,89,0,543,545,3,196,98,0,544,542,1,0,0,0,544,
        543,1,0,0,0,545,547,1,0,0,0,546,541,1,0,0,0,547,550,1,0,0,0,548,
        546,1,0,0,0,548,549,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,551,
        553,5,59,0,0,552,551,1,0,0,0,552,553,1,0,0,0,553,41,1,0,0,0,554,
        555,7,0,0,0,555,43,1,0,0,0,556,557,5,16,0,0,557,558,3,216,108,0,
        558,45,1,0,0,0,559,560,5,35,0,0,560,47,1,0,0,0,561,567,3,50,25,0,
        562,567,3,52,26,0,563,567,3,54,27,0,564,567,3,58,29,0,565,567,3,
        56,28,0,566,561,1,0,0,0,566,562,1,0,0,0,566,563,1,0,0,0,566,564,
        1,0,0,0,566,565,1,0,0,0,567,49,1,0,0,0,568,569,5,11,0,0,569,51,1,
        0,0,0,570,571,5,14,0,0,571,53,1,0,0,0,572,574,5,37,0,0,573,575,3,
        218,109,0,574,573,1,0,0,0,574,575,1,0,0,0,575,55,1,0,0,0,576,577,
        3,236,118,0,577,57,1,0,0,0,578,584,5,36,0,0,579,582,3,178,89,0,580,
        581,5,23,0,0,581,583,3,178,89,0,582,580,1,0,0,0,582,583,1,0,0,0,
        583,585,1,0,0,0,584,579,1,0,0,0,584,585,1,0,0,0,585,59,1,0,0,0,586,
        589,3,62,31,0,587,589,3,64,32,0,588,586,1,0,0,0,588,587,1,0,0,0,
        589,61,1,0,0,0,590,591,5,26,0,0,591,592,3,72,36,0,592,63,1,0,0,0,
        593,606,5,23,0,0,594,596,7,1,0,0,595,594,1,0,0,0,596,599,1,0,0,0,
        597,595,1,0,0,0,597,598,1,0,0,0,598,600,1,0,0,0,599,597,1,0,0,0,
        600,607,3,74,37,0,601,603,7,1,0,0,602,601,1,0,0,0,603,604,1,0,0,
        0,604,602,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,597,1,0,0,
        0,606,602,1,0,0,0,607,608,1,0,0,0,608,615,5,26,0,0,609,616,5,56,
        0,0,610,611,5,57,0,0,611,612,3,70,35,0,612,613,5,58,0,0,613,616,
        1,0,0,0,614,616,3,70,35,0,615,609,1,0,0,0,615,610,1,0,0,0,615,614,
        1,0,0,0,616,65,1,0,0,0,617,620,3,204,102,0,618,619,5,7,0,0,619,621,
        3,204,102,0,620,618,1,0,0,0,620,621,1,0,0,0,621,67,1,0,0,0,622,625,
        3,74,37,0,623,624,5,7,0,0,624,626,3,204,102,0,625,623,1,0,0,0,625,
        626,1,0,0,0,626,69,1,0,0,0,627,632,3,66,33,0,628,629,5,59,0,0,629,
        631,3,66,33,0,630,628,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,
        633,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,635,637,5,59,0,0,636,
        635,1,0,0,0,636,637,1,0,0,0,637,71,1,0,0,0,638,643,3,68,34,0,639,
        640,5,59,0,0,640,642,3,68,34,0,641,639,1,0,0,0,642,645,1,0,0,0,643,
        641,1,0,0,0,643,644,1,0,0,0,644,73,1,0,0,0,645,643,1,0,0,0,646,651,
        3,204,102,0,647,648,5,54,0,0,648,650,3,204,102,0,649,647,1,0,0,0,
        650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,75,1,0,0,0,653,
        651,1,0,0,0,654,655,5,24,0,0,655,660,3,204,102,0,656,657,5,59,0,
        0,657,659,3,204,102,0,658,656,1,0,0,0,659,662,1,0,0,0,660,658,1,
        0,0,0,660,661,1,0,0,0,661,77,1,0,0,0,662,660,1,0,0,0,663,664,5,32,
        0,0,664,669,3,204,102,0,665,666,5,59,0,0,666,668,3,204,102,0,667,
        665,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,
        79,1,0,0,0,671,669,1,0,0,0,672,673,5,8,0,0,673,676,3,178,89,0,674,
        675,5,59,0,0,675,677,3,178,89,0,676,674,1,0,0,0,676,677,1,0,0,0,
        677,81,1,0,0,0,678,689,3,86,43,0,679,689,3,88,44,0,680,689,3,90,
        45,0,681,689,3,92,46,0,682,689,3,94,47,0,683,689,3,14,7,0,684,689,
        3,222,111,0,685,689,3,10,5,0,686,689,3,84,42,0,687,689,3,102,51,
        0,688,678,1,0,0,0,688,679,1,0,0,0,688,680,1,0,0,0,688,681,1,0,0,
        0,688,682,1,0,0,0,688,683,1,0,0,0,688,684,1,0,0,0,688,685,1,0,0,
        0,688,686,1,0,0,0,688,687,1,0,0,0,689,83,1,0,0,0,690,694,5,9,0,0,
        691,695,3,14,7,0,692,695,3,94,47,0,693,695,3,90,45,0,694,691,1,0,
        0,0,694,692,1,0,0,0,694,693,1,0,0,0,695,85,1,0,0,0,696,697,5,25,
        0,0,697,698,3,178,89,0,698,699,5,60,0,0,699,707,3,100,50,0,700,701,
        5,17,0,0,701,702,3,178,89,0,702,703,5,60,0,0,703,704,3,100,50,0,
        704,706,1,0,0,0,705,700,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,
        707,708,1,0,0,0,708,713,1,0,0,0,709,707,1,0,0,0,710,711,5,18,0,0,
        711,712,5,60,0,0,712,714,3,100,50,0,713,710,1,0,0,0,713,714,1,0,
        0,0,714,87,1,0,0,0,715,716,5,41,0,0,716,717,3,178,89,0,717,718,5,
        60,0,0,718,722,3,100,50,0,719,720,5,18,0,0,720,721,5,60,0,0,721,
        723,3,100,50,0,722,719,1,0,0,0,722,723,1,0,0,0,723,89,1,0,0,0,724,
        725,5,22,0,0,725,726,3,216,108,0,726,727,5,27,0,0,727,728,3,218,
        109,0,728,729,5,60,0,0,729,733,3,100,50,0,730,731,5,18,0,0,731,732,
        5,60,0,0,732,734,3,100,50,0,733,730,1,0,0,0,733,734,1,0,0,0,734,
        91,1,0,0,0,735,736,5,39,0,0,736,737,5,60,0,0,737,759,3,100,50,0,
        738,739,3,98,49,0,739,740,5,60,0,0,740,741,3,100,50,0,741,743,1,
        0,0,0,742,738,1,0,0,0,743,744,1,0,0,0,744,742,1,0,0,0,744,745,1,
        0,0,0,745,749,1,0,0,0,746,747,5,18,0,0,747,748,5,60,0,0,748,750,
        3,100,50,0,749,746,1,0,0,0,749,750,1,0,0,0,750,754,1,0,0,0,751,752,
        5,21,0,0,752,753,5,60,0,0,753,755,3,100,50,0,754,751,1,0,0,0,754,
        755,1,0,0,0,755,760,1,0,0,0,756,757,5,21,0,0,757,758,5,60,0,0,758,
        760,3,100,50,0,759,742,1,0,0,0,759,756,1,0,0,0,760,93,1,0,0,0,761,
        762,5,42,0,0,762,767,3,96,48,0,763,764,5,59,0,0,764,766,3,96,48,
        0,765,763,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,
        0,768,770,1,0,0,0,769,767,1,0,0,0,770,771,5,60,0,0,771,772,3,100,
        50,0,772,95,1,0,0,0,773,776,3,178,89,0,774,775,5,7,0,0,775,777,3,
        198,99,0,776,774,1,0,0,0,776,777,1,0,0,0,777,97,1,0,0,0,778,784,
        5,19,0,0,779,782,3,178,89,0,780,781,5,7,0,0,781,783,3,204,102,0,
        782,780,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,779,1,0,0,0,
        784,785,1,0,0,0,785,99,1,0,0,0,786,797,3,32,16,0,787,788,5,44,0,
        0,788,790,5,1,0,0,789,791,3,30,15,0,790,789,1,0,0,0,791,792,1,0,
        0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,795,5,2,
        0,0,795,797,1,0,0,0,796,786,1,0,0,0,796,787,1,0,0,0,797,101,1,0,
        0,0,798,799,5,30,0,0,799,800,3,104,52,0,800,801,5,60,0,0,801,802,
        5,44,0,0,802,804,5,1,0,0,803,805,3,110,55,0,804,803,1,0,0,0,805,
        806,1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,
        809,5,2,0,0,809,103,1,0,0,0,810,811,3,108,54,0,811,813,5,59,0,0,
        812,814,3,106,53,0,813,812,1,0,0,0,813,814,1,0,0,0,814,817,1,0,0,
        0,815,817,3,178,89,0,816,810,1,0,0,0,816,815,1,0,0,0,817,105,1,0,
        0,0,818,820,5,59,0,0,819,821,3,108,54,0,820,819,1,0,0,0,821,822,
        1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,826,
        5,59,0,0,825,824,1,0,0,0,825,826,1,0,0,0,826,107,1,0,0,0,827,828,
        5,56,0,0,828,831,3,198,99,0,829,831,3,178,89,0,830,827,1,0,0,0,830,
        829,1,0,0,0,831,109,1,0,0,0,832,833,5,12,0,0,833,835,3,114,57,0,
        834,836,3,112,56,0,835,834,1,0,0,0,835,836,1,0,0,0,836,837,1,0,0,
        0,837,838,5,60,0,0,838,839,3,100,50,0,839,111,1,0,0,0,840,841,5,
        25,0,0,841,842,3,178,89,0,842,113,1,0,0,0,843,846,3,154,77,0,844,
        846,3,116,58,0,845,843,1,0,0,0,845,844,1,0,0,0,846,115,1,0,0,0,847,
        850,3,118,59,0,848,850,3,120,60,0,849,847,1,0,0,0,849,848,1,0,0,
        0,850,117,1,0,0,0,851,852,3,120,60,0,852,853,5,7,0,0,853,854,3,140,
        70,0,854,119,1,0,0,0,855,860,3,122,61,0,856,857,5,66,0,0,857,859,
        3,122,61,0,858,856,1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,
        1,0,0,0,861,121,1,0,0,0,862,860,1,0,0,0,863,872,3,124,62,0,864,872,
        3,138,69,0,865,872,3,142,71,0,866,872,3,144,72,0,867,872,3,150,75,
        0,868,872,3,152,76,0,869,872,3,162,81,0,870,872,3,170,85,0,871,863,
        1,0,0,0,871,864,1,0,0,0,871,865,1,0,0,0,871,866,1,0,0,0,871,867,
        1,0,0,0,871,868,1,0,0,0,871,869,1,0,0,0,871,870,1,0,0,0,872,123,
        1,0,0,0,873,880,3,130,65,0,874,880,3,128,64,0,875,880,3,240,120,
        0,876,880,5,31,0,0,877,880,5,38,0,0,878,880,5,20,0,0,879,873,1,0,
        0,0,879,874,1,0,0,0,879,875,1,0,0,0,879,876,1,0,0,0,879,877,1,0,
        0,0,879,878,1,0,0,0,880,125,1,0,0,0,881,888,3,130,65,0,882,888,3,
        128,64,0,883,888,3,240,120,0,884,888,5,31,0,0,885,888,5,38,0,0,886,
        888,5,20,0,0,887,881,1,0,0,0,887,882,1,0,0,0,887,883,1,0,0,0,887,
        884,1,0,0,0,887,885,1,0,0,0,887,886,1,0,0,0,888,127,1,0,0,0,889,
        890,3,132,66,0,890,891,5,71,0,0,891,892,3,136,68,0,892,898,1,0,0,
        0,893,894,3,132,66,0,894,895,5,72,0,0,895,896,3,136,68,0,896,898,
        1,0,0,0,897,889,1,0,0,0,897,893,1,0,0,0,898,129,1,0,0,0,899,903,
        5,4,0,0,900,901,5,72,0,0,901,903,5,4,0,0,902,899,1,0,0,0,902,900,
        1,0,0,0,903,131,1,0,0,0,904,908,3,134,67,0,905,906,5,72,0,0,906,
        908,3,134,67,0,907,904,1,0,0,0,907,905,1,0,0,0,908,133,1,0,0,0,909,
        910,5,4,0,0,910,135,1,0,0,0,911,912,5,4,0,0,912,137,1,0,0,0,913,
        914,3,140,70,0,914,139,1,0,0,0,915,916,3,204,102,0,916,141,1,0,0,
        0,917,918,5,40,0,0,918,143,1,0,0,0,919,920,3,146,73,0,920,145,1,
        0,0,0,921,924,3,204,102,0,922,923,5,54,0,0,923,925,3,204,102,0,924,
        922,1,0,0,0,925,926,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,
        147,1,0,0,0,928,931,3,146,73,0,929,931,3,204,102,0,930,928,1,0,0,
        0,930,929,1,0,0,0,931,149,1,0,0,0,932,933,5,57,0,0,933,934,3,116,
        58,0,934,935,5,58,0,0,935,151,1,0,0,0,936,938,5,64,0,0,937,939,3,
        156,78,0,938,937,1,0,0,0,938,939,1,0,0,0,939,940,1,0,0,0,940,947,
        5,65,0,0,941,943,5,57,0,0,942,944,3,154,77,0,943,942,1,0,0,0,943,
        944,1,0,0,0,944,945,1,0,0,0,945,947,5,58,0,0,946,936,1,0,0,0,946,
        941,1,0,0,0,947,153,1,0,0,0,948,949,3,158,79,0,949,951,5,59,0,0,
        950,952,3,156,78,0,951,950,1,0,0,0,951,952,1,0,0,0,952,155,1,0,0,
        0,953,958,3,158,79,0,954,955,5,59,0,0,955,957,3,158,79,0,956,954,
        1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,962,
        1,0,0,0,960,958,1,0,0,0,961,963,5,59,0,0,962,961,1,0,0,0,962,963,
        1,0,0,0,963,157,1,0,0,0,964,967,3,160,80,0,965,967,3,116,58,0,966,
        964,1,0,0,0,966,965,1,0,0,0,967,159,1,0,0,0,968,969,5,56,0,0,969,
        973,3,140,70,0,970,971,5,56,0,0,971,973,3,142,71,0,972,968,1,0,0,
        0,972,970,1,0,0,0,973,161,1,0,0,0,974,975,5,77,0,0,975,1000,5,78,
        0,0,976,977,5,77,0,0,977,979,3,168,84,0,978,980,5,59,0,0,979,978,
        1,0,0,0,979,980,1,0,0,0,980,981,1,0,0,0,981,982,5,78,0,0,982,1000,
        1,0,0,0,983,984,5,77,0,0,984,985,3,164,82,0,985,986,5,59,0,0,986,
        988,3,168,84,0,987,989,5,59,0,0,988,987,1,0,0,0,988,989,1,0,0,0,
        989,990,1,0,0,0,990,991,5,78,0,0,991,1000,1,0,0,0,992,993,5,77,0,
        0,993,995,3,164,82,0,994,996,5,59,0,0,995,994,1,0,0,0,995,996,1,
        0,0,0,996,997,1,0,0,0,997,998,5,78,0,0,998,1000,1,0,0,0,999,974,
        1,0,0,0,999,976,1,0,0,0,999,983,1,0,0,0,999,992,1,0,0,0,1000,163,
        1,0,0,0,1001,1006,3,166,83,0,1002,1003,5,59,0,0,1003,1005,3,166,
        83,0,1004,1002,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,
        1007,1,0,0,0,1007,165,1,0,0,0,1008,1006,1,0,0,0,1009,1012,3,126,
        63,0,1010,1012,3,146,73,0,1011,1009,1,0,0,0,1011,1010,1,0,0,0,1012,
        1013,1,0,0,0,1013,1014,5,60,0,0,1014,1015,3,116,58,0,1015,167,1,
        0,0,0,1016,1017,5,62,0,0,1017,1018,3,140,70,0,1018,169,1,0,0,0,1019,
        1020,3,148,74,0,1020,1021,5,57,0,0,1021,1022,5,58,0,0,1022,1050,
        1,0,0,0,1023,1024,3,148,74,0,1024,1025,5,57,0,0,1025,1027,3,172,
        86,0,1026,1028,5,59,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,
        1029,1,0,0,0,1029,1030,5,58,0,0,1030,1050,1,0,0,0,1031,1032,3,148,
        74,0,1032,1033,5,57,0,0,1033,1035,3,174,87,0,1034,1036,5,59,0,0,
        1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,
        5,58,0,0,1038,1050,1,0,0,0,1039,1040,3,148,74,0,1040,1041,5,57,0,
        0,1041,1042,3,172,86,0,1042,1043,5,59,0,0,1043,1045,3,174,87,0,1044,
        1046,5,59,0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1047,1,0,
        0,0,1047,1048,5,58,0,0,1048,1050,1,0,0,0,1049,1019,1,0,0,0,1049,
        1023,1,0,0,0,1049,1031,1,0,0,0,1049,1039,1,0,0,0,1050,171,1,0,0,
        0,1051,1056,3,116,58,0,1052,1053,5,59,0,0,1053,1055,3,116,58,0,1054,
        1052,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,
        0,1057,173,1,0,0,0,1058,1056,1,0,0,0,1059,1064,3,176,88,0,1060,1061,
        5,59,0,0,1061,1063,3,176,88,0,1062,1060,1,0,0,0,1063,1066,1,0,0,
        0,1064,1062,1,0,0,0,1064,1065,1,0,0,0,1065,175,1,0,0,0,1066,1064,
        1,0,0,0,1067,1068,3,204,102,0,1068,1069,5,63,0,0,1069,1070,3,116,
        58,0,1070,177,1,0,0,0,1071,1077,3,186,93,0,1072,1073,5,25,0,0,1073,
        1074,3,186,93,0,1074,1075,5,18,0,0,1075,1076,3,178,89,0,1076,1078,
        1,0,0,0,1077,1072,1,0,0,0,1077,1078,1,0,0,0,1078,1081,1,0,0,0,1079,
        1081,3,182,91,0,1080,1071,1,0,0,0,1080,1079,1,0,0,0,1081,179,1,0,
        0,0,1082,1085,3,186,93,0,1083,1085,3,184,92,0,1084,1082,1,0,0,0,
        1084,1083,1,0,0,0,1085,181,1,0,0,0,1086,1088,5,29,0,0,1087,1089,
        3,26,13,0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,1090,1,0,0,0,
        1090,1091,5,60,0,0,1091,1092,3,178,89,0,1092,183,1,0,0,0,1093,1095,
        5,29,0,0,1094,1096,3,26,13,0,1095,1094,1,0,0,0,1095,1096,1,0,0,0,
        1096,1097,1,0,0,0,1097,1098,5,60,0,0,1098,1099,3,180,90,0,1099,185,
        1,0,0,0,1100,1105,3,188,94,0,1101,1102,5,34,0,0,1102,1104,3,188,
        94,0,1103,1101,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,
        1106,1,0,0,0,1106,187,1,0,0,0,1107,1105,1,0,0,0,1108,1113,3,190,
        95,0,1109,1110,5,6,0,0,1110,1112,3,190,95,0,1111,1109,1,0,0,0,1112,
        1115,1,0,0,0,1113,1111,1,0,0,0,1113,1114,1,0,0,0,1114,189,1,0,0,
        0,1115,1113,1,0,0,0,1116,1117,5,33,0,0,1117,1120,3,190,95,0,1118,
        1120,3,192,96,0,1119,1116,1,0,0,0,1119,1118,1,0,0,0,1120,191,1,0,
        0,0,1121,1127,3,198,99,0,1122,1123,3,194,97,0,1123,1124,3,198,99,
        0,1124,1126,1,0,0,0,1125,1122,1,0,0,0,1126,1129,1,0,0,0,1127,1125,
        1,0,0,0,1127,1128,1,0,0,0,1128,193,1,0,0,0,1129,1127,1,0,0,0,1130,
        1144,5,79,0,0,1131,1144,5,80,0,0,1132,1144,5,81,0,0,1133,1144,5,
        82,0,0,1134,1144,5,83,0,0,1135,1144,5,84,0,0,1136,1144,5,85,0,0,
        1137,1144,5,27,0,0,1138,1139,5,33,0,0,1139,1144,5,27,0,0,1140,1144,
        5,28,0,0,1141,1142,5,28,0,0,1142,1144,5,33,0,0,1143,1130,1,0,0,0,
        1143,1131,1,0,0,0,1143,1132,1,0,0,0,1143,1133,1,0,0,0,1143,1134,
        1,0,0,0,1143,1135,1,0,0,0,1143,1136,1,0,0,0,1143,1137,1,0,0,0,1143,
        1138,1,0,0,0,1143,1140,1,0,0,0,1143,1141,1,0,0,0,1144,195,1,0,0,
        0,1145,1146,5,56,0,0,1146,1147,3,198,99,0,1147,197,1,0,0,0,1148,
        1149,6,99,-1,0,1149,1157,3,200,100,0,1150,1152,7,2,0,0,1151,1150,
        1,0,0,0,1152,1153,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,
        1155,1,0,0,0,1155,1157,3,198,99,7,1156,1148,1,0,0,0,1156,1151,1,
        0,0,0,1157,1181,1,0,0,0,1158,1159,10,8,0,0,1159,1160,5,62,0,0,1160,
        1180,3,198,99,9,1161,1162,10,6,0,0,1162,1163,7,3,0,0,1163,1180,3,
        198,99,7,1164,1165,10,5,0,0,1165,1166,7,4,0,0,1166,1180,3,198,99,
        6,1167,1168,10,4,0,0,1168,1169,7,5,0,0,1169,1180,3,198,99,5,1170,
        1171,10,3,0,0,1171,1172,5,68,0,0,1172,1180,3,198,99,4,1173,1174,
        10,2,0,0,1174,1175,5,67,0,0,1175,1180,3,198,99,3,1176,1177,10,1,
        0,0,1177,1178,5,66,0,0,1178,1180,3,198,99,2,1179,1158,1,0,0,0,1179,
        1161,1,0,0,0,1179,1164,1,0,0,0,1179,1167,1,0,0,0,1179,1170,1,0,0,
        0,1179,1173,1,0,0,0,1179,1176,1,0,0,0,1180,1183,1,0,0,0,1181,1179,
        1,0,0,0,1181,1182,1,0,0,0,1182,199,1,0,0,0,1183,1181,1,0,0,0,1184,
        1186,5,10,0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,
        0,0,1187,1191,3,202,101,0,1188,1190,3,208,104,0,1189,1188,1,0,0,
        0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,1191,1192,1,0,0,0,1192,201,
        1,0,0,0,1193,1191,1,0,0,0,1194,1197,5,57,0,0,1195,1198,3,236,118,
        0,1196,1198,3,206,103,0,1197,1195,1,0,0,0,1197,1196,1,0,0,0,1197,
        1198,1,0,0,0,1198,1199,1,0,0,0,1199,1222,5,58,0,0,1200,1202,5,64,
        0,0,1201,1203,3,206,103,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,
        1204,1,0,0,0,1204,1222,5,65,0,0,1205,1207,5,77,0,0,1206,1208,3,220,
        110,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,
        1222,5,78,0,0,1210,1222,3,204,102,0,1211,1222,5,4,0,0,1212,1214,
        5,3,0,0,1213,1212,1,0,0,0,1214,1215,1,0,0,0,1215,1213,1,0,0,0,1215,
        1216,1,0,0,0,1216,1222,1,0,0,0,1217,1222,5,55,0,0,1218,1222,5,31,
        0,0,1219,1222,5,38,0,0,1220,1222,5,20,0,0,1221,1194,1,0,0,0,1221,
        1200,1,0,0,0,1221,1205,1,0,0,0,1221,1210,1,0,0,0,1221,1211,1,0,0,
        0,1221,1213,1,0,0,0,1221,1217,1,0,0,0,1221,1218,1,0,0,0,1221,1219,
        1,0,0,0,1221,1220,1,0,0,0,1222,203,1,0,0,0,1223,1224,7,6,0,0,1224,
        205,1,0,0,0,1225,1228,3,178,89,0,1226,1228,3,196,98,0,1227,1225,
        1,0,0,0,1227,1226,1,0,0,0,1228,1243,1,0,0,0,1229,1244,3,230,115,
        0,1230,1233,5,59,0,0,1231,1234,3,178,89,0,1232,1234,3,196,98,0,1233,
        1231,1,0,0,0,1233,1232,1,0,0,0,1234,1236,1,0,0,0,1235,1230,1,0,0,
        0,1236,1239,1,0,0,0,1237,1235,1,0,0,0,1237,1238,1,0,0,0,1238,1241,
        1,0,0,0,1239,1237,1,0,0,0,1240,1242,5,59,0,0,1241,1240,1,0,0,0,1241,
        1242,1,0,0,0,1242,1244,1,0,0,0,1243,1229,1,0,0,0,1243,1237,1,0,0,
        0,1244,207,1,0,0,0,1245,1247,5,57,0,0,1246,1248,3,224,112,0,1247,
        1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1257,5,58,
        0,0,1250,1251,5,64,0,0,1251,1252,3,210,105,0,1252,1253,5,65,0,0,
        1253,1257,1,0,0,0,1254,1255,5,54,0,0,1255,1257,3,204,102,0,1256,
        1245,1,0,0,0,1256,1250,1,0,0,0,1256,1254,1,0,0,0,1257,209,1,0,0,
        0,1258,1263,3,212,106,0,1259,1260,5,59,0,0,1260,1262,3,212,106,0,
        1261,1259,1,0,0,0,1262,1265,1,0,0,0,1263,1261,1,0,0,0,1263,1264,
        1,0,0,0,1264,1267,1,0,0,0,1265,1263,1,0,0,0,1266,1268,5,59,0,0,1267,
        1266,1,0,0,0,1267,1268,1,0,0,0,1268,211,1,0,0,0,1269,1281,3,178,
        89,0,1270,1272,3,178,89,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,
        1273,1,0,0,0,1273,1275,5,60,0,0,1274,1276,3,178,89,0,1275,1274,1,
        0,0,0,1275,1276,1,0,0,0,1276,1278,1,0,0,0,1277,1279,3,214,107,0,
        1278,1277,1,0,0,0,1278,1279,1,0,0,0,1279,1281,1,0,0,0,1280,1269,
        1,0,0,0,1280,1271,1,0,0,0,1281,213,1,0,0,0,1282,1284,5,60,0,0,1283,
        1285,3,178,89,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,215,1,0,
        0,0,1286,1289,3,198,99,0,1287,1289,3,196,98,0,1288,1286,1,0,0,0,
        1288,1287,1,0,0,0,1289,1297,1,0,0,0,1290,1293,5,59,0,0,1291,1294,
        3,198,99,0,1292,1294,3,196,98,0,1293,1291,1,0,0,0,1293,1292,1,0,
        0,0,1294,1296,1,0,0,0,1295,1290,1,0,0,0,1296,1299,1,0,0,0,1297,1295,
        1,0,0,0,1297,1298,1,0,0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,0,1300,
        1302,5,59,0,0,1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,217,1,0,0,
        0,1303,1308,3,178,89,0,1304,1305,5,59,0,0,1305,1307,3,178,89,0,1306,
        1304,1,0,0,0,1307,1310,1,0,0,0,1308,1306,1,0,0,0,1308,1309,1,0,0,
        0,1309,1312,1,0,0,0,1310,1308,1,0,0,0,1311,1313,5,59,0,0,1312,1311,
        1,0,0,0,1312,1313,1,0,0,0,1313,219,1,0,0,0,1314,1315,3,178,89,0,
        1315,1316,5,60,0,0,1316,1317,3,178,89,0,1317,1321,1,0,0,0,1318,1319,
        5,62,0,0,1319,1321,3,198,99,0,1320,1314,1,0,0,0,1320,1318,1,0,0,
        0,1321,1340,1,0,0,0,1322,1341,3,230,115,0,1323,1330,5,59,0,0,1324,
        1325,3,178,89,0,1325,1326,5,60,0,0,1326,1327,3,178,89,0,1327,1331,
        1,0,0,0,1328,1329,5,62,0,0,1329,1331,3,198,99,0,1330,1324,1,0,0,
        0,1330,1328,1,0,0,0,1331,1333,1,0,0,0,1332,1323,1,0,0,0,1333,1336,
        1,0,0,0,1334,1332,1,0,0,0,1334,1335,1,0,0,0,1335,1338,1,0,0,0,1336,
        1334,1,0,0,0,1337,1339,5,59,0,0,1338,1337,1,0,0,0,1338,1339,1,0,
        0,0,1339,1341,1,0,0,0,1340,1322,1,0,0,0,1340,1334,1,0,0,0,1341,1363,
        1,0,0,0,1342,1345,3,178,89,0,1343,1345,3,196,98,0,1344,1342,1,0,
        0,0,1344,1343,1,0,0,0,1345,1360,1,0,0,0,1346,1361,3,230,115,0,1347,
        1350,5,59,0,0,1348,1351,3,178,89,0,1349,1351,3,196,98,0,1350,1348,
        1,0,0,0,1350,1349,1,0,0,0,1351,1353,1,0,0,0,1352,1347,1,0,0,0,1353,
        1356,1,0,0,0,1354,1352,1,0,0,0,1354,1355,1,0,0,0,1355,1358,1,0,0,
        0,1356,1354,1,0,0,0,1357,1359,5,59,0,0,1358,1357,1,0,0,0,1358,1359,
        1,0,0,0,1359,1361,1,0,0,0,1360,1346,1,0,0,0,1360,1354,1,0,0,0,1361,
        1363,1,0,0,0,1362,1320,1,0,0,0,1362,1344,1,0,0,0,1363,221,1,0,0,
        0,1364,1365,5,13,0,0,1365,1371,3,204,102,0,1366,1368,5,57,0,0,1367,
        1369,3,224,112,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,1370,1,
        0,0,0,1370,1372,5,58,0,0,1371,1366,1,0,0,0,1371,1372,1,0,0,0,1372,
        1373,1,0,0,0,1373,1374,5,60,0,0,1374,1375,3,100,50,0,1375,223,1,
        0,0,0,1376,1381,3,226,113,0,1377,1378,5,59,0,0,1378,1380,3,226,113,
        0,1379,1377,1,0,0,0,1380,1383,1,0,0,0,1381,1379,1,0,0,0,1381,1382,
        1,0,0,0,1382,1385,1,0,0,0,1383,1381,1,0,0,0,1384,1386,5,59,0,0,1385,
        1384,1,0,0,0,1385,1386,1,0,0,0,1386,225,1,0,0,0,1387,1389,3,178,
        89,0,1388,1390,3,230,115,0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,
        1400,1,0,0,0,1391,1392,3,178,89,0,1392,1393,5,63,0,0,1393,1394,3,
        178,89,0,1394,1400,1,0,0,0,1395,1396,5,62,0,0,1396,1400,3,178,89,
        0,1397,1398,5,56,0,0,1398,1400,3,178,89,0,1399,1387,1,0,0,0,1399,
        1391,1,0,0,0,1399,1395,1,0,0,0,1399,1397,1,0,0,0,1400,227,1,0,0,
        0,1401,1404,3,230,115,0,1402,1404,3,232,116,0,1403,1401,1,0,0,0,
        1403,1402,1,0,0,0,1404,229,1,0,0,0,1405,1407,5,9,0,0,1406,1405,1,
        0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,0,0,1408,1409,5,22,0,0,1409,
        1410,3,216,108,0,1410,1411,5,27,0,0,1411,1413,3,186,93,0,1412,1414,
        3,228,114,0,1413,1412,1,0,0,0,1413,1414,1,0,0,0,1414,231,1,0,0,0,
        1415,1416,5,25,0,0,1416,1418,3,180,90,0,1417,1419,3,228,114,0,1418,
        1417,1,0,0,0,1418,1419,1,0,0,0,1419,233,1,0,0,0,1420,1421,3,204,
        102,0,1421,235,1,0,0,0,1422,1424,5,43,0,0,1423,1425,3,238,119,0,
        1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,237,1,0,0,0,1426,1427,5,
        23,0,0,1427,1430,3,178,89,0,1428,1430,3,218,109,0,1429,1426,1,0,
        0,0,1429,1428,1,0,0,0,1430,239,1,0,0,0,1431,1433,5,3,0,0,1432,1431,
        1,0,0,0,1433,1434,1,0,0,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,
        241,1,0,0,0,201,247,251,253,262,271,274,281,287,297,308,315,321,
        325,331,337,341,348,350,352,357,359,361,365,371,375,382,384,386,
        391,393,398,403,409,413,419,425,429,436,438,440,445,447,449,453,
        459,463,470,472,474,479,481,487,494,498,510,517,522,526,529,535,
        539,544,548,552,566,574,582,584,588,597,604,606,615,620,625,632,
        636,643,651,660,669,676,688,694,707,713,722,733,744,749,754,759,
        767,776,782,784,792,796,806,813,816,822,825,830,835,845,849,860,
        871,879,887,897,902,907,926,930,938,943,946,951,958,962,966,972,
        979,988,995,999,1006,1011,1027,1035,1045,1049,1056,1064,1077,1080,
        1084,1088,1095,1105,1113,1119,1127,1143,1153,1156,1179,1181,1185,
        1191,1197,1202,1207,1215,1221,1227,1233,1237,1241,1243,1247,1256,
        1263,1267,1271,1275,1278,1280,1284,1288,1293,1297,1301,1308,1312,
        1320,1330,1334,1338,1340,1344,1350,1354,1358,1360,1362,1368,1371,
        1381,1385,1389,1399,1403,1406,1413,1418,1424,1429,1434
    ]

class Python3Parser ( Parser ):

    grammarFileName = "Python3Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'and'", "'as'", "'assert'", 
                     "'async'", "'await'", "'break'", "'case'", "'class'", 
                     "'continue'", "'def'", "'del'", "'elif'", "'else'", 
                     "'except'", "'False'", "'finally'", "'for'", "'from'", 
                     "'global'", "'if'", "'import'", "'in'", "'is'", "'lambda'", 
                     "'match'", "'None'", "'nonlocal'", "'not'", "'or'", 
                     "'pass'", "'raise'", "'return'", "'True'", "'try'", 
                     "'_'", "'while'", "'with'", "'yield'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'.'", "'...'", "'*'", "'('", "')'", "','", 
                     "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", 
                     "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", 
                     "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", 
                     "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
                     "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "STRING", "NUMBER", 
                      "INTEGER", "AND", "AS", "ASSERT", "ASYNC", "AWAIT", 
                      "BREAK", "CASE", "CLASS", "CONTINUE", "DEF", "DEL", 
                      "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", 
                      "FROM", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", 
                      "MATCH", "NONE", "NONLOCAL", "NOT", "OR", "PASS", 
                      "RAISE", "RETURN", "TRUE", "TRY", "UNDERSCORE", "WHILE", 
                      "WITH", "YIELD", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_async_funcdef = 6
    RULE_funcdef = 7
    RULE_funcdef_block = 8
    RULE_func_name = 9
    RULE_parameters = 10
    RULE_typedargslist = 11
    RULE_tfpdef = 12
    RULE_varargslist = 13
    RULE_vfpdef = 14
    RULE_stmt = 15
    RULE_simple_stmts = 16
    RULE_simple_stmt = 17
    RULE_expr_stmt = 18
    RULE_annassign = 19
    RULE_testlist_star_expr = 20
    RULE_augassign = 21
    RULE_del_stmt = 22
    RULE_pass_stmt = 23
    RULE_flow_stmt = 24
    RULE_break_stmt = 25
    RULE_continue_stmt = 26
    RULE_return_stmt = 27
    RULE_yield_stmt = 28
    RULE_raise_stmt = 29
    RULE_import_stmt = 30
    RULE_import_name = 31
    RULE_import_from = 32
    RULE_import_as_name = 33
    RULE_dotted_as_name = 34
    RULE_import_as_names = 35
    RULE_dotted_as_names = 36
    RULE_dotted_name = 37
    RULE_global_stmt = 38
    RULE_nonlocal_stmt = 39
    RULE_assert_stmt = 40
    RULE_compound_stmt = 41
    RULE_async_stmt = 42
    RULE_if_stmt = 43
    RULE_while_stmt = 44
    RULE_for_stmt = 45
    RULE_try_stmt = 46
    RULE_with_stmt = 47
    RULE_with_item = 48
    RULE_except_clause = 49
    RULE_block = 50
    RULE_match_stmt = 51
    RULE_subject_expr = 52
    RULE_star_named_expressions = 53
    RULE_star_named_expression = 54
    RULE_case_block = 55
    RULE_guard = 56
    RULE_patterns = 57
    RULE_pattern = 58
    RULE_as_pattern = 59
    RULE_or_pattern = 60
    RULE_closed_pattern = 61
    RULE_literal_pattern = 62
    RULE_literal_expr = 63
    RULE_complex_number = 64
    RULE_signed_number = 65
    RULE_signed_real_number = 66
    RULE_real_number = 67
    RULE_imaginary_number = 68
    RULE_capture_pattern = 69
    RULE_pattern_capture_target = 70
    RULE_wildcard_pattern = 71
    RULE_value_pattern = 72
    RULE_attr = 73
    RULE_name_or_attr = 74
    RULE_group_pattern = 75
    RULE_sequence_pattern = 76
    RULE_open_sequence_pattern = 77
    RULE_maybe_sequence_pattern = 78
    RULE_maybe_star_pattern = 79
    RULE_star_pattern = 80
    RULE_mapping_pattern = 81
    RULE_items_pattern = 82
    RULE_key_value_pattern = 83
    RULE_double_star_pattern = 84
    RULE_class_pattern = 85
    RULE_positional_patterns = 86
    RULE_keyword_patterns = 87
    RULE_keyword_pattern = 88
    RULE_test = 89
    RULE_test_nocond = 90
    RULE_lambdef = 91
    RULE_lambdef_nocond = 92
    RULE_or_test = 93
    RULE_and_test = 94
    RULE_not_test = 95
    RULE_comparison = 96
    RULE_comp_op = 97
    RULE_star_expr = 98
    RULE_expr = 99
    RULE_atom_expr = 100
    RULE_atom = 101
    RULE_name = 102
    RULE_testlist_comp = 103
    RULE_trailer = 104
    RULE_subscriptlist = 105
    RULE_subscript_ = 106
    RULE_sliceop = 107
    RULE_exprlist = 108
    RULE_testlist = 109
    RULE_dictorsetmaker = 110
    RULE_classdef = 111
    RULE_arglist = 112
    RULE_argument = 113
    RULE_comp_iter = 114
    RULE_comp_for = 115
    RULE_comp_if = 116
    RULE_encoding_decl = 117
    RULE_yield_expr = 118
    RULE_yield_arg = 119
    RULE_strings = 120

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "funcdef_block", "func_name", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmts", 
                   "simple_stmt", "expr_stmt", "annassign", "testlist_star_expr", 
                   "augassign", "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", 
                   "continue_stmt", "return_stmt", "yield_stmt", "raise_stmt", 
                   "import_stmt", "import_name", "import_from", "import_as_name", 
                   "dotted_as_name", "import_as_names", "dotted_as_names", 
                   "dotted_name", "global_stmt", "nonlocal_stmt", "assert_stmt", 
                   "compound_stmt", "async_stmt", "if_stmt", "while_stmt", 
                   "for_stmt", "try_stmt", "with_stmt", "with_item", "except_clause", 
                   "block", "match_stmt", "subject_expr", "star_named_expressions", 
                   "star_named_expression", "case_block", "guard", "patterns", 
                   "pattern", "as_pattern", "or_pattern", "closed_pattern", 
                   "literal_pattern", "literal_expr", "complex_number", 
                   "signed_number", "signed_real_number", "real_number", 
                   "imaginary_number", "capture_pattern", "pattern_capture_target", 
                   "wildcard_pattern", "value_pattern", "attr", "name_or_attr", 
                   "group_pattern", "sequence_pattern", "open_sequence_pattern", 
                   "maybe_sequence_pattern", "maybe_star_pattern", "star_pattern", 
                   "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "atom_expr", 
                   "atom", "name", "testlist_comp", "trailer", "subscriptlist", 
                   "subscript_", "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "encoding_decl", "yield_expr", "yield_arg", 
                   "strings" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    STRING=3
    NUMBER=4
    INTEGER=5
    AND=6
    AS=7
    ASSERT=8
    ASYNC=9
    AWAIT=10
    BREAK=11
    CASE=12
    CLASS=13
    CONTINUE=14
    DEF=15
    DEL=16
    ELIF=17
    ELSE=18
    EXCEPT=19
    FALSE=20
    FINALLY=21
    FOR=22
    FROM=23
    GLOBAL=24
    IF=25
    IMPORT=26
    IN=27
    IS=28
    LAMBDA=29
    MATCH=30
    NONE=31
    NONLOCAL=32
    NOT=33
    OR=34
    PASS=35
    RAISE=36
    RETURN=37
    TRUE=38
    TRY=39
    UNDERSCORE=40
    WHILE=41
    WITH=42
    YIELD=43
    NEWLINE=44
    NAME=45
    STRING_LITERAL=46
    BYTES_LITERAL=47
    DECIMAL_INTEGER=48
    OCT_INTEGER=49
    HEX_INTEGER=50
    BIN_INTEGER=51
    FLOAT_NUMBER=52
    IMAG_NUMBER=53
    DOT=54
    ELLIPSIS=55
    STAR=56
    OPEN_PAREN=57
    CLOSE_PAREN=58
    COMMA=59
    COLON=60
    SEMI_COLON=61
    POWER=62
    ASSIGN=63
    OPEN_BRACK=64
    CLOSE_BRACK=65
    OR_OP=66
    XOR=67
    AND_OP=68
    LEFT_SHIFT=69
    RIGHT_SHIFT=70
    ADD=71
    MINUS=72
    DIV=73
    MOD=74
    IDIV=75
    NOT_OP=76
    OPEN_BRACE=77
    CLOSE_BRACE=78
    LESS_THAN=79
    GREATER_THAN=80
    EQUALS=81
    GT_EQ=82
    LT_EQ=83
    NOT_EQ_1=84
    NOT_EQ_2=85
    AT=86
    ARROW=87
    ADD_ASSIGN=88
    SUB_ASSIGN=89
    MULT_ASSIGN=90
    AT_ASSIGN=91
    DIV_ASSIGN=92
    MOD_ASSIGN=93
    AND_ASSIGN=94
    OR_ASSIGN=95
    XOR_ASSIGN=96
    LEFT_SHIFT_ASSIGN=97
    RIGHT_SHIFT_ASSIGN=98
    POWER_ASSIGN=99
    IDIV_ASSIGN=100
    SKIP_=101
    UNKNOWN_CHAR=102

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 242
                self.match(Python3Parser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 243
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 244
                self.compound_stmt()
                self.state = 245
                self.match(Python3Parser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 252271930291384088) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4206977) != 0):
                self.state = 251
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 249
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [3, 4, 8, 9, 10, 11, 13, 14, 15, 16, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 55, 56, 57, 64, 71, 72, 76, 77, 86]:
                    self.state = 250
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 256
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.testlist()
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==44:
                self.state = 259
                self.match(Python3Parser.NEWLINE)
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 265
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(Python3Parser.AT)
            self.state = 268
            self.dotted_name()
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 269
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4863924168670839832) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                    self.state = 270
                    self.arglist()


                self.state = 273
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 276
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 278
                self.decorator()
                self.state = 281 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==86):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(Python3Parser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.decorators()
            self.state = 287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 284
                self.classdef()
                pass
            elif token in [15]:
                self.state = 285
                self.funcdef()
                pass
            elif token in [9]:
                self.state = 286
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_funcdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)




    def async_funcdef(self):

        localctx = Python3Parser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(Python3Parser.ASYNC)
            self.state = 290
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def func_name(self):
            return self.getTypedRuleContext(Python3Parser.Func_nameContext,0)


        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def funcdef_block(self):
            return self.getTypedRuleContext(Python3Parser.Funcdef_blockContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(Python3Parser.DEF)
            self.state = 293
            self.func_name()
            self.state = 294
            self.parameters()
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 295
                self.match(Python3Parser.ARROW)
                self.state = 296
                self.test()


            self.state = 299
            self.match(Python3Parser.COLON)
            self.state = 300
            self.funcdef_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Funcdef_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef_block" ):
                listener.enterFuncdef_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef_block" ):
                listener.exitFuncdef_block(self)




    def funcdef_block(self):

        localctx = Python3Parser.Funcdef_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_funcdef_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_func_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_name" ):
                listener.enterFunc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_name" ):
                listener.exitFunc_name(self)




    def func_name(self):

        localctx = Python3Parser.Func_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_func_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4683779897422774272) != 0):
                self.state = 307
                self.typedargslist()


            self.state = 310
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)




    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 40, 45]:
                self.state = 312
                self.tfpdef()
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 313
                    self.match(Python3Parser.ASSIGN)
                    self.state = 314
                    self.test()


                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 317
                        self.match(Python3Parser.COMMA)
                        self.state = 318
                        self.tfpdef()
                        self.state = 321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==63:
                            self.state = 319
                            self.match(Python3Parser.ASSIGN)
                            self.state = 320
                            self.test()

                 
                    self.state = 327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 328
                    self.match(Python3Parser.COMMA)
                    self.state = 359
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [56]:
                        self.state = 329
                        self.match(Python3Parser.STAR)
                        self.state = 331
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36284957458432) != 0):
                            self.state = 330
                            self.tfpdef()


                        self.state = 341
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 333
                                self.match(Python3Parser.COMMA)
                                self.state = 334
                                self.tfpdef()
                                self.state = 337
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==63:
                                    self.state = 335
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 336
                                    self.test()

                         
                            self.state = 343
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 352
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==59:
                            self.state = 344
                            self.match(Python3Parser.COMMA)
                            self.state = 350
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==62:
                                self.state = 345
                                self.match(Python3Parser.POWER)
                                self.state = 346
                                self.tfpdef()
                                self.state = 348
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==59:
                                    self.state = 347
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [62]:
                        self.state = 354
                        self.match(Python3Parser.POWER)
                        self.state = 355
                        self.tfpdef()
                        self.state = 357
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==59:
                            self.state = 356
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [58]:
                        pass
                    else:
                        pass


                pass
            elif token in [56]:
                self.state = 363
                self.match(Python3Parser.STAR)
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36284957458432) != 0):
                    self.state = 364
                    self.tfpdef()


                self.state = 375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 367
                        self.match(Python3Parser.COMMA)
                        self.state = 368
                        self.tfpdef()
                        self.state = 371
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==63:
                            self.state = 369
                            self.match(Python3Parser.ASSIGN)
                            self.state = 370
                            self.test()

                 
                    self.state = 377
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 378
                    self.match(Python3Parser.COMMA)
                    self.state = 384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 379
                        self.match(Python3Parser.POWER)
                        self.state = 380
                        self.tfpdef()
                        self.state = 382
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==59:
                            self.state = 381
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [62]:
                self.state = 388
                self.match(Python3Parser.POWER)
                self.state = 389
                self.tfpdef()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 390
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.name()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 396
                self.match(Python3Parser.COLON)
                self.state = 397
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 40, 45]:
                self.state = 400
                self.vfpdef()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 401
                    self.match(Python3Parser.ASSIGN)
                    self.state = 402
                    self.test()


                self.state = 413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 405
                        self.match(Python3Parser.COMMA)
                        self.state = 406
                        self.vfpdef()
                        self.state = 409
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==63:
                            self.state = 407
                            self.match(Python3Parser.ASSIGN)
                            self.state = 408
                            self.test()

                 
                    self.state = 415
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 416
                    self.match(Python3Parser.COMMA)
                    self.state = 447
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [56]:
                        self.state = 417
                        self.match(Python3Parser.STAR)
                        self.state = 419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36284957458432) != 0):
                            self.state = 418
                            self.vfpdef()


                        self.state = 429
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 421
                                self.match(Python3Parser.COMMA)
                                self.state = 422
                                self.vfpdef()
                                self.state = 425
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==63:
                                    self.state = 423
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 424
                                    self.test()

                         
                            self.state = 431
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                        self.state = 440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==59:
                            self.state = 432
                            self.match(Python3Parser.COMMA)
                            self.state = 438
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==62:
                                self.state = 433
                                self.match(Python3Parser.POWER)
                                self.state = 434
                                self.vfpdef()
                                self.state = 436
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==59:
                                    self.state = 435
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [62]:
                        self.state = 442
                        self.match(Python3Parser.POWER)
                        self.state = 443
                        self.vfpdef()
                        self.state = 445
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==59:
                            self.state = 444
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [60]:
                        pass
                    else:
                        pass


                pass
            elif token in [56]:
                self.state = 451
                self.match(Python3Parser.STAR)
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36284957458432) != 0):
                    self.state = 452
                    self.vfpdef()


                self.state = 463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 455
                        self.match(Python3Parser.COMMA)
                        self.state = 456
                        self.vfpdef()
                        self.state = 459
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==63:
                            self.state = 457
                            self.match(Python3Parser.ASSIGN)
                            self.state = 458
                            self.test()

                 
                    self.state = 465
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 466
                    self.match(Python3Parser.COMMA)
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 467
                        self.match(Python3Parser.POWER)
                        self.state = 468
                        self.vfpdef()
                        self.state = 470
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==59:
                            self.state = 469
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [62]:
                self.state = 476
                self.match(Python3Parser.POWER)
                self.state = 477
                self.vfpdef()
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 478
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_stmt)
        try:
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self.simple_stmts()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 486
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmts" ):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmts" ):
                listener.exitSimple_stmts(self)




    def simple_stmts(self):

        localctx = Python3Parser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.simple_stmt()
            self.state = 494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 490
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 491
                    self.simple_stmt() 
                self.state = 496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 497
                self.match(Python3Parser.SEMI_COLON)


            self.state = 500
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_simple_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 56, 57, 64, 71, 72, 76, 77]:
                self.state = 502
                self.expr_stmt()
                pass
            elif token in [16]:
                self.state = 503
                self.del_stmt()
                pass
            elif token in [35]:
                self.state = 504
                self.pass_stmt()
                pass
            elif token in [11, 14, 36, 37, 43]:
                self.state = 505
                self.flow_stmt()
                pass
            elif token in [23, 26]:
                self.state = 506
                self.import_stmt()
                pass
            elif token in [24]:
                self.state = 507
                self.global_stmt()
                pass
            elif token in [32]:
                self.state = 508
                self.nonlocal_stmt()
                pass
            elif token in [8]:
                self.state = 509
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(Python3Parser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)




    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.testlist_star_expr()
            self.state = 529
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.state = 513
                self.annassign()
                pass
            elif token in [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.state = 514
                self.augassign()
                self.state = 517
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43]:
                    self.state = 515
                    self.yield_expr()
                    pass
                elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                    self.state = 516
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [44, 61, 63]:
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==63:
                    self.state = 519
                    self.match(Python3Parser.ASSIGN)
                    self.state = 522
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [43]:
                        self.state = 520
                        self.yield_expr()
                        pass
                    elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 56, 57, 64, 71, 72, 76, 77]:
                        self.state = 521
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)




    def annassign(self):

        localctx = Python3Parser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(Python3Parser.COLON)
            self.state = 532
            self.test()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 533
                self.match(Python3Parser.ASSIGN)
                self.state = 534
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                self.state = 537
                self.test()
                pass
            elif token in [56]:
                self.state = 538
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 548
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 541
                    self.match(Python3Parser.COMMA)
                    self.state = 544
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                        self.state = 542
                        self.test()
                        pass
                    elif token in [56]:
                        self.state = 543
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 551
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 8191) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(Python3Parser.DEL)
            self.state = 557
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flow_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_flow_stmt)
        try:
            self.state = 566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 561
                self.break_stmt()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.continue_stmt()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 563
                self.return_stmt()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 4)
                self.state = 564
                self.raise_stmt()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 5)
                self.state = 565
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(Python3Parser.RETURN)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 180180556205523992) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                self.state = 573
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(Python3Parser.RAISE)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 180180556205523992) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                self.state = 579
                self.test()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 580
                    self.match(Python3Parser.FROM)
                    self.state = 581
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_stmt)
        try:
            self.state = 588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 586
                self.import_name()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 587
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(Python3Parser.IMPORT)
            self.state = 591
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(Python3Parser.FROM)
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==54 or _la==55:
                    self.state = 594
                    _la = self._input.LA(1)
                    if not(_la==54 or _la==55):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 600
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 602 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 601
                    _la = self._input.LA(1)
                    if not(_la==54 or _la==55):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 604 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==54 or _la==55):
                        break

                pass


            self.state = 608
            self.match(Python3Parser.IMPORT)
            self.state = 615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.state = 609
                self.match(Python3Parser.STAR)
                pass
            elif token in [57]:
                self.state = 610
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 611
                self.import_as_names()
                self.state = 612
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [30, 40, 45]:
                self.state = 614
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.name()
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 618
                self.match(Python3Parser.AS)
                self.state = 619
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.dotted_name()
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 623
                self.match(Python3Parser.AS)
                self.state = 624
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.import_as_name()
            self.state = 632
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 628
                    self.match(Python3Parser.COMMA)
                    self.state = 629
                    self.import_as_name() 
                self.state = 634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 635
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.dotted_as_name()
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 639
                self.match(Python3Parser.COMMA)
                self.state = 640
                self.dotted_as_name()
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.name()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 647
                self.match(Python3Parser.DOT)
                self.state = 648
                self.name()
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(Python3Parser.GLOBAL)
            self.state = 655
            self.name()
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 656
                self.match(Python3Parser.COMMA)
                self.state = 657
                self.name()
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(Python3Parser.NONLOCAL)
            self.state = 664
            self.name()
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 665
                self.match(Python3Parser.COMMA)
                self.state = 666
                self.name()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(Python3Parser.ASSERT)
            self.state = 673
            self.test()
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 674
                self.match(Python3Parser.COMMA)
                self.state = 675
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Async_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Match_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_compound_stmt)
        try:
            self.state = 688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 678
                self.if_stmt()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.while_stmt()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 3)
                self.state = 680
                self.for_stmt()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 4)
                self.state = 681
                self.try_stmt()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 5)
                self.state = 682
                self.with_stmt()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 6)
                self.state = 683
                self.funcdef()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 7)
                self.state = 684
                self.classdef()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 8)
                self.state = 685
                self.decorated()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 9)
                self.state = 686
                self.async_stmt()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 10)
                self.state = 687
                self.match_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)




    def async_stmt(self):

        localctx = Python3Parser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(Python3Parser.ASYNC)
            self.state = 694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 691
                self.funcdef()
                pass
            elif token in [42]:
                self.state = 692
                self.with_stmt()
                pass
            elif token in [22]:
                self.state = 693
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(Python3Parser.IF)
            self.state = 697
            self.test()
            self.state = 698
            self.match(Python3Parser.COLON)
            self.state = 699
            self.block()
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==17:
                self.state = 700
                self.match(Python3Parser.ELIF)
                self.state = 701
                self.test()
                self.state = 702
                self.match(Python3Parser.COLON)
                self.state = 703
                self.block()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 710
                self.match(Python3Parser.ELSE)
                self.state = 711
                self.match(Python3Parser.COLON)
                self.state = 712
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(Python3Parser.WHILE)
            self.state = 716
            self.test()
            self.state = 717
            self.match(Python3Parser.COLON)
            self.state = 718
            self.block()
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 719
                self.match(Python3Parser.ELSE)
                self.state = 720
                self.match(Python3Parser.COLON)
                self.state = 721
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(Python3Parser.FOR)
            self.state = 725
            self.exprlist()
            self.state = 726
            self.match(Python3Parser.IN)
            self.state = 727
            self.testlist()
            self.state = 728
            self.match(Python3Parser.COLON)
            self.state = 729
            self.block()
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 730
                self.match(Python3Parser.ELSE)
                self.state = 731
                self.match(Python3Parser.COLON)
                self.state = 732
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(Python3Parser.TRY)
            self.state = 736
            self.match(Python3Parser.COLON)
            self.state = 737
            self.block()
            self.state = 759
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.state = 742 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 738
                    self.except_clause()
                    self.state = 739
                    self.match(Python3Parser.COLON)
                    self.state = 740
                    self.block()
                    self.state = 744 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==19):
                        break

                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 746
                    self.match(Python3Parser.ELSE)
                    self.state = 747
                    self.match(Python3Parser.COLON)
                    self.state = 748
                    self.block()


                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 751
                    self.match(Python3Parser.FINALLY)
                    self.state = 752
                    self.match(Python3Parser.COLON)
                    self.state = 753
                    self.block()


                pass
            elif token in [21]:
                self.state = 756
                self.match(Python3Parser.FINALLY)
                self.state = 757
                self.match(Python3Parser.COLON)
                self.state = 758
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(Python3Parser.WITH)
            self.state = 762
            self.with_item()
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 763
                self.match(Python3Parser.COMMA)
                self.state = 764
                self.with_item()
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 770
            self.match(Python3Parser.COLON)
            self.state = 771
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.test()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 774
                self.match(Python3Parser.AS)
                self.state = 775
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(Python3Parser.EXCEPT)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 180180556205523992) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                self.state = 779
                self.test()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 780
                    self.match(Python3Parser.AS)
                    self.state = 781
                    self.name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = Python3Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.state = 796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 10, 11, 14, 16, 20, 23, 24, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 43, 45, 55, 56, 57, 64, 71, 72, 76, 77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.simple_stmts()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.match(Python3Parser.NEWLINE)
                self.state = 788
                self.match(Python3Parser.INDENT)
                self.state = 790 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 789
                    self.stmt()
                    self.state = 792 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 252254338105339672) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4206977) != 0)):
                        break

                self.state = 794
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(Python3Parser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Case_blockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Case_blockContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_match_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_stmt" ):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_stmt" ):
                listener.exitMatch_stmt(self)




    def match_stmt(self):

        localctx = Python3Parser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_match_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(Python3Parser.MATCH)
            self.state = 799
            self.subject_expr()
            self.state = 800
            self.match(Python3Parser.COLON)
            self.state = 801
            self.match(Python3Parser.NEWLINE)
            self.state = 802
            self.match(Python3Parser.INDENT)
            self.state = 804 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 803
                self.case_block()
                self.state = 806 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==12):
                    break

            self.state = 808
            self.match(Python3Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subject_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionsContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subject_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubject_expr" ):
                listener.enterSubject_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubject_expr" ):
                listener.exitSubject_expr(self)




    def subject_expr(self):

        localctx = Python3Parser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.star_named_expression()
                self.state = 811
                self.match(Python3Parser.COMMA)
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 812
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expressions" ):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expressions" ):
                listener.exitStar_named_expressions(self)




    def star_named_expressions(self):

        localctx = Python3Parser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(Python3Parser.COMMA)
            self.state = 820 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 819
                self.star_named_expression()
                self.state = 822 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 252238150243451928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0)):
                    break

            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 824
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expression" ):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expression" ):
                listener.exitStar_named_expression(self)




    def star_named_expression(self):

        localctx = Python3Parser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_star_named_expression)
        try:
            self.state = 830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 827
                self.match(Python3Parser.STAR)
                self.state = 828
                self.expr(0)
                pass
            elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Python3Parser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(Python3Parser.PatternsContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(Python3Parser.GuardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_case_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_block" ):
                listener.enterCase_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_block" ):
                listener.exitCase_block(self)




    def case_block(self):

        localctx = Python3Parser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(Python3Parser.CASE)
            self.state = 833
            self.patterns()
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 834
                self.guard()


            self.state = 837
            self.match(Python3Parser.COLON)
            self.state = 838
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)




    def guard(self):

        localctx = Python3Parser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(Python3Parser.IF)
            self.state = 841
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatterns" ):
                listener.enterPatterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatterns" ):
                listener.exitPatterns(self)




    def patterns(self):

        localctx = Python3Parser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_patterns)
        try:
            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 844
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(Python3Parser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = Python3Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pattern)
        try:
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_as_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_pattern" ):
                listener.enterAs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_pattern" ):
                listener.exitAs_pattern(self)




    def as_pattern(self):

        localctx = Python3Parser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.or_pattern()
            self.state = 852
            self.match(Python3Parser.AS)
            self.state = 853
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Closed_patternContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR_OP)
            else:
                return self.getToken(Python3Parser.OR_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)




    def or_pattern(self):

        localctx = Python3Parser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.closed_pattern()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==66:
                self.state = 856
                self.match(Python3Parser.OR_OP)
                self.state = 857
                self.closed_pattern()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closed_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Capture_patternContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Class_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_closed_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosed_pattern" ):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosed_pattern" ):
                listener.exitClosed_pattern(self)




    def closed_pattern(self):

        localctx = Python3Parser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_closed_pattern)
        try:
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 865
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 866
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 867
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 868
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 869
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 870
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_pattern" ):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_pattern" ):
                listener.exitLiteral_pattern(self)




    def literal_pattern(self):

        localctx = Python3Parser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_literal_pattern)
        try:
            self.state = 879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 875
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 876
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 877
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 878
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expr" ):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expr" ):
                listener.exitLiteral_expr(self)




    def literal_expr(self):

        localctx = Python3Parser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_literal_expr)
        try:
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 883
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 884
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 885
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 886
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Complex_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_real_numberContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(Python3Parser.Imaginary_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_complex_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex_number" ):
                listener.enterComplex_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex_number" ):
                listener.exitComplex_number(self)




    def complex_number(self):

        localctx = Python3Parser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_complex_number)
        try:
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.signed_real_number()
                self.state = 890
                self.match(Python3Parser.ADD)
                self.state = 891
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.signed_real_number()
                self.state = 894
                self.match(Python3Parser.MINUS)
                self.state = 895
                self.imaginary_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = Python3Parser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_signed_number)
        try:
            self.state = 902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.match(Python3Parser.MINUS)
                self.state = 901
                self.match(Python3Parser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(Python3Parser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_real_number" ):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_real_number" ):
                listener.exitSigned_real_number(self)




    def signed_real_number(self):

        localctx = Python3Parser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_signed_real_number)
        try:
            self.state = 907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.real_number()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.match(Python3Parser.MINUS)
                self.state = 906
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_number" ):
                listener.enterReal_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_number" ):
                listener.exitReal_number(self)




    def real_number(self):

        localctx = Python3Parser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_imaginary_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImaginary_number" ):
                listener.enterImaginary_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImaginary_number" ):
                listener.exitImaginary_number(self)




    def imaginary_number(self):

        localctx = Python3Parser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_capture_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_pattern" ):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_pattern" ):
                listener.exitCapture_pattern(self)




    def capture_pattern(self):

        localctx = Python3Parser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern_capture_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_capture_target" ):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_capture_target" ):
                listener.exitPattern_capture_target(self)




    def pattern_capture_target(self):

        localctx = Python3Parser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)




    def wildcard_pattern(self):

        localctx = Python3Parser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.match(Python3Parser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_pattern" ):
                listener.enterValue_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_pattern" ):
                listener.exitValue_pattern(self)




    def value_pattern(self):

        localctx = Python3Parser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)




    def attr(self):

        localctx = Python3Parser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.name()
            self.state = 924 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 922
                self.match(Python3Parser.DOT)
                self.state = 923
                self.name()
                self.state = 926 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==54):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_or_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_name_or_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_or_attr" ):
                listener.enterName_or_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_or_attr" ):
                listener.exitName_or_attr(self)




    def name_or_attr(self):

        localctx = Python3Parser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_name_or_attr)
        try:
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self.attr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 929
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_group_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_pattern" ):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_pattern" ):
                listener.exitGroup_pattern(self)




    def group_pattern(self):

        localctx = Python3Parser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 933
            self.pattern()
            self.state = 934
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_pattern" ):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_pattern" ):
                listener.exitSequence_pattern(self)




    def sequence_pattern(self):

        localctx = Python3Parser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.state = 946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 216209344097681432) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8449) != 0):
                    self.state = 937
                    self.maybe_sequence_pattern()


                self.state = 940
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 216209344097681432) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8449) != 0):
                    self.state = 942
                    self.open_sequence_pattern()


                self.state = 945
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_open_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_sequence_pattern" ):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_sequence_pattern" ):
                listener.exitOpen_sequence_pattern(self)




    def open_sequence_pattern(self):

        localctx = Python3Parser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_open_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.maybe_star_pattern()
            self.state = 949
            self.match(Python3Parser.COMMA)
            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 216209344097681432) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8449) != 0):
                self.state = 950
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_sequence_pattern" ):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_sequence_pattern" ):
                listener.exitMaybe_sequence_pattern(self)




    def maybe_sequence_pattern(self):

        localctx = Python3Parser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.maybe_star_pattern()
            self.state = 958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 954
                    self.match(Python3Parser.COMMA)
                    self.state = 955
                    self.maybe_star_pattern() 
                self.state = 960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 961
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_star_pattern" ):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_star_pattern" ):
                listener.exitMaybe_star_pattern(self)




    def maybe_star_pattern(self):

        localctx = Python3Parser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_maybe_star_pattern)
        try:
            self.state = 966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.star_pattern()
                pass
            elif token in [3, 4, 20, 30, 31, 38, 40, 45, 57, 64, 72, 77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_pattern" ):
                listener.enterStar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_pattern" ):
                listener.exitStar_pattern(self)




    def star_pattern(self):

        localctx = Python3Parser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_star_pattern)
        try:
            self.state = 972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.match(Python3Parser.STAR)
                self.state = 969
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 970
                self.match(Python3Parser.STAR)
                self.state = 971
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Items_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_mapping_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_pattern" ):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_pattern" ):
                listener.exitMapping_pattern(self)




    def mapping_pattern(self):

        localctx = Python3Parser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 975
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 977
                self.double_star_pattern()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 978
                    self.match(Python3Parser.COMMA)


                self.state = 981
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 984
                self.items_pattern()
                self.state = 985
                self.match(Python3Parser.COMMA)
                self.state = 986
                self.double_star_pattern()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 987
                    self.match(Python3Parser.COMMA)


                self.state = 990
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 992
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 993
                self.items_pattern()
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 994
                    self.match(Python3Parser.COMMA)


                self.state = 997
                self.match(Python3Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Items_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_items_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItems_pattern" ):
                listener.enterItems_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItems_pattern" ):
                listener.exitItems_pattern(self)




    def items_pattern(self):

        localctx = Python3Parser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.key_value_pattern()
            self.state = 1006
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1002
                    self.match(Python3Parser.COMMA)
                    self.state = 1003
                    self.key_value_pattern() 
                self.state = 1008
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(Python3Parser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_key_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value_pattern" ):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value_pattern" ):
                listener.exitKey_value_pattern(self)




    def key_value_pattern(self):

        localctx = Python3Parser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 20, 31, 38, 72]:
                self.state = 1009
                self.literal_expr()
                pass
            elif token in [30, 40, 45]:
                self.state = 1010
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1013
            self.match(Python3Parser.COLON)
            self.state = 1014
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_double_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_star_pattern" ):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_star_pattern" ):
                listener.exitDouble_star_pattern(self)




    def double_star_pattern(self):

        localctx = Python3Parser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(Python3Parser.POWER)
            self.state = 1017
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(Python3Parser.Name_or_attrContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Positional_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Keyword_patternsContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_class_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_pattern" ):
                listener.enterClass_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_pattern" ):
                listener.exitClass_pattern(self)




    def class_pattern(self):

        localctx = Python3Parser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.name_or_attr()
                self.state = 1020
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1021
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.name_or_attr()
                self.state = 1024
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1025
                self.positional_patterns()
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 1026
                    self.match(Python3Parser.COMMA)


                self.state = 1029
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1031
                self.name_or_attr()
                self.state = 1032
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1033
                self.keyword_patterns()
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 1034
                    self.match(Python3Parser.COMMA)


                self.state = 1037
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1039
                self.name_or_attr()
                self.state = 1040
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1041
                self.positional_patterns()
                self.state = 1042
                self.match(Python3Parser.COMMA)
                self.state = 1043
                self.keyword_patterns()
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 1044
                    self.match(Python3Parser.COMMA)


                self.state = 1047
                self.match(Python3Parser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positional_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.PatternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_positional_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_patterns" ):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_patterns" ):
                listener.exitPositional_patterns(self)




    def positional_patterns(self):

        localctx = Python3Parser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.pattern()
            self.state = 1056
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1052
                    self.match(Python3Parser.COMMA)
                    self.state = 1053
                    self.pattern() 
                self.state = 1058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_patterns" ):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_patterns" ):
                listener.exitKeyword_patterns(self)




    def keyword_patterns(self):

        localctx = Python3Parser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.keyword_pattern()
            self.state = 1064
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1060
                    self.match(Python3Parser.COMMA)
                    self.state = 1061
                    self.keyword_pattern() 
                self.state = 1066
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_pattern" ):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_pattern" ):
                listener.exitKeyword_pattern(self)




    def keyword_pattern(self):

        localctx = Python3Parser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.name()
            self.state = 1068
            self.match(Python3Parser.ASSIGN)
            self.state = 1069
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 1080
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1071
                self.or_test()
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 1072
                    self.match(Python3Parser.IF)
                    self.state = 1073
                    self.or_test()
                    self.state = 1074
                    self.match(Python3Parser.ELSE)
                    self.state = 1075
                    self.test()


                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_test_nocond)
        try:
            self.state = 1084
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.or_test()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(Python3Parser.LAMBDA)
            self.state = 1088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4683779897422774272) != 0):
                self.state = 1087
                self.varargslist()


            self.state = 1090
            self.match(Python3Parser.COLON)
            self.state = 1091
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambdef_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(Python3Parser.LAMBDA)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4683779897422774272) != 0):
                self.state = 1094
                self.varargslist()


            self.state = 1097
            self.match(Python3Parser.COLON)
            self.state = 1098
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.and_test()
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 1101
                self.match(Python3Parser.OR)
                self.state = 1102
                self.and_test()
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.not_test()
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 1109
                self.match(Python3Parser.AND)
                self.state = 1110
                self.not_test()
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_not_test)
        try:
            self.state = 1119
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.match(Python3Parser.NOT)
                self.state = 1117
                self.not_test()
                pass
            elif token in [3, 4, 10, 20, 30, 31, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1118
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.expr(0)
            self.state = 1127
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1122
                    self.comp_op()
                    self.state = 1123
                    self.expr(0) 
                self.state = 1129
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_comp_op)
        try:
            self.state = 1143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1132
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1133
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1134
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1135
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1136
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1137
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1138
                self.match(Python3Parser.NOT)
                self.state = 1139
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1140
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1141
                self.match(Python3Parser.IS)
                self.state = 1142
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(Python3Parser.STAR)
            self.state = 1146
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(Python3Parser.Atom_exprContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ADD)
            else:
                return self.getToken(Python3Parser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MINUS)
            else:
                return self.getToken(Python3Parser.MINUS, i)

        def NOT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NOT_OP)
            else:
                return self.getToken(Python3Parser.NOT_OP, i)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def DIV(self):
            return self.getToken(Python3Parser.DIV, 0)

        def MOD(self):
            return self.getToken(Python3Parser.MOD, 0)

        def IDIV(self):
            return self.getToken(Python3Parser.IDIV, 0)

        def LEFT_SHIFT(self):
            return self.getToken(Python3Parser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(Python3Parser.AND_OP, 0)

        def XOR(self):
            return self.getToken(Python3Parser.XOR, 0)

        def OR_OP(self):
            return self.getToken(Python3Parser.OR_OP, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 30, 31, 38, 40, 45, 55, 57, 64, 77]:
                self.state = 1149
                self.atom_expr()
                pass
            elif token in [71, 72, 76]:
                self.state = 1151 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1150
                        _la = self._input.LA(1)
                        if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 35) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1153 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                self.state = 1155
                self.expr(7)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1181
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1179
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1158
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1159
                        self.match(Python3Parser.POWER)
                        self.state = 1160
                        self.expr(9)
                        pass

                    elif la_ == 2:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1161
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1162
                        _la = self._input.LA(1)
                        if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 1074659329) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1163
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1164
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1165
                        _la = self._input.LA(1)
                        if not(_la==71 or _la==72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1166
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1167
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1168
                        _la = self._input.LA(1)
                        if not(_la==69 or _la==70):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1169
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1170
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1171
                        self.match(Python3Parser.AND_OP)
                        self.state = 1172
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1173
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1174
                        self.match(Python3Parser.XOR)
                        self.state = 1175
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1176
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1177
                        self.match(Python3Parser.OR_OP)
                        self.state = 1178
                        self.expr(2)
                        pass

             
                self.state = 1183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)




    def atom_expr(self):

        localctx = Python3Parser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1184
                self.match(Python3Parser.AWAIT)


            self.state = 1187
            self.atom()
            self.state = 1191
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1188
                    self.trailer() 
                self.state = 1193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 1221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43]:
                    self.state = 1195
                    self.yield_expr()
                    pass
                elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 56, 57, 64, 71, 72, 76, 77]:
                    self.state = 1196
                    self.testlist_comp()
                    pass
                elif token in [58]:
                    pass
                else:
                    pass
                self.state = 1199
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 252238150243451928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                    self.state = 1201
                    self.testlist_comp()


                self.state = 1204
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1205
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4863924168670839832) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                    self.state = 1206
                    self.dictorsetmaker()


                self.state = 1209
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [30, 40, 45]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1210
                self.name()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1211
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1213 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1212
                        self.match(Python3Parser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1215 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1217
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1218
                self.match(Python3Parser.NONE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1219
                self.match(Python3Parser.TRUE)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1220
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = Python3Parser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 36284957458432) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                self.state = 1225
                self.test()
                pass
            elif token in [56]:
                self.state = 1226
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 22]:
                self.state = 1229
                self.comp_for()
                pass
            elif token in [58, 59, 65]:
                self.state = 1237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1230
                        self.match(Python3Parser.COMMA)
                        self.state = 1233
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                            self.state = 1231
                            self.test()
                            pass
                        elif token in [56]:
                            self.state = 1232
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1239
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 1240
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4863924168670839832) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                    self.state = 1246
                    self.arglist()


                self.state = 1249
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1250
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1251
                self.subscriptlist()
                self.state = 1252
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1254
                self.match(Python3Parser.DOT)
                self.state = 1255
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Subscript_Context)
            else:
                return self.getTypedRuleContext(Python3Parser.Subscript_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.subscript_()
            self.state = 1263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1259
                    self.match(Python3Parser.COMMA)
                    self.state = 1260
                    self.subscript_() 
                self.state = 1265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1266
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_" ):
                listener.enterSubscript_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_" ):
                listener.exitSubscript_(self)




    def subscript_(self):

        localctx = Python3Parser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_subscript_)
        self._la = 0 # Token type
        try:
            self.state = 1280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 180180556205523992) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                    self.state = 1270
                    self.test()


                self.state = 1273
                self.match(Python3Parser.COLON)
                self.state = 1275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 180180556205523992) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                    self.state = 1274
                    self.test()


                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 1277
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)




    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.match(Python3Parser.COLON)
            self.state = 1284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 180180556205523992) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                self.state = 1283
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 30, 31, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                self.state = 1286
                self.expr(0)
                pass
            elif token in [56]:
                self.state = 1287
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1290
                    self.match(Python3Parser.COMMA)
                    self.state = 1293
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 4, 10, 20, 30, 31, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                        self.state = 1291
                        self.expr(0)
                        pass
                    elif token in [56]:
                        self.state = 1292
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1300
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.test()
            self.state = 1308
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1304
                    self.match(Python3Parser.COMMA)
                    self.state = 1305
                    self.test() 
                self.state = 1310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

            self.state = 1312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1311
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.POWER)
            else:
                return self.getToken(Python3Parser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)




    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1320
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                    self.state = 1314
                    self.test()
                    self.state = 1315
                    self.match(Python3Parser.COLON)
                    self.state = 1316
                    self.test()
                    pass
                elif token in [62]:
                    self.state = 1318
                    self.match(Python3Parser.POWER)
                    self.state = 1319
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1340
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9, 22]:
                    self.state = 1322
                    self.comp_for()
                    pass
                elif token in [59, 78]:
                    self.state = 1334
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1323
                            self.match(Python3Parser.COMMA)
                            self.state = 1330
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                                self.state = 1324
                                self.test()
                                self.state = 1325
                                self.match(Python3Parser.COLON)
                                self.state = 1326
                                self.test()
                                pass
                            elif token in [62]:
                                self.state = 1328
                                self.match(Python3Parser.POWER)
                                self.state = 1329
                                self.expr(0)
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1336
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                    self.state = 1338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==59:
                        self.state = 1337
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1344
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                    self.state = 1342
                    self.test()
                    pass
                elif token in [56]:
                    self.state = 1343
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1360
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9, 22]:
                    self.state = 1346
                    self.comp_for()
                    pass
                elif token in [59, 78]:
                    self.state = 1354
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1347
                            self.match(Python3Parser.COMMA)
                            self.state = 1350
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                                self.state = 1348
                                self.test()
                                pass
                            elif token in [56]:
                                self.state = 1349
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1356
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

                    self.state = 1358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==59:
                        self.state = 1357
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(Python3Parser.CLASS)
            self.state = 1365
            self.name()
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 1366
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4863924168670839832) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                    self.state = 1367
                    self.arglist()


                self.state = 1370
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 1373
            self.match(Python3Parser.COLON)
            self.state = 1374
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.argument()
            self.state = 1381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1377
                    self.match(Python3Parser.COMMA)
                    self.state = 1378
                    self.argument() 
                self.state = 1383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1384
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1387
                self.test()
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9 or _la==22:
                    self.state = 1388
                    self.comp_for()


                pass

            elif la_ == 2:
                self.state = 1391
                self.test()
                self.state = 1392
                self.match(Python3Parser.ASSIGN)
                self.state = 1393
                self.test()
                pass

            elif la_ == 3:
                self.state = 1395
                self.match(Python3Parser.POWER)
                self.state = 1396
                self.test()
                pass

            elif la_ == 4:
                self.state = 1397
                self.match(Python3Parser.STAR)
                self.state = 1398
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_comp_iter)
        try:
            self.state = 1403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1401
                self.comp_for()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1402
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1405
                self.match(Python3Parser.ASYNC)


            self.state = 1408
            self.match(Python3Parser.FOR)
            self.state = 1409
            self.exprlist()
            self.state = 1410
            self.match(Python3Parser.IN)
            self.state = 1411
            self.or_test()
            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 37749248) != 0):
                self.state = 1412
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.match(Python3Parser.IF)
            self.state = 1416
            self.test_nocond()
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 37749248) != 0):
                self.state = 1417
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)




    def encoding_decl(self):

        localctx = Python3Parser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(Python3Parser.YIELD)
            self.state = 1424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 180180556213912600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 12673) != 0):
                self.state = 1423
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_yield_arg)
        try:
            self.state = 1429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1426
                self.match(Python3Parser.FROM)
                self.state = 1427
                self.test()
                pass
            elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 45, 55, 57, 64, 71, 72, 76, 77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1428
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_strings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrings" ):
                listener.enterStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrings" ):
                listener.exitStrings(self)




    def strings(self):

        localctx = Python3Parser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_strings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1431
                self.match(Python3Parser.STRING)
                self.state = 1434 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==3):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[99] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




