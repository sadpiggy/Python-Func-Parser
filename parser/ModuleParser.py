# Generated from Module.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,101,1069,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,1,0,1,0,5,0,213,8,0,10,0,12,0,216,9,0,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,3,2,226,8,2,1,3,1,3,1,3,1,3,3,3,232,8,3,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,3,4,241,8,4,1,5,1,5,1,5,3,5,246,8,5,1,6,1,
        6,1,6,3,6,251,8,6,1,7,1,7,1,7,3,7,256,8,7,1,8,1,8,1,8,3,8,261,8,
        8,1,9,1,9,1,9,3,9,266,8,9,1,10,1,10,1,10,1,10,3,10,272,8,10,1,11,
        1,11,1,11,1,11,3,11,278,8,11,1,12,1,12,1,12,3,12,283,8,12,1,13,1,
        13,1,13,3,13,288,8,13,1,14,1,14,1,14,3,14,293,8,14,1,15,1,15,1,15,
        1,15,1,15,1,15,3,15,301,8,15,1,16,1,16,5,16,305,8,16,10,16,12,16,
        308,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,317,8,17,1,18,3,
        18,320,8,18,1,18,1,18,1,18,1,18,3,18,326,8,18,1,18,1,18,1,18,3,18,
        331,8,18,1,18,1,18,1,18,1,18,3,18,337,8,18,1,18,1,18,3,18,341,8,
        18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,354,
        8,20,1,21,1,21,1,22,1,22,5,22,360,8,22,10,22,12,22,363,9,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,3,25,385,8,25,1,25,1,25,1,25,1,25,
        3,25,391,8,25,1,25,1,25,1,25,5,25,396,8,25,10,25,12,25,399,9,25,
        1,26,1,26,1,26,5,26,404,8,26,10,26,12,26,407,9,26,3,26,409,8,26,
        1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,419,8,28,1,29,1,29,
        1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,
        3,35,436,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,3,35,478,8,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,4,39,
        498,8,39,11,39,12,39,499,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
        1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,
        1,50,1,51,3,51,525,8,51,1,51,3,51,528,8,51,1,51,1,51,1,51,3,51,533,
        8,51,1,51,1,51,1,52,5,52,538,8,52,10,52,12,52,541,9,52,1,52,1,52,
        1,52,5,52,546,8,52,10,52,12,52,549,9,52,1,53,1,53,3,53,553,8,53,
        1,53,1,53,5,53,557,8,53,10,53,12,53,560,9,53,1,53,3,53,563,8,53,
        1,54,1,54,1,54,5,54,568,8,54,10,54,12,54,571,9,54,1,54,1,54,3,54,
        575,8,54,1,54,3,54,578,8,54,1,55,1,55,1,55,1,55,1,55,3,55,585,8,
        55,1,56,3,56,588,8,56,1,56,1,56,1,56,1,56,1,56,3,56,595,8,56,1,56,
        3,56,598,8,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,607,8,58,10,
        58,12,58,610,9,58,1,59,1,59,1,59,1,60,3,60,616,8,60,1,60,1,60,1,
        61,1,61,3,61,622,8,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,3,62,633,8,62,1,63,1,63,1,63,1,63,1,63,1,64,5,64,641,8,64,10,
        64,12,64,644,9,64,1,64,1,64,1,64,1,64,5,64,650,8,64,10,64,12,64,
        653,9,64,5,64,655,8,64,10,64,12,64,658,9,64,1,65,1,65,1,65,1,65,
        1,65,1,65,5,65,666,8,65,10,65,12,65,669,9,65,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,3,66,679,8,66,1,67,1,67,1,68,1,68,1,69,1,69,
        1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,3,73,714,8,73,1,73,3,73,717,8,73,1,73,1,73,3,73,721,8,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,730,8,73,1,74,1,74,1,74,1,
        74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,3,75,743,8,75,1,76,1,76,1,
        76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,755,8,76,1,76,3,76,758,
        8,76,1,77,3,77,761,8,77,1,77,1,77,1,77,3,77,766,8,77,1,77,1,77,1,
        78,3,78,771,8,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,3,79,781,
        8,79,1,80,1,80,1,80,3,80,786,8,80,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,3,80,795,8,80,1,81,3,81,798,8,81,1,81,1,81,3,81,802,8,81,1,
        82,1,82,3,82,806,8,82,1,82,1,82,3,82,810,8,82,1,83,3,83,813,8,83,
        1,83,3,83,816,8,83,1,83,1,83,1,84,1,84,3,84,822,8,84,1,84,1,84,1,
        84,3,84,827,8,84,1,85,1,85,1,85,5,85,832,8,85,10,85,12,85,835,9,
        85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,3,86,844,8,86,1,87,1,87,1,
        87,5,87,849,8,87,10,87,12,87,852,9,87,1,88,1,88,3,88,856,8,88,1,
        88,3,88,859,8,88,1,88,1,88,1,88,1,89,1,89,1,90,1,90,1,90,1,90,5,
        90,870,8,90,10,90,12,90,873,9,90,1,91,3,91,876,8,91,1,91,3,91,879,
        8,91,1,91,1,91,1,92,5,92,884,8,92,10,92,12,92,887,9,92,1,92,3,92,
        890,8,92,1,92,1,92,1,92,1,92,1,92,3,92,897,8,92,1,92,1,92,1,92,1,
        92,1,92,1,92,3,92,905,8,92,5,92,907,8,92,10,92,12,92,910,9,92,1,
        92,3,92,913,8,92,1,92,1,92,3,92,917,8,92,1,93,4,93,920,8,93,11,93,
        12,93,921,1,94,3,94,925,8,94,1,94,1,94,1,95,1,95,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,5,96,938,8,96,10,96,12,96,941,9,96,3,96,943,
        8,96,1,96,3,96,946,8,96,1,97,1,97,1,97,1,98,3,98,952,8,98,1,98,1,
        98,1,98,1,98,1,98,3,98,959,8,98,3,98,961,8,98,1,98,3,98,964,8,98,
        1,99,1,99,1,99,5,99,969,8,99,10,99,12,99,972,9,99,1,99,3,99,975,
        8,99,1,100,1,100,1,101,1,101,3,101,981,8,101,4,101,983,8,101,11,
        101,12,101,984,1,102,5,102,988,8,102,10,102,12,102,991,9,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        3,102,1005,8,102,1,102,5,102,1008,8,102,10,102,12,102,1011,9,102,
        5,102,1013,8,102,10,102,12,102,1016,9,102,1,103,5,103,1019,8,103,
        10,103,12,103,1022,9,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,3,103,1036,8,103,1,103,5,103,1039,
        8,103,10,103,12,103,1042,9,103,5,103,1044,8,103,10,103,12,103,1047,
        9,103,1,104,5,104,1050,8,104,10,104,12,104,1053,9,104,1,104,1,104,
        1,104,1,104,5,104,1059,8,104,10,104,12,104,1062,9,104,5,104,1064,
        8,104,10,104,12,104,1067,9,104,1,104,0,1,50,105,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,0,26,1,0,10,11,1,0,12,13,1,0,14,16,1,0,23,
        24,3,0,9,9,12,14,27,28,1,0,29,32,1,0,92,97,2,0,33,36,74,74,2,0,9,
        9,14,14,1,0,37,39,2,0,40,40,84,84,1,0,41,51,1,0,52,53,1,0,17,18,
        3,0,17,18,20,21,87,88,2,0,1,1,17,18,2,0,17,18,29,30,1,0,87,88,1,
        0,20,21,2,0,1,1,20,21,1,0,1,2,4,0,1,2,17,18,20,21,87,88,2,0,70,71,
        85,85,3,0,69,69,72,72,86,86,1,0,80,81,1,0,92,94,1152,0,214,1,0,0,
        0,2,217,1,0,0,0,4,222,1,0,0,0,6,227,1,0,0,0,8,240,1,0,0,0,10,242,
        1,0,0,0,12,247,1,0,0,0,14,252,1,0,0,0,16,257,1,0,0,0,18,262,1,0,
        0,0,20,267,1,0,0,0,22,273,1,0,0,0,24,279,1,0,0,0,26,284,1,0,0,0,
        28,289,1,0,0,0,30,300,1,0,0,0,32,302,1,0,0,0,34,316,1,0,0,0,36,340,
        1,0,0,0,38,342,1,0,0,0,40,353,1,0,0,0,42,355,1,0,0,0,44,357,1,0,
        0,0,46,364,1,0,0,0,48,366,1,0,0,0,50,368,1,0,0,0,52,408,1,0,0,0,
        54,410,1,0,0,0,56,418,1,0,0,0,58,420,1,0,0,0,60,422,1,0,0,0,62,424,
        1,0,0,0,64,426,1,0,0,0,66,428,1,0,0,0,68,430,1,0,0,0,70,477,1,0,
        0,0,72,479,1,0,0,0,74,481,1,0,0,0,76,483,1,0,0,0,78,497,1,0,0,0,
        80,501,1,0,0,0,82,503,1,0,0,0,84,505,1,0,0,0,86,507,1,0,0,0,88,509,
        1,0,0,0,90,511,1,0,0,0,92,513,1,0,0,0,94,515,1,0,0,0,96,517,1,0,
        0,0,98,519,1,0,0,0,100,521,1,0,0,0,102,524,1,0,0,0,104,539,1,0,0,
        0,106,550,1,0,0,0,108,577,1,0,0,0,110,584,1,0,0,0,112,587,1,0,0,
        0,114,599,1,0,0,0,116,602,1,0,0,0,118,611,1,0,0,0,120,615,1,0,0,
        0,122,619,1,0,0,0,124,632,1,0,0,0,126,634,1,0,0,0,128,642,1,0,0,
        0,130,667,1,0,0,0,132,678,1,0,0,0,134,680,1,0,0,0,136,682,1,0,0,
        0,138,684,1,0,0,0,140,686,1,0,0,0,142,688,1,0,0,0,144,690,1,0,0,
        0,146,729,1,0,0,0,148,731,1,0,0,0,150,742,1,0,0,0,152,757,1,0,0,
        0,154,760,1,0,0,0,156,770,1,0,0,0,158,780,1,0,0,0,160,794,1,0,0,
        0,162,797,1,0,0,0,164,809,1,0,0,0,166,812,1,0,0,0,168,826,1,0,0,
        0,170,828,1,0,0,0,172,843,1,0,0,0,174,845,1,0,0,0,176,853,1,0,0,
        0,178,863,1,0,0,0,180,865,1,0,0,0,182,875,1,0,0,0,184,916,1,0,0,
        0,186,919,1,0,0,0,188,924,1,0,0,0,190,928,1,0,0,0,192,945,1,0,0,
        0,194,947,1,0,0,0,196,951,1,0,0,0,198,974,1,0,0,0,200,976,1,0,0,
        0,202,982,1,0,0,0,204,989,1,0,0,0,206,1020,1,0,0,0,208,1051,1,0,
        0,0,210,213,3,102,51,0,211,213,3,100,50,0,212,210,1,0,0,0,212,211,
        1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,1,1,
        0,0,0,216,214,1,0,0,0,217,218,5,78,0,0,218,219,5,79,0,0,219,220,
        3,198,99,0,220,221,5,1,0,0,221,3,1,0,0,0,222,225,3,6,3,0,223,224,
        5,2,0,0,224,226,3,4,2,0,225,223,1,0,0,0,225,226,1,0,0,0,226,5,1,
        0,0,0,227,231,3,8,4,0,228,229,3,72,36,0,229,230,3,6,3,0,230,232,
        1,0,0,0,231,228,1,0,0,0,231,232,1,0,0,0,232,7,1,0,0,0,233,241,3,
        10,5,0,234,235,3,10,5,0,235,236,5,3,0,0,236,237,3,4,2,0,237,238,
        5,4,0,0,238,239,3,8,4,0,239,241,1,0,0,0,240,233,1,0,0,0,240,234,
        1,0,0,0,241,9,1,0,0,0,242,245,3,12,6,0,243,244,5,5,0,0,244,246,3,
        10,5,0,245,243,1,0,0,0,245,246,1,0,0,0,246,11,1,0,0,0,247,250,3,
        14,7,0,248,249,5,6,0,0,249,251,3,12,6,0,250,248,1,0,0,0,250,251,
        1,0,0,0,251,13,1,0,0,0,252,255,3,16,8,0,253,254,5,7,0,0,254,256,
        3,14,7,0,255,253,1,0,0,0,255,256,1,0,0,0,256,15,1,0,0,0,257,260,
        3,18,9,0,258,259,5,8,0,0,259,261,3,16,8,0,260,258,1,0,0,0,260,261,
        1,0,0,0,261,17,1,0,0,0,262,265,3,20,10,0,263,264,5,9,0,0,264,266,
        3,18,9,0,265,263,1,0,0,0,265,266,1,0,0,0,266,19,1,0,0,0,267,271,
        3,22,11,0,268,269,3,74,37,0,269,270,3,20,10,0,270,272,1,0,0,0,271,
        268,1,0,0,0,271,272,1,0,0,0,272,21,1,0,0,0,273,277,3,24,12,0,274,
        275,3,60,30,0,275,276,3,22,11,0,276,278,1,0,0,0,277,274,1,0,0,0,
        277,278,1,0,0,0,278,23,1,0,0,0,279,282,3,26,13,0,280,281,7,0,0,0,
        281,283,3,24,12,0,282,280,1,0,0,0,282,283,1,0,0,0,283,25,1,0,0,0,
        284,287,3,28,14,0,285,286,7,1,0,0,286,288,3,26,13,0,287,285,1,0,
        0,0,287,288,1,0,0,0,288,27,1,0,0,0,289,292,3,30,15,0,290,291,7,2,
        0,0,291,293,3,28,14,0,292,290,1,0,0,0,292,293,1,0,0,0,293,29,1,0,
        0,0,294,295,5,17,0,0,295,296,3,32,16,0,296,297,5,18,0,0,297,298,
        3,30,15,0,298,301,1,0,0,0,299,301,3,34,17,0,300,294,1,0,0,0,300,
        299,1,0,0,0,301,31,1,0,0,0,302,306,3,184,92,0,303,305,3,66,33,0,
        304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,
        307,33,1,0,0,0,308,306,1,0,0,0,309,310,3,48,24,0,310,311,3,30,15,
        0,311,317,1,0,0,0,312,317,3,38,19,0,313,317,3,40,20,0,314,317,3,
        36,18,0,315,317,3,50,25,0,316,309,1,0,0,0,316,312,1,0,0,0,316,313,
        1,0,0,0,316,314,1,0,0,0,316,315,1,0,0,0,317,35,1,0,0,0,318,320,5,
        19,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,322,5,
        84,0,0,322,323,3,184,92,0,323,325,5,20,0,0,324,326,3,8,4,0,325,324,
        1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,328,5,21,0,0,328,341,
        1,0,0,0,329,331,5,19,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,332,
        1,0,0,0,332,333,5,84,0,0,333,334,3,184,92,0,334,336,5,17,0,0,335,
        337,3,4,2,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,
        339,5,18,0,0,339,341,1,0,0,0,340,319,1,0,0,0,340,330,1,0,0,0,341,
        37,1,0,0,0,342,343,3,58,29,0,343,344,3,30,15,0,344,39,1,0,0,0,345,
        346,3,42,21,0,346,347,5,17,0,0,347,348,3,44,22,0,348,349,5,18,0,
        0,349,354,1,0,0,0,350,351,3,42,21,0,351,352,3,46,23,0,352,354,1,
        0,0,0,353,345,1,0,0,0,353,350,1,0,0,0,354,41,1,0,0,0,355,356,5,22,
        0,0,356,43,1,0,0,0,357,361,3,184,92,0,358,360,3,66,33,0,359,358,
        1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,45,1,
        0,0,0,363,361,1,0,0,0,364,365,3,34,17,0,365,47,1,0,0,0,366,367,7,
        3,0,0,367,49,1,0,0,0,368,369,6,25,-1,0,369,370,3,56,28,0,370,397,
        1,0,0,0,371,372,10,6,0,0,372,373,5,20,0,0,373,374,3,4,2,0,374,375,
        5,21,0,0,375,396,1,0,0,0,376,377,10,5,0,0,377,378,5,17,0,0,378,379,
        3,52,26,0,379,380,5,18,0,0,380,396,1,0,0,0,381,382,10,4,0,0,382,
        384,5,25,0,0,383,385,5,83,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,
        386,1,0,0,0,386,396,3,198,99,0,387,388,10,3,0,0,388,390,5,26,0,0,
        389,391,5,83,0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,
        392,396,3,198,99,0,393,394,10,2,0,0,394,396,3,48,24,0,395,371,1,
        0,0,0,395,376,1,0,0,0,395,381,1,0,0,0,395,387,1,0,0,0,395,393,1,
        0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,51,1,0,
        0,0,399,397,1,0,0,0,400,405,3,54,27,0,401,402,5,2,0,0,402,404,3,
        54,27,0,403,401,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,
        1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,408,400,1,0,0,0,408,409,
        1,0,0,0,409,53,1,0,0,0,410,411,3,6,3,0,411,55,1,0,0,0,412,419,3,
        198,99,0,413,419,3,62,31,0,414,415,5,17,0,0,415,416,3,4,2,0,416,
        417,5,18,0,0,417,419,1,0,0,0,418,412,1,0,0,0,418,413,1,0,0,0,418,
        414,1,0,0,0,419,57,1,0,0,0,420,421,7,4,0,0,421,59,1,0,0,0,422,423,
        7,5,0,0,423,61,1,0,0,0,424,425,7,6,0,0,425,63,1,0,0,0,426,427,7,
        7,0,0,427,65,1,0,0,0,428,429,7,8,0,0,429,67,1,0,0,0,430,431,7,9,
        0,0,431,69,1,0,0,0,432,435,7,10,0,0,433,434,5,20,0,0,434,436,5,21,
        0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,478,1,0,0,0,437,478,5,12,
        0,0,438,478,5,13,0,0,439,478,5,14,0,0,440,478,5,15,0,0,441,478,5,
        16,0,0,442,478,5,8,0,0,443,478,5,9,0,0,444,478,5,7,0,0,445,478,5,
        27,0,0,446,478,5,28,0,0,447,478,5,41,0,0,448,478,5,29,0,0,449,478,
        5,30,0,0,450,478,5,42,0,0,451,478,5,43,0,0,452,478,5,44,0,0,453,
        478,5,45,0,0,454,478,5,46,0,0,455,478,5,47,0,0,456,478,5,48,0,0,
        457,478,5,49,0,0,458,478,5,11,0,0,459,478,5,10,0,0,460,478,5,50,
        0,0,461,478,5,51,0,0,462,478,5,52,0,0,463,478,5,53,0,0,464,478,5,
        31,0,0,465,478,5,32,0,0,466,478,5,6,0,0,467,478,5,5,0,0,468,478,
        5,24,0,0,469,478,5,23,0,0,470,478,5,2,0,0,471,478,5,54,0,0,472,478,
        5,26,0,0,473,474,5,17,0,0,474,478,5,18,0,0,475,476,5,20,0,0,476,
        478,5,21,0,0,477,432,1,0,0,0,477,437,1,0,0,0,477,438,1,0,0,0,477,
        439,1,0,0,0,477,440,1,0,0,0,477,441,1,0,0,0,477,442,1,0,0,0,477,
        443,1,0,0,0,477,444,1,0,0,0,477,445,1,0,0,0,477,446,1,0,0,0,477,
        447,1,0,0,0,477,448,1,0,0,0,477,449,1,0,0,0,477,450,1,0,0,0,477,
        451,1,0,0,0,477,452,1,0,0,0,477,453,1,0,0,0,477,454,1,0,0,0,477,
        455,1,0,0,0,477,456,1,0,0,0,477,457,1,0,0,0,477,458,1,0,0,0,477,
        459,1,0,0,0,477,460,1,0,0,0,477,461,1,0,0,0,477,462,1,0,0,0,477,
        463,1,0,0,0,477,464,1,0,0,0,477,465,1,0,0,0,477,466,1,0,0,0,477,
        467,1,0,0,0,477,468,1,0,0,0,477,469,1,0,0,0,477,470,1,0,0,0,477,
        471,1,0,0,0,477,472,1,0,0,0,477,473,1,0,0,0,477,475,1,0,0,0,478,
        71,1,0,0,0,479,480,7,11,0,0,480,73,1,0,0,0,481,482,7,12,0,0,482,
        75,1,0,0,0,483,484,5,83,0,0,484,485,5,29,0,0,485,486,3,78,39,0,486,
        487,5,30,0,0,487,77,1,0,0,0,488,489,5,29,0,0,489,490,3,78,39,0,490,
        491,5,30,0,0,491,498,1,0,0,0,492,493,5,17,0,0,493,494,3,78,39,0,
        494,495,5,18,0,0,495,498,1,0,0,0,496,498,3,86,43,0,497,488,1,0,0,
        0,497,492,1,0,0,0,497,496,1,0,0,0,498,499,1,0,0,0,499,497,1,0,0,
        0,499,500,1,0,0,0,500,79,1,0,0,0,501,502,8,13,0,0,502,81,1,0,0,0,
        503,504,8,14,0,0,504,83,1,0,0,0,505,506,8,15,0,0,506,85,1,0,0,0,
        507,508,8,16,0,0,508,87,1,0,0,0,509,510,8,17,0,0,510,89,1,0,0,0,
        511,512,8,18,0,0,512,91,1,0,0,0,513,514,8,19,0,0,514,93,1,0,0,0,
        515,516,8,20,0,0,516,95,1,0,0,0,517,518,8,21,0,0,518,97,1,0,0,0,
        519,520,8,14,0,0,520,99,1,0,0,0,521,522,9,0,0,0,522,101,1,0,0,0,
        523,525,3,76,38,0,524,523,1,0,0,0,524,525,1,0,0,0,525,527,1,0,0,
        0,526,528,3,104,52,0,527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,
        0,0,529,530,3,124,62,0,530,532,3,106,53,0,531,533,3,116,58,0,532,
        531,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,3,114,57,0,535,
        103,1,0,0,0,536,538,3,64,32,0,537,536,1,0,0,0,538,541,1,0,0,0,539,
        537,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,539,1,0,0,0,542,
        543,3,184,92,0,543,547,1,0,0,0,544,546,3,66,33,0,545,544,1,0,0,0,
        546,549,1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,105,1,0,0,0,
        549,547,1,0,0,0,550,552,5,17,0,0,551,553,3,108,54,0,552,551,1,0,
        0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,558,5,18,0,0,555,557,5,73,
        0,0,556,555,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,
        0,0,559,562,1,0,0,0,560,558,1,0,0,0,561,563,3,126,63,0,562,561,1,
        0,0,0,562,563,1,0,0,0,563,107,1,0,0,0,564,569,3,110,55,0,565,566,
        5,2,0,0,566,568,3,110,55,0,567,565,1,0,0,0,568,571,1,0,0,0,569,567,
        1,0,0,0,569,570,1,0,0,0,570,574,1,0,0,0,571,569,1,0,0,0,572,573,
        5,2,0,0,573,575,5,55,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,578,
        1,0,0,0,576,578,5,69,0,0,577,564,1,0,0,0,577,576,1,0,0,0,578,109,
        1,0,0,0,579,580,3,188,94,0,580,581,3,112,56,0,581,585,1,0,0,0,582,
        585,3,188,94,0,583,585,3,112,56,0,584,579,1,0,0,0,584,582,1,0,0,
        0,584,583,1,0,0,0,585,111,1,0,0,0,586,588,3,202,101,0,587,586,1,
        0,0,0,587,588,1,0,0,0,588,594,1,0,0,0,589,590,5,17,0,0,590,591,3,
        112,56,0,591,592,5,18,0,0,592,595,1,0,0,0,593,595,3,190,95,0,594,
        589,1,0,0,0,594,593,1,0,0,0,595,597,1,0,0,0,596,598,3,164,82,0,597,
        596,1,0,0,0,597,598,1,0,0,0,598,113,1,0,0,0,599,600,5,87,0,0,600,
        601,6,57,-1,0,601,115,1,0,0,0,602,603,5,4,0,0,603,608,3,118,59,0,
        604,605,5,2,0,0,605,607,3,118,59,0,606,604,1,0,0,0,607,610,1,0,0,
        0,608,606,1,0,0,0,608,609,1,0,0,0,609,117,1,0,0,0,610,608,1,0,0,
        0,611,612,3,120,60,0,612,613,3,122,61,0,613,119,1,0,0,0,614,616,
        5,19,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,618,
        3,198,99,0,618,121,1,0,0,0,619,621,5,17,0,0,620,622,3,4,2,0,621,
        620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,5,18,0,0,624,
        123,1,0,0,0,625,626,5,17,0,0,626,627,3,124,62,0,627,628,5,18,0,0,
        628,633,1,0,0,0,629,633,3,198,99,0,630,631,5,82,0,0,631,633,3,70,
        35,0,632,625,1,0,0,0,632,629,1,0,0,0,632,630,1,0,0,0,633,125,1,0,
        0,0,634,635,5,77,0,0,635,636,5,17,0,0,636,637,3,128,64,0,637,638,
        5,18,0,0,638,127,1,0,0,0,639,641,3,80,40,0,640,639,1,0,0,0,641,644,
        1,0,0,0,642,640,1,0,0,0,642,643,1,0,0,0,643,656,1,0,0,0,644,642,
        1,0,0,0,645,646,5,17,0,0,646,647,3,128,64,0,647,651,5,18,0,0,648,
        650,3,80,40,0,649,648,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,
        652,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,654,645,1,0,0,0,655,
        658,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,129,1,0,0,0,658,
        656,1,0,0,0,659,666,3,134,67,0,660,666,3,138,69,0,661,662,3,136,
        68,0,662,663,6,65,-1,0,663,666,1,0,0,0,664,666,3,132,66,0,665,659,
        1,0,0,0,665,660,1,0,0,0,665,661,1,0,0,0,665,664,1,0,0,0,666,669,
        1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,131,1,0,0,0,669,667,
        1,0,0,0,670,679,3,140,70,0,671,679,3,142,71,0,672,679,3,144,72,0,
        673,679,3,152,76,0,674,679,3,154,77,0,675,679,3,166,83,0,676,679,
        3,156,78,0,677,679,3,100,50,0,678,670,1,0,0,0,678,671,1,0,0,0,678,
        672,1,0,0,0,678,673,1,0,0,0,678,674,1,0,0,0,678,675,1,0,0,0,678,
        676,1,0,0,0,678,677,1,0,0,0,679,133,1,0,0,0,680,681,5,89,0,0,681,
        135,1,0,0,0,682,683,5,90,0,0,683,137,1,0,0,0,684,685,5,91,0,0,685,
        139,1,0,0,0,686,687,5,87,0,0,687,141,1,0,0,0,688,689,5,88,0,0,689,
        143,1,0,0,0,690,691,3,146,73,0,691,145,1,0,0,0,692,730,5,75,0,0,
        693,694,5,76,0,0,694,695,5,17,0,0,695,696,3,194,97,0,696,697,5,18,
        0,0,697,730,1,0,0,0,698,699,5,57,0,0,699,700,5,17,0,0,700,701,3,
        158,79,0,701,702,5,18,0,0,702,730,1,0,0,0,703,730,5,58,0,0,704,705,
        5,64,0,0,705,706,5,17,0,0,706,707,3,158,79,0,707,708,5,18,0,0,708,
        730,1,0,0,0,709,710,5,59,0,0,710,713,5,17,0,0,711,714,3,150,75,0,
        712,714,5,1,0,0,713,711,1,0,0,0,713,712,1,0,0,0,714,716,1,0,0,0,
        715,717,3,158,79,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,
        0,718,720,5,1,0,0,719,721,3,4,2,0,720,719,1,0,0,0,720,721,1,0,0,
        0,721,722,1,0,0,0,722,730,5,18,0,0,723,730,5,65,0,0,724,725,5,60,
        0,0,725,726,5,17,0,0,726,727,3,158,79,0,727,728,5,18,0,0,728,730,
        1,0,0,0,729,692,1,0,0,0,729,693,1,0,0,0,729,698,1,0,0,0,729,703,
        1,0,0,0,729,704,1,0,0,0,729,709,1,0,0,0,729,723,1,0,0,0,729,724,
        1,0,0,0,730,147,1,0,0,0,731,732,5,65,0,0,732,733,3,132,66,0,733,
        734,5,60,0,0,734,735,5,17,0,0,735,736,3,4,2,0,736,737,5,18,0,0,737,
        149,1,0,0,0,738,743,3,166,83,0,739,740,3,4,2,0,740,741,5,1,0,0,741,
        743,1,0,0,0,742,738,1,0,0,0,742,739,1,0,0,0,743,151,1,0,0,0,744,
        745,5,61,0,0,745,758,5,1,0,0,746,747,5,63,0,0,747,758,5,1,0,0,748,
        749,5,66,0,0,749,750,3,198,99,0,750,751,5,1,0,0,751,758,1,0,0,0,
        752,754,5,67,0,0,753,755,3,4,2,0,754,753,1,0,0,0,754,755,1,0,0,0,
        755,756,1,0,0,0,756,758,5,1,0,0,757,744,1,0,0,0,757,746,1,0,0,0,
        757,748,1,0,0,0,757,752,1,0,0,0,758,153,1,0,0,0,759,761,5,62,0,0,
        760,759,1,0,0,0,760,761,1,0,0,0,761,765,1,0,0,0,762,766,3,198,99,
        0,763,766,3,200,100,0,764,766,5,96,0,0,765,762,1,0,0,0,765,763,1,
        0,0,0,765,764,1,0,0,0,766,767,1,0,0,0,767,768,5,4,0,0,768,155,1,
        0,0,0,769,771,3,4,2,0,770,769,1,0,0,0,770,771,1,0,0,0,771,772,1,
        0,0,0,772,773,5,1,0,0,773,157,1,0,0,0,774,781,3,4,2,0,775,776,3,
        184,92,0,776,777,3,162,81,0,777,778,5,41,0,0,778,779,3,6,3,0,779,
        781,1,0,0,0,780,774,1,0,0,0,780,775,1,0,0,0,781,159,1,0,0,0,782,
        783,3,162,81,0,783,785,5,17,0,0,784,786,3,4,2,0,785,784,1,0,0,0,
        785,786,1,0,0,0,786,787,1,0,0,0,787,788,5,18,0,0,788,795,1,0,0,0,
        789,790,3,162,81,0,790,791,5,41,0,0,791,792,3,172,86,0,792,795,1,
        0,0,0,793,795,3,162,81,0,794,782,1,0,0,0,794,789,1,0,0,0,794,793,
        1,0,0,0,795,161,1,0,0,0,796,798,3,202,101,0,797,796,1,0,0,0,797,
        798,1,0,0,0,798,799,1,0,0,0,799,801,3,198,99,0,800,802,3,164,82,
        0,801,800,1,0,0,0,801,802,1,0,0,0,802,163,1,0,0,0,803,805,5,20,0,
        0,804,806,3,8,4,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,
        0,807,810,5,21,0,0,808,810,3,192,96,0,809,803,1,0,0,0,809,808,1,
        0,0,0,810,165,1,0,0,0,811,813,5,68,0,0,812,811,1,0,0,0,812,813,1,
        0,0,0,813,815,1,0,0,0,814,816,3,76,38,0,815,814,1,0,0,0,815,816,
        1,0,0,0,816,817,1,0,0,0,817,818,3,168,84,0,818,167,1,0,0,0,819,821,
        3,176,88,0,820,822,3,170,85,0,821,820,1,0,0,0,821,822,1,0,0,0,822,
        827,1,0,0,0,823,824,3,184,92,0,824,825,3,170,85,0,825,827,1,0,0,
        0,826,819,1,0,0,0,826,823,1,0,0,0,827,169,1,0,0,0,828,833,3,160,
        80,0,829,830,5,2,0,0,830,832,3,160,80,0,831,829,1,0,0,0,832,835,
        1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,836,1,0,0,0,835,833,
        1,0,0,0,836,837,5,1,0,0,837,171,1,0,0,0,838,844,3,6,3,0,839,840,
        5,87,0,0,840,841,3,174,87,0,841,842,5,88,0,0,842,844,1,0,0,0,843,
        838,1,0,0,0,843,839,1,0,0,0,844,173,1,0,0,0,845,850,3,172,86,0,846,
        847,5,2,0,0,847,849,3,172,86,0,848,846,1,0,0,0,849,852,1,0,0,0,850,
        848,1,0,0,0,850,851,1,0,0,0,851,175,1,0,0,0,852,850,1,0,0,0,853,
        855,5,85,0,0,854,856,3,178,89,0,855,854,1,0,0,0,855,856,1,0,0,0,
        856,858,1,0,0,0,857,859,3,180,90,0,858,857,1,0,0,0,858,859,1,0,0,
        0,859,860,1,0,0,0,860,861,5,87,0,0,861,862,6,88,-1,0,862,177,1,0,
        0,0,863,864,3,198,99,0,864,179,1,0,0,0,865,866,5,4,0,0,866,871,3,
        182,91,0,867,868,5,2,0,0,868,870,3,182,91,0,869,867,1,0,0,0,870,
        873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,181,1,0,0,0,873,
        871,1,0,0,0,874,876,5,74,0,0,875,874,1,0,0,0,875,876,1,0,0,0,876,
        878,1,0,0,0,877,879,3,68,34,0,878,877,1,0,0,0,878,879,1,0,0,0,879,
        880,1,0,0,0,880,881,3,198,99,0,881,183,1,0,0,0,882,884,5,73,0,0,
        883,882,1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,0,0,
        886,889,1,0,0,0,887,885,1,0,0,0,888,890,7,22,0,0,889,888,1,0,0,0,
        889,890,1,0,0,0,890,891,1,0,0,0,891,896,3,186,93,0,892,893,5,29,
        0,0,893,894,3,78,39,0,894,895,5,30,0,0,895,897,1,0,0,0,896,892,1,
        0,0,0,896,897,1,0,0,0,897,908,1,0,0,0,898,899,5,19,0,0,899,904,3,
        186,93,0,900,901,5,29,0,0,901,902,3,78,39,0,902,903,5,30,0,0,903,
        905,1,0,0,0,904,900,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,
        898,1,0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,
        912,1,0,0,0,910,908,1,0,0,0,911,913,5,73,0,0,912,911,1,0,0,0,912,
        913,1,0,0,0,913,917,1,0,0,0,914,917,5,70,0,0,915,917,5,71,0,0,916,
        885,1,0,0,0,916,914,1,0,0,0,916,915,1,0,0,0,917,185,1,0,0,0,918,
        920,7,23,0,0,919,918,1,0,0,0,920,921,1,0,0,0,921,919,1,0,0,0,921,
        922,1,0,0,0,922,187,1,0,0,0,923,925,7,24,0,0,924,923,1,0,0,0,924,
        925,1,0,0,0,925,926,1,0,0,0,926,927,3,184,92,0,927,189,1,0,0,0,928,
        929,3,198,99,0,929,191,1,0,0,0,930,931,5,17,0,0,931,932,5,69,0,0,
        932,946,5,18,0,0,933,942,5,17,0,0,934,939,3,194,97,0,935,936,5,2,
        0,0,936,938,3,194,97,0,937,935,1,0,0,0,938,941,1,0,0,0,939,937,1,
        0,0,0,939,940,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,0,942,934,1,
        0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,946,5,18,0,0,945,930,1,
        0,0,0,945,933,1,0,0,0,946,193,1,0,0,0,947,948,3,188,94,0,948,949,
        3,196,98,0,949,195,1,0,0,0,950,952,3,202,101,0,951,950,1,0,0,0,951,
        952,1,0,0,0,952,960,1,0,0,0,953,954,5,17,0,0,954,955,3,196,98,0,
        955,956,5,18,0,0,956,961,1,0,0,0,957,959,3,190,95,0,958,957,1,0,
        0,0,958,959,1,0,0,0,959,961,1,0,0,0,960,953,1,0,0,0,960,958,1,0,
        0,0,961,963,1,0,0,0,962,964,3,164,82,0,963,962,1,0,0,0,963,964,1,
        0,0,0,964,197,1,0,0,0,965,970,5,86,0,0,966,967,5,19,0,0,967,969,
        5,86,0,0,968,966,1,0,0,0,969,972,1,0,0,0,970,968,1,0,0,0,970,971,
        1,0,0,0,971,975,1,0,0,0,972,970,1,0,0,0,973,975,3,68,34,0,974,965,
        1,0,0,0,974,973,1,0,0,0,975,199,1,0,0,0,976,977,7,25,0,0,977,201,
        1,0,0,0,978,980,3,66,33,0,979,981,5,56,0,0,980,979,1,0,0,0,980,981,
        1,0,0,0,981,983,1,0,0,0,982,978,1,0,0,0,983,984,1,0,0,0,984,982,
        1,0,0,0,984,985,1,0,0,0,985,203,1,0,0,0,986,988,3,96,48,0,987,986,
        1,0,0,0,988,991,1,0,0,0,989,987,1,0,0,0,989,990,1,0,0,0,990,1014,
        1,0,0,0,991,989,1,0,0,0,992,993,5,87,0,0,993,994,3,206,103,0,994,
        995,5,88,0,0,995,1005,1,0,0,0,996,997,5,17,0,0,997,998,3,206,103,
        0,998,999,5,18,0,0,999,1005,1,0,0,0,1000,1001,5,20,0,0,1001,1002,
        3,206,103,0,1002,1003,5,21,0,0,1003,1005,1,0,0,0,1004,992,1,0,0,
        0,1004,996,1,0,0,0,1004,1000,1,0,0,0,1005,1009,1,0,0,0,1006,1008,
        3,96,48,0,1007,1006,1,0,0,0,1008,1011,1,0,0,0,1009,1007,1,0,0,0,
        1009,1010,1,0,0,0,1010,1013,1,0,0,0,1011,1009,1,0,0,0,1012,1004,
        1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,
        205,1,0,0,0,1016,1014,1,0,0,0,1017,1019,3,98,49,0,1018,1017,1,0,
        0,0,1019,1022,1,0,0,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,1045,
        1,0,0,0,1022,1020,1,0,0,0,1023,1024,5,87,0,0,1024,1025,3,206,103,
        0,1025,1026,5,88,0,0,1026,1036,1,0,0,0,1027,1028,5,17,0,0,1028,1029,
        3,206,103,0,1029,1030,5,18,0,0,1030,1036,1,0,0,0,1031,1032,5,20,
        0,0,1032,1033,3,206,103,0,1033,1034,5,21,0,0,1034,1036,1,0,0,0,1035,
        1023,1,0,0,0,1035,1027,1,0,0,0,1035,1031,1,0,0,0,1036,1040,1,0,0,
        0,1037,1039,3,98,49,0,1038,1037,1,0,0,0,1039,1042,1,0,0,0,1040,1038,
        1,0,0,0,1040,1041,1,0,0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1043,
        1035,1,0,0,0,1044,1047,1,0,0,0,1045,1043,1,0,0,0,1045,1046,1,0,0,
        0,1046,207,1,0,0,0,1047,1045,1,0,0,0,1048,1050,3,90,45,0,1049,1048,
        1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,
        1065,1,0,0,0,1053,1051,1,0,0,0,1054,1055,5,20,0,0,1055,1056,3,208,
        104,0,1056,1060,5,21,0,0,1057,1059,3,90,45,0,1058,1057,1,0,0,0,1059,
        1062,1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1064,1,0,0,
        0,1062,1060,1,0,0,0,1063,1054,1,0,0,0,1064,1067,1,0,0,0,1065,1063,
        1,0,0,0,1065,1066,1,0,0,0,1066,209,1,0,0,0,1067,1065,1,0,0,0,121,
        212,214,225,231,240,245,250,255,260,265,271,277,282,287,292,300,
        306,316,319,325,330,336,340,353,361,384,390,395,397,405,408,418,
        435,477,497,499,524,527,532,539,547,552,558,562,569,574,577,584,
        587,594,597,608,615,621,632,642,651,656,665,667,678,713,716,720,
        729,742,754,757,760,765,770,780,785,794,797,801,805,809,812,815,
        821,826,833,843,850,855,858,871,875,878,885,889,896,904,908,912,
        916,921,924,939,942,945,951,958,960,963,970,974,980,984,989,1004,
        1009,1014,1020,1035,1040,1045,1051,1060,1065
    ]

class ModuleParser ( Parser ):

    grammarFileName = "Module.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'?'", "':'", "'||'", "'&&'", 
                     "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", 
                     "'*'", "'/'", "'%'", "'('", "')'", "'::'", "'['", "']'", 
                     "'sizeof'", "'--'", "'++'", "'.'", "'->'", "'~'", "'!'", 
                     "'<'", "'>'", "'<='", "'>='", "'inline'", "'explicit'", 
                     "'friend'", "'static'", "'public'", "'private'", "'protected'", 
                     "'delete'", "'='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'^='", "'&='", "'|='", "'>>='", "'<<='", "'=='", 
                     "'!='", "'->*'", "'...'", "'restrict'", "'if'", "'else'", 
                     "'for'", "'while'", "'break'", "'case'", "'continue'", 
                     "'switch'", "'do'", "'goto'", "'return'", "'typedef'", 
                     "'void'", "'unsigned'", "'signed'", "'long'", "<INVALID>", 
                     "'virtual'", "'try'", "'catch'", "'throw'", "'using'", 
                     "'namespace'", "'auto'", "'register'", "'operator'", 
                     "'template'", "'new'", "<INVALID>", "<INVALID>", "'{'", 
                     "'}'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "IF", "ELSE", "FOR", "WHILE", "BREAK", 
                      "CASE", "CONTINUE", "SWITCH", "DO", "GOTO", "RETURN", 
                      "TYPEDEF", "VOID", "UNSIGNED", "SIGNED", "LONG", "CV_QUALIFIER", 
                      "VIRTUAL", "TRY", "CATCH", "THROW", "USING", "NAMESPACE", 
                      "AUTO", "REGISTER", "OPERATOR", "TEMPLATE", "NEW", 
                      "CLASS_KEY", "ALPHA_NUMERIC", "OPENING_CURLY", "CLOSING_CURLY", 
                      "PRE_IF", "PRE_ELSE", "PRE_ENDIF", "HEX_LITERAL", 
                      "DECIMAL_LITERAL", "OCTAL_LITERAL", "FLOATING_POINT_LITERAL", 
                      "CHAR", "STRING", "COMMENT", "WHITESPACE", "CPPCOMMENT", 
                      "OTHER" ]

    RULE_code = 0
    RULE_using_directive = 1
    RULE_expr = 2
    RULE_assign_expr = 3
    RULE_conditional_expression = 4
    RULE_or_expression = 5
    RULE_and_expression = 6
    RULE_inclusive_or_expression = 7
    RULE_exclusive_or_expression = 8
    RULE_bit_and_expression = 9
    RULE_equality_expression = 10
    RULE_relational_expression = 11
    RULE_shift_expression = 12
    RULE_additive_expression = 13
    RULE_multiplicative_expression = 14
    RULE_cast_expression = 15
    RULE_cast_target = 16
    RULE_unary_expression = 17
    RULE_new_expression = 18
    RULE_unary_op_and_cast_expr = 19
    RULE_sizeof_expression = 20
    RULE_sizeof = 21
    RULE_sizeof_operand = 22
    RULE_sizeof_operand2 = 23
    RULE_inc_dec = 24
    RULE_postfix_expression = 25
    RULE_function_argument_list = 26
    RULE_function_argument = 27
    RULE_primary_expression = 28
    RULE_unary_operator = 29
    RULE_relational_operator = 30
    RULE_constant = 31
    RULE_function_decl_specifiers = 32
    RULE_ptr_operator = 33
    RULE_access_specifier = 34
    RULE_operator = 35
    RULE_assignment_operator = 36
    RULE_equality_operator = 37
    RULE_template_decl_start = 38
    RULE_template_param_list = 39
    RULE_no_brackets = 40
    RULE_no_brackets_curlies_or_squares = 41
    RULE_no_brackets_or_semicolon = 42
    RULE_no_angle_brackets_or_brackets = 43
    RULE_no_curlies = 44
    RULE_no_squares = 45
    RULE_no_squares_or_semicolon = 46
    RULE_no_comma_or_semicolon = 47
    RULE_assign_water = 48
    RULE_assign_water_l2 = 49
    RULE_water = 50
    RULE_function_def = 51
    RULE_return_type = 52
    RULE_function_param_list = 53
    RULE_parameter_decl_clause = 54
    RULE_parameter_decl = 55
    RULE_parameter_id = 56
    RULE_compound_statement = 57
    RULE_ctor_list = 58
    RULE_ctor_initializer = 59
    RULE_initializer_id = 60
    RULE_ctor_expr = 61
    RULE_function_name = 62
    RULE_exception_specification = 63
    RULE_type_id_list = 64
    RULE_statements = 65
    RULE_statement = 66
    RULE_pre_opener = 67
    RULE_pre_else = 68
    RULE_pre_closer = 69
    RULE_opening_curly = 70
    RULE_closing_curly = 71
    RULE_block_starter = 72
    RULE_selection_or_iteration = 73
    RULE_do_statement1 = 74
    RULE_for_init_statement = 75
    RULE_jump_statement = 76
    RULE_label = 77
    RULE_expr_statement = 78
    RULE_condition = 79
    RULE_init_declarator = 80
    RULE_declarator = 81
    RULE_type_suffix = 82
    RULE_simple_decl = 83
    RULE_var_decl = 84
    RULE_init_declarator_list = 85
    RULE_initializer = 86
    RULE_initializer_list = 87
    RULE_class_def = 88
    RULE_class_name = 89
    RULE_base_classes = 90
    RULE_base_class = 91
    RULE_type_name = 92
    RULE_base_type = 93
    RULE_param_decl_specifiers = 94
    RULE_parameter_name = 95
    RULE_param_type_list = 96
    RULE_param_type = 97
    RULE_param_type_id = 98
    RULE_identifier = 99
    RULE_number = 100
    RULE_ptrs = 101
    RULE_assign_expr_w_ = 102
    RULE_assign_expr_w__l2 = 103
    RULE_constant_expr_w_ = 104

    ruleNames =  [ "code", "using_directive", "expr", "assign_expr", "conditional_expression", 
                   "or_expression", "and_expression", "inclusive_or_expression", 
                   "exclusive_or_expression", "bit_and_expression", "equality_expression", 
                   "relational_expression", "shift_expression", "additive_expression", 
                   "multiplicative_expression", "cast_expression", "cast_target", 
                   "unary_expression", "new_expression", "unary_op_and_cast_expr", 
                   "sizeof_expression", "sizeof", "sizeof_operand", "sizeof_operand2", 
                   "inc_dec", "postfix_expression", "function_argument_list", 
                   "function_argument", "primary_expression", "unary_operator", 
                   "relational_operator", "constant", "function_decl_specifiers", 
                   "ptr_operator", "access_specifier", "operator", "assignment_operator", 
                   "equality_operator", "template_decl_start", "template_param_list", 
                   "no_brackets", "no_brackets_curlies_or_squares", "no_brackets_or_semicolon", 
                   "no_angle_brackets_or_brackets", "no_curlies", "no_squares", 
                   "no_squares_or_semicolon", "no_comma_or_semicolon", "assign_water", 
                   "assign_water_l2", "water", "function_def", "return_type", 
                   "function_param_list", "parameter_decl_clause", "parameter_decl", 
                   "parameter_id", "compound_statement", "ctor_list", "ctor_initializer", 
                   "initializer_id", "ctor_expr", "function_name", "exception_specification", 
                   "type_id_list", "statements", "statement", "pre_opener", 
                   "pre_else", "pre_closer", "opening_curly", "closing_curly", 
                   "block_starter", "selection_or_iteration", "do_statement1", 
                   "for_init_statement", "jump_statement", "label", "expr_statement", 
                   "condition", "init_declarator", "declarator", "type_suffix", 
                   "simple_decl", "var_decl", "init_declarator_list", "initializer", 
                   "initializer_list", "class_def", "class_name", "base_classes", 
                   "base_class", "type_name", "base_type", "param_decl_specifiers", 
                   "parameter_name", "param_type_list", "param_type", "param_type_id", 
                   "identifier", "number", "ptrs", "assign_expr_w_", "assign_expr_w__l2", 
                   "constant_expr_w_" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    IF=57
    ELSE=58
    FOR=59
    WHILE=60
    BREAK=61
    CASE=62
    CONTINUE=63
    SWITCH=64
    DO=65
    GOTO=66
    RETURN=67
    TYPEDEF=68
    VOID=69
    UNSIGNED=70
    SIGNED=71
    LONG=72
    CV_QUALIFIER=73
    VIRTUAL=74
    TRY=75
    CATCH=76
    THROW=77
    USING=78
    NAMESPACE=79
    AUTO=80
    REGISTER=81
    OPERATOR=82
    TEMPLATE=83
    NEW=84
    CLASS_KEY=85
    ALPHA_NUMERIC=86
    OPENING_CURLY=87
    CLOSING_CURLY=88
    PRE_IF=89
    PRE_ELSE=90
    PRE_ENDIF=91
    HEX_LITERAL=92
    DECIMAL_LITERAL=93
    OCTAL_LITERAL=94
    FLOATING_POINT_LITERAL=95
    CHAR=96
    STRING=97
    COMMENT=98
    WHITESPACE=99
    CPPCOMMENT=100
    OTHER=101

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    def skipToEndOfObject(self):
        CurlyStack = []
        o = object()
        t = self._input.LA(1)

        while t  and not (not CurlyStack and t == self.CLOSING_CURLY):
            if t == self.PRE_ELSE:
                ifdefStack = []
                self.consume()
                t = self._input.LA(1)

                while t  and not (not ifdefStack and t == self.PRE_ENDIF):
                    if t == self.PRE_IF:
                        ifdefStack.append(o)
                    elif t == self.PRE_ENDIF:
                        ifdefStack.pop()
                    self.consume()
                    t = self._input.LA(1)

            if t == self.OPENING_CURLY:
                CurlyStack.append(o)
            elif t == self.CLOSING_CURLY:
                CurlyStack.pop()

            self.consume()
            t = self._input.LA(1)

        if t :
            self.consume()

        return True

    def preProcSkipToEnd(self):
        CurlyStack = []
        o = object()
        t = self._input.LA(1)

        while t and not (not CurlyStack and t == self.PRE_ENDIF):
            if t == self.PRE_IF:
                CurlyStack.append(o)
            elif t == self.PRE_ENDIF:
                CurlyStack.pop()

            self.consume()
            t = self._input.LA(1)

        if t:
            self.consume()

        return True



    class CodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Function_defContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Function_defContext,i)


        def water(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.WaterContext)
            else:
                return self.getTypedRuleContext(ModuleParser.WaterContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode" ):
                listener.enterCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode" ):
                listener.exitCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCode" ):
                return visitor.visitCode(self)
            else:
                return visitor.visitChildren(self)




    def code(self):

        localctx = ModuleParser.CodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_code)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274877906943) != 0):
                self.state = 212
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 210
                    self.function_def()
                    pass

                elif la_ == 2:
                    self.state = 211
                    self.water()
                    pass


                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(ModuleParser.USING, 0)

        def NAMESPACE(self):
            return self.getToken(ModuleParser.NAMESPACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_using_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directive" ):
                listener.enterUsing_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directive" ):
                listener.exitUsing_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_directive" ):
                return visitor.visitUsing_directive(self)
            else:
                return visitor.visitChildren(self)




    def using_directive(self):

        localctx = ModuleParser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_using_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(ModuleParser.USING)
            self.state = 218
            self.match(ModuleParser.NAMESPACE)
            self.state = 219
            self.identifier()
            self.state = 220
            self.match(ModuleParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_expr(self):
            return self.getTypedRuleContext(ModuleParser.Assign_exprContext,0)


        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = ModuleParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.assign_expr()
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 223
                self.match(ModuleParser.T__1)
                self.state = 224
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_expression(self):
            return self.getTypedRuleContext(ModuleParser.Conditional_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(ModuleParser.Assignment_operatorContext,0)


        def assign_expr(self):
            return self.getTypedRuleContext(ModuleParser.Assign_exprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_assign_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_expr" ):
                listener.enterAssign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_expr" ):
                listener.exitAssign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_expr" ):
                return visitor.visitAssign_expr(self)
            else:
                return visitor.visitChildren(self)




    def assign_expr(self):

        localctx = ModuleParser.Assign_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_assign_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.conditional_expression()
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4501400604114944) != 0):
                self.state = 228
                self.assignment_operator()
                self.state = 229
                self.assign_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_conditional_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NormOrContext(Conditional_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Conditional_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def or_expression(self):
            return self.getTypedRuleContext(ModuleParser.Or_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormOr" ):
                listener.enterNormOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormOr" ):
                listener.exitNormOr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormOr" ):
                return visitor.visitNormOr(self)
            else:
                return visitor.visitChildren(self)


    class CndExprContext(Conditional_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Conditional_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def or_expression(self):
            return self.getTypedRuleContext(ModuleParser.Or_expressionContext,0)

        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)

        def conditional_expression(self):
            return self.getTypedRuleContext(ModuleParser.Conditional_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCndExpr" ):
                listener.enterCndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCndExpr" ):
                listener.exitCndExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCndExpr" ):
                return visitor.visitCndExpr(self)
            else:
                return visitor.visitChildren(self)



    def conditional_expression(self):

        localctx = ModuleParser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_conditional_expression)
        try:
            self.state = 240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                localctx = ModuleParser.NormOrContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 233
                self.or_expression()
                pass

            elif la_ == 2:
                localctx = ModuleParser.CndExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.or_expression()

                self.state = 235
                self.match(ModuleParser.T__2)
                self.state = 236
                self.expr()
                self.state = 237
                self.match(ModuleParser.T__3)
                self.state = 238
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self):
            return self.getTypedRuleContext(ModuleParser.And_expressionContext,0)


        def or_expression(self):
            return self.getTypedRuleContext(ModuleParser.Or_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_expression" ):
                listener.enterOr_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_expression" ):
                listener.exitOr_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_expression" ):
                return visitor.visitOr_expression(self)
            else:
                return visitor.visitChildren(self)




    def or_expression(self):

        localctx = ModuleParser.Or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.and_expression()
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 243
                self.match(ModuleParser.T__4)
                self.state = 244
                self.or_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self):
            return self.getTypedRuleContext(ModuleParser.Inclusive_or_expressionContext,0)


        def and_expression(self):
            return self.getTypedRuleContext(ModuleParser.And_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expression" ):
                return visitor.visitAnd_expression(self)
            else:
                return visitor.visitChildren(self)




    def and_expression(self):

        localctx = ModuleParser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.inclusive_or_expression()
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 248
                self.match(ModuleParser.T__5)
                self.state = 249
                self.and_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self):
            return self.getTypedRuleContext(ModuleParser.Exclusive_or_expressionContext,0)


        def inclusive_or_expression(self):
            return self.getTypedRuleContext(ModuleParser.Inclusive_or_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusive_or_expression" ):
                return visitor.visitInclusive_or_expression(self)
            else:
                return visitor.visitChildren(self)




    def inclusive_or_expression(self):

        localctx = ModuleParser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_inclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.exclusive_or_expression()
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 253
                self.match(ModuleParser.T__6)
                self.state = 254
                self.inclusive_or_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_and_expression(self):
            return self.getTypedRuleContext(ModuleParser.Bit_and_expressionContext,0)


        def exclusive_or_expression(self):
            return self.getTypedRuleContext(ModuleParser.Exclusive_or_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusive_or_expression" ):
                return visitor.visitExclusive_or_expression(self)
            else:
                return visitor.visitChildren(self)




    def exclusive_or_expression(self):

        localctx = ModuleParser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_exclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.bit_and_expression()
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 258
                self.match(ModuleParser.T__7)
                self.state = 259
                self.exclusive_or_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self):
            return self.getTypedRuleContext(ModuleParser.Equality_expressionContext,0)


        def bit_and_expression(self):
            return self.getTypedRuleContext(ModuleParser.Bit_and_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_bit_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_and_expression" ):
                listener.enterBit_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_and_expression" ):
                listener.exitBit_and_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_and_expression" ):
                return visitor.visitBit_and_expression(self)
            else:
                return visitor.visitChildren(self)




    def bit_and_expression(self):

        localctx = ModuleParser.Bit_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_bit_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.equality_expression()
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 263
                self.match(ModuleParser.T__8)
                self.state = 264
                self.bit_and_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self):
            return self.getTypedRuleContext(ModuleParser.Relational_expressionContext,0)


        def equality_operator(self):
            return self.getTypedRuleContext(ModuleParser.Equality_operatorContext,0)


        def equality_expression(self):
            return self.getTypedRuleContext(ModuleParser.Equality_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquality_expression" ):
                return visitor.visitEquality_expression(self)
            else:
                return visitor.visitChildren(self)




    def equality_expression(self):

        localctx = ModuleParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.relational_expression()
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52 or _la==53:
                self.state = 268
                self.equality_operator()
                self.state = 269
                self.equality_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self):
            return self.getTypedRuleContext(ModuleParser.Shift_expressionContext,0)


        def relational_operator(self):
            return self.getTypedRuleContext(ModuleParser.Relational_operatorContext,0)


        def relational_expression(self):
            return self.getTypedRuleContext(ModuleParser.Relational_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_expression" ):
                return visitor.visitRelational_expression(self)
            else:
                return visitor.visitChildren(self)




    def relational_expression(self):

        localctx = ModuleParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.shift_expression()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8053063680) != 0):
                self.state = 274
                self.relational_operator()
                self.state = 275
                self.relational_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self):
            return self.getTypedRuleContext(ModuleParser.Additive_expressionContext,0)


        def shift_expression(self):
            return self.getTypedRuleContext(ModuleParser.Shift_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expression" ):
                return visitor.visitShift_expression(self)
            else:
                return visitor.visitChildren(self)




    def shift_expression(self):

        localctx = ModuleParser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_shift_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.additive_expression()
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10 or _la==11:
                self.state = 280
                _la = self._input.LA(1)
                if not(_la==10 or _la==11):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 281
                self.shift_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self):
            return self.getTypedRuleContext(ModuleParser.Multiplicative_expressionContext,0)


        def additive_expression(self):
            return self.getTypedRuleContext(ModuleParser.Additive_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditive_expression" ):
                return visitor.visitAdditive_expression(self)
            else:
                return visitor.visitChildren(self)




    def additive_expression(self):

        localctx = ModuleParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.multiplicative_expression()
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==13:
                self.state = 285
                _la = self._input.LA(1)
                if not(_la==12 or _la==13):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 286
                self.additive_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplicative_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(ModuleParser.Cast_expressionContext,0)


        def multiplicative_expression(self):
            return self.getTypedRuleContext(ModuleParser.Multiplicative_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicative_expression" ):
                return visitor.visitMultiplicative_expression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicative_expression(self):

        localctx = ModuleParser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.cast_expression()
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 114688) != 0):
                self.state = 290
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 114688) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 291
                self.multiplicative_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_target(self):
            return self.getTypedRuleContext(ModuleParser.Cast_targetContext,0)


        def cast_expression(self):
            return self.getTypedRuleContext(ModuleParser.Cast_expressionContext,0)


        def unary_expression(self):
            return self.getTypedRuleContext(ModuleParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_expression" ):
                return visitor.visitCast_expression(self)
            else:
                return visitor.visitChildren(self)




    def cast_expression(self):

        localctx = ModuleParser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_cast_expression)
        try:
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 294
                self.match(ModuleParser.T__16)
                self.state = 295
                self.cast_target()
                self.state = 296
                self.match(ModuleParser.T__17)
                self.state = 297
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self.unary_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(ModuleParser.Type_nameContext,0)


        def ptr_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Ptr_operatorContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Ptr_operatorContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_cast_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_target" ):
                listener.enterCast_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_target" ):
                listener.exitCast_target(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_target" ):
                return visitor.visitCast_target(self)
            else:
                return visitor.visitChildren(self)




    def cast_target(self):

        localctx = ModuleParser.Cast_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_cast_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.type_name()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9 or _la==14:
                self.state = 303
                self.ptr_operator()
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inc_dec(self):
            return self.getTypedRuleContext(ModuleParser.Inc_decContext,0)


        def cast_expression(self):
            return self.getTypedRuleContext(ModuleParser.Cast_expressionContext,0)


        def unary_op_and_cast_expr(self):
            return self.getTypedRuleContext(ModuleParser.Unary_op_and_cast_exprContext,0)


        def sizeof_expression(self):
            return self.getTypedRuleContext(ModuleParser.Sizeof_expressionContext,0)


        def new_expression(self):
            return self.getTypedRuleContext(ModuleParser.New_expressionContext,0)


        def postfix_expression(self):
            return self.getTypedRuleContext(ModuleParser.Postfix_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_expression" ):
                return visitor.visitUnary_expression(self)
            else:
                return visitor.visitChildren(self)




    def unary_expression(self):

        localctx = ModuleParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_unary_expression)
        try:
            self.state = 316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.inc_dec()
                self.state = 310
                self.cast_expression()
                pass
            elif token in [9, 12, 13, 14, 27, 28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 312
                self.unary_op_and_cast_expr()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 3)
                self.state = 313
                self.sizeof_expression()
                pass
            elif token in [19, 84]:
                self.enterOuterAlt(localctx, 4)
                self.state = 314
                self.new_expression()
                pass
            elif token in [17, 37, 38, 39, 86, 92, 93, 94, 95, 96, 97]:
                self.enterOuterAlt(localctx, 5)
                self.state = 315
                self.postfix_expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(ModuleParser.NEW, 0)

        def type_name(self):
            return self.getTypedRuleContext(ModuleParser.Type_nameContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(ModuleParser.Conditional_expressionContext,0)


        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_expression" ):
                listener.enterNew_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_expression" ):
                listener.exitNew_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNew_expression" ):
                return visitor.visitNew_expression(self)
            else:
                return visitor.visitChildren(self)




    def new_expression(self):

        localctx = ModuleParser.New_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_new_expression)
        self._la = 0 # Token type
        try:
            self.state = 340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 318
                    self.match(ModuleParser.T__18)


                self.state = 321
                self.match(ModuleParser.NEW)
                self.state = 322
                self.type_name()
                self.state = 323
                self.match(ModuleParser.T__19)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 16133) != 0):
                    self.state = 324
                    self.conditional_expression()


                self.state = 327
                self.match(ModuleParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 329
                    self.match(ModuleParser.T__18)


                self.state = 332
                self.match(ModuleParser.NEW)
                self.state = 333
                self.type_name()
                self.state = 334
                self.match(ModuleParser.T__16)
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 16133) != 0):
                    self.state = 335
                    self.expr()


                self.state = 338
                self.match(ModuleParser.T__17)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_op_and_cast_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_operator(self):
            return self.getTypedRuleContext(ModuleParser.Unary_operatorContext,0)


        def cast_expression(self):
            return self.getTypedRuleContext(ModuleParser.Cast_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_unary_op_and_cast_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_op_and_cast_expr" ):
                listener.enterUnary_op_and_cast_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_op_and_cast_expr" ):
                listener.exitUnary_op_and_cast_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_op_and_cast_expr" ):
                return visitor.visitUnary_op_and_cast_expr(self)
            else:
                return visitor.visitChildren(self)




    def unary_op_and_cast_expr(self):

        localctx = ModuleParser.Unary_op_and_cast_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unary_op_and_cast_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.unary_operator()
            self.state = 343
            self.cast_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sizeof_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sizeof(self):
            return self.getTypedRuleContext(ModuleParser.SizeofContext,0)


        def sizeof_operand(self):
            return self.getTypedRuleContext(ModuleParser.Sizeof_operandContext,0)


        def sizeof_operand2(self):
            return self.getTypedRuleContext(ModuleParser.Sizeof_operand2Context,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_sizeof_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeof_expression" ):
                listener.enterSizeof_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeof_expression" ):
                listener.exitSizeof_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeof_expression" ):
                return visitor.visitSizeof_expression(self)
            else:
                return visitor.visitChildren(self)




    def sizeof_expression(self):

        localctx = ModuleParser.Sizeof_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_sizeof_expression)
        try:
            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 345
                self.sizeof()
                self.state = 346
                self.match(ModuleParser.T__16)
                self.state = 347
                self.sizeof_operand()
                self.state = 348
                self.match(ModuleParser.T__17)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 350
                self.sizeof()
                self.state = 351
                self.sizeof_operand2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeofContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_sizeof

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeof" ):
                listener.enterSizeof(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeof" ):
                listener.exitSizeof(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeof" ):
                return visitor.visitSizeof(self)
            else:
                return visitor.visitChildren(self)




    def sizeof(self):

        localctx = ModuleParser.SizeofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sizeof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(ModuleParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sizeof_operandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(ModuleParser.Type_nameContext,0)


        def ptr_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Ptr_operatorContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Ptr_operatorContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_sizeof_operand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeof_operand" ):
                listener.enterSizeof_operand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeof_operand" ):
                listener.exitSizeof_operand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeof_operand" ):
                return visitor.visitSizeof_operand(self)
            else:
                return visitor.visitChildren(self)




    def sizeof_operand(self):

        localctx = ModuleParser.Sizeof_operandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sizeof_operand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.type_name()
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9 or _la==14:
                self.state = 358
                self.ptr_operator()
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sizeof_operand2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(ModuleParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_sizeof_operand2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeof_operand2" ):
                listener.enterSizeof_operand2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeof_operand2" ):
                listener.exitSizeof_operand2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeof_operand2" ):
                return visitor.visitSizeof_operand2(self)
            else:
                return visitor.visitChildren(self)




    def sizeof_operand2(self):

        localctx = ModuleParser.Sizeof_operand2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sizeof_operand2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inc_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_inc_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInc_dec" ):
                listener.enterInc_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInc_dec" ):
                listener.exitInc_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInc_dec" ):
                return visitor.visitInc_dec(self)
            else:
                return visitor.visitChildren(self)




    def inc_dec(self):

        localctx = ModuleParser.Inc_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_inc_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            _la = self._input.LA(1)
            if not(_la==23 or _la==24):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_postfix_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MemberAccessContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(ModuleParser.Postfix_expressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)

        def TEMPLATE(self):
            return self.getToken(ModuleParser.TEMPLATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class IncDecOpContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(ModuleParser.Postfix_expressionContext,0)

        def inc_dec(self):
            return self.getTypedRuleContext(ModuleParser.Inc_decContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncDecOp" ):
                listener.enterIncDecOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncDecOp" ):
                listener.exitIncDecOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncDecOp" ):
                return visitor.visitIncDecOp(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryOnlyContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary_expression(self):
            return self.getTypedRuleContext(ModuleParser.Primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryOnly" ):
                listener.enterPrimaryOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryOnly" ):
                listener.exitPrimaryOnly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryOnly" ):
                return visitor.visitPrimaryOnly(self)
            else:
                return visitor.visitChildren(self)


    class FuncCallContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(ModuleParser.Postfix_expressionContext,0)

        def function_argument_list(self):
            return self.getTypedRuleContext(ModuleParser.Function_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncCall" ):
                listener.enterFuncCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncCall" ):
                listener.exitFuncCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncCall" ):
                return visitor.visitFuncCall(self)
            else:
                return visitor.visitChildren(self)


    class ArrayIndexingContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(ModuleParser.Postfix_expressionContext,0)

        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayIndexing" ):
                listener.enterArrayIndexing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayIndexing" ):
                listener.exitArrayIndexing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayIndexing" ):
                return visitor.visitArrayIndexing(self)
            else:
                return visitor.visitChildren(self)


    class PtrMemberAccessContext(Postfix_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Postfix_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_expression(self):
            return self.getTypedRuleContext(ModuleParser.Postfix_expressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)

        def TEMPLATE(self):
            return self.getToken(ModuleParser.TEMPLATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrMemberAccess" ):
                listener.enterPtrMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrMemberAccess" ):
                listener.exitPtrMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrMemberAccess" ):
                return visitor.visitPtrMemberAccess(self)
            else:
                return visitor.visitChildren(self)



    def postfix_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ModuleParser.Postfix_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_postfix_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = ModuleParser.PrimaryOnlyContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 369
            self.primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 397
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 395
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        localctx = ModuleParser.ArrayIndexingContext(self, ModuleParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 371
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 372
                        self.match(ModuleParser.T__19)
                        self.state = 373
                        self.expr()
                        self.state = 374
                        self.match(ModuleParser.T__20)
                        pass

                    elif la_ == 2:
                        localctx = ModuleParser.FuncCallContext(self, ModuleParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 376
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 377
                        self.match(ModuleParser.T__16)
                        self.state = 378
                        self.function_argument_list()
                        self.state = 379
                        self.match(ModuleParser.T__17)
                        pass

                    elif la_ == 3:
                        localctx = ModuleParser.MemberAccessContext(self, ModuleParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 381
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 382
                        self.match(ModuleParser.T__24)
                        self.state = 384
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==83:
                            self.state = 383
                            self.match(ModuleParser.TEMPLATE)


                        self.state = 386
                        self.identifier()
                        pass

                    elif la_ == 4:
                        localctx = ModuleParser.PtrMemberAccessContext(self, ModuleParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 387
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 388
                        self.match(ModuleParser.T__25)
                        self.state = 390
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==83:
                            self.state = 389
                            self.match(ModuleParser.TEMPLATE)


                        self.state = 392
                        self.identifier()
                        pass

                    elif la_ == 5:
                        localctx = ModuleParser.IncDecOpContext(self, ModuleParser.Postfix_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 393
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 394
                        self.inc_dec()
                        pass

             
                self.state = 399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Function_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Function_argumentContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Function_argumentContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_function_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_list" ):
                listener.enterFunction_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_list" ):
                listener.exitFunction_argument_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_list" ):
                return visitor.visitFunction_argument_list(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_list(self):

        localctx = ModuleParser.Function_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_function_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 16133) != 0):
                self.state = 400
                self.function_argument()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 401
                    self.match(ModuleParser.T__1)
                    self.state = 402
                    self.function_argument()
                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_expr(self):
            return self.getTypedRuleContext(ModuleParser.Assign_exprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument" ):
                return visitor.visitFunction_argument(self)
            else:
                return visitor.visitChildren(self)




    def function_argument(self):

        localctx = ModuleParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_function_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.assign_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def constant(self):
            return self.getTypedRuleContext(ModuleParser.ConstantContext,0)


        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_expression" ):
                return visitor.visitPrimary_expression(self)
            else:
                return visitor.visitChildren(self)




    def primary_expression(self):

        localctx = ModuleParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_primary_expression)
        try:
            self.state = 418
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37, 38, 39, 86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 412
                self.identifier()
                pass
            elif token in [92, 93, 94, 95, 96, 97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 413
                self.constant()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 414
                self.match(ModuleParser.T__16)
                self.state = 415
                self.expr()
                self.state = 416
                self.match(ModuleParser.T__17)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator" ):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator(self):

        localctx = ModuleParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 402682368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_operator" ):
                return visitor.visitRelational_operator(self)
            else:
                return visitor.visitChildren(self)




    def relational_operator(self):

        localctx = ModuleParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_relational_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8053063680) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_LITERAL(self):
            return self.getToken(ModuleParser.HEX_LITERAL, 0)

        def OCTAL_LITERAL(self):
            return self.getToken(ModuleParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ModuleParser.DECIMAL_LITERAL, 0)

        def STRING(self):
            return self.getToken(ModuleParser.STRING, 0)

        def CHAR(self):
            return self.getToken(ModuleParser.CHAR, 0)

        def FLOATING_POINT_LITERAL(self):
            return self.getToken(ModuleParser.FLOATING_POINT_LITERAL, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = ModuleParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            _la = self._input.LA(1)
            if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_decl_specifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIRTUAL(self):
            return self.getToken(ModuleParser.VIRTUAL, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_function_decl_specifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_decl_specifiers" ):
                listener.enterFunction_decl_specifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_decl_specifiers" ):
                listener.exitFunction_decl_specifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_decl_specifiers" ):
                return visitor.visitFunction_decl_specifiers(self)
            else:
                return visitor.visitChildren(self)




    def function_decl_specifiers(self):

        localctx = ModuleParser.Function_decl_specifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_function_decl_specifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            _la = self._input.LA(1)
            if not(((((_la - 33)) & ~0x3f) == 0 and ((1 << (_la - 33)) & 2199023255567) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ptr_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_ptr_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtr_operator" ):
                listener.enterPtr_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtr_operator" ):
                listener.exitPtr_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtr_operator" ):
                return visitor.visitPtr_operator(self)
            else:
                return visitor.visitChildren(self)




    def ptr_operator(self):

        localctx = ModuleParser.Ptr_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ptr_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            _la = self._input.LA(1)
            if not(_la==9 or _la==14):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_access_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_specifier" ):
                listener.enterAccess_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_specifier" ):
                listener.exitAccess_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccess_specifier" ):
                return visitor.visitAccess_specifier(self)
            else:
                return visitor.visitChildren(self)




    def access_specifier(self):

        localctx = ModuleParser.Access_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_access_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 962072674304) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(ModuleParser.NEW, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperator" ):
                return visitor.visitOperator(self)
            else:
                return visitor.visitChildren(self)




    def operator(self):

        localctx = ModuleParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.state = 477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                _la = self._input.LA(1)
                if not(_la==40 or _la==84):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 433
                    self.match(ModuleParser.T__19)
                    self.state = 434
                    self.match(ModuleParser.T__20)


                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.match(ModuleParser.T__11)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 438
                self.match(ModuleParser.T__12)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 439
                self.match(ModuleParser.T__13)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 5)
                self.state = 440
                self.match(ModuleParser.T__14)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 6)
                self.state = 441
                self.match(ModuleParser.T__15)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 7)
                self.state = 442
                self.match(ModuleParser.T__7)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 8)
                self.state = 443
                self.match(ModuleParser.T__8)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 9)
                self.state = 444
                self.match(ModuleParser.T__6)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 10)
                self.state = 445
                self.match(ModuleParser.T__26)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 11)
                self.state = 446
                self.match(ModuleParser.T__27)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 12)
                self.state = 447
                self.match(ModuleParser.T__40)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 13)
                self.state = 448
                self.match(ModuleParser.T__28)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 14)
                self.state = 449
                self.match(ModuleParser.T__29)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 15)
                self.state = 450
                self.match(ModuleParser.T__41)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 16)
                self.state = 451
                self.match(ModuleParser.T__42)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 17)
                self.state = 452
                self.match(ModuleParser.T__43)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 18)
                self.state = 453
                self.match(ModuleParser.T__44)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 19)
                self.state = 454
                self.match(ModuleParser.T__45)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 20)
                self.state = 455
                self.match(ModuleParser.T__46)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 21)
                self.state = 456
                self.match(ModuleParser.T__47)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 22)
                self.state = 457
                self.match(ModuleParser.T__48)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 23)
                self.state = 458
                self.match(ModuleParser.T__10)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 24)
                self.state = 459
                self.match(ModuleParser.T__9)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 25)
                self.state = 460
                self.match(ModuleParser.T__49)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 26)
                self.state = 461
                self.match(ModuleParser.T__50)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 27)
                self.state = 462
                self.match(ModuleParser.T__51)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 28)
                self.state = 463
                self.match(ModuleParser.T__52)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 29)
                self.state = 464
                self.match(ModuleParser.T__30)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 30)
                self.state = 465
                self.match(ModuleParser.T__31)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 31)
                self.state = 466
                self.match(ModuleParser.T__5)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 32)
                self.state = 467
                self.match(ModuleParser.T__4)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 33)
                self.state = 468
                self.match(ModuleParser.T__23)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 34)
                self.state = 469
                self.match(ModuleParser.T__22)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 35)
                self.state = 470
                self.match(ModuleParser.T__1)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 36)
                self.state = 471
                self.match(ModuleParser.T__53)
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 37)
                self.state = 472
                self.match(ModuleParser.T__25)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 38)
                self.state = 473
                self.match(ModuleParser.T__16)
                self.state = 474
                self.match(ModuleParser.T__17)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 39)
                self.state = 475
                self.match(ModuleParser.T__19)
                self.state = 476
                self.match(ModuleParser.T__20)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_operator" ):
                return visitor.visitAssignment_operator(self)
            else:
                return visitor.visitChildren(self)




    def assignment_operator(self):

        localctx = ModuleParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4501400604114944) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_equality_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_operator" ):
                listener.enterEquality_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_operator" ):
                listener.exitEquality_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquality_operator" ):
                return visitor.visitEquality_operator(self)
            else:
                return visitor.visitChildren(self)




    def equality_operator(self):

        localctx = ModuleParser.Equality_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_equality_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            _la = self._input.LA(1)
            if not(_la==52 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Template_decl_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPLATE(self):
            return self.getToken(ModuleParser.TEMPLATE, 0)

        def template_param_list(self):
            return self.getTypedRuleContext(ModuleParser.Template_param_listContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_template_decl_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplate_decl_start" ):
                listener.enterTemplate_decl_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplate_decl_start" ):
                listener.exitTemplate_decl_start(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplate_decl_start" ):
                return visitor.visitTemplate_decl_start(self)
            else:
                return visitor.visitChildren(self)




    def template_decl_start(self):

        localctx = ModuleParser.Template_decl_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_template_decl_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(ModuleParser.TEMPLATE)
            self.state = 484
            self.match(ModuleParser.T__28)
            self.state = 485
            self.template_param_list()
            self.state = 486
            self.match(ModuleParser.T__29)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Template_param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def no_angle_brackets_or_brackets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.No_angle_brackets_or_bracketsContext)
            else:
                return self.getTypedRuleContext(ModuleParser.No_angle_brackets_or_bracketsContext,i)


        def template_param_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Template_param_listContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Template_param_listContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_template_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplate_param_list" ):
                listener.enterTemplate_param_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplate_param_list" ):
                listener.exitTemplate_param_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplate_param_list" ):
                return visitor.visitTemplate_param_list(self)
            else:
                return visitor.visitChildren(self)




    def template_param_list(self):

        localctx = ModuleParser.Template_param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_template_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 497
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 488
                    self.match(ModuleParser.T__28)
                    self.state = 489
                    self.template_param_list()
                    self.state = 490
                    self.match(ModuleParser.T__29)
                    pass
                elif token in [17]:
                    self.state = 492
                    self.match(ModuleParser.T__16)
                    self.state = 493
                    self.template_param_list()
                    self.state = 494
                    self.match(ModuleParser.T__17)
                    pass
                elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]:
                    self.state = 496
                    self.no_angle_brackets_or_brackets()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 499 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1074003970) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274877906943) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_bracketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_no_brackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_brackets" ):
                listener.enterNo_brackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_brackets" ):
                listener.exitNo_brackets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_brackets" ):
                return visitor.visitNo_brackets(self)
            else:
                return visitor.visitChildren(self)




    def no_brackets(self):

        localctx = ModuleParser.No_bracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_no_brackets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            _la = self._input.LA(1)
            if _la <= 0 or _la==17 or _la==18:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_brackets_curlies_or_squaresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(ModuleParser.OPENING_CURLY, 0)

        def CLOSING_CURLY(self):
            return self.getToken(ModuleParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_no_brackets_curlies_or_squares

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_brackets_curlies_or_squares" ):
                listener.enterNo_brackets_curlies_or_squares(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_brackets_curlies_or_squares" ):
                listener.exitNo_brackets_curlies_or_squares(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_brackets_curlies_or_squares" ):
                return visitor.visitNo_brackets_curlies_or_squares(self)
            else:
                return visitor.visitChildren(self)




    def no_brackets_curlies_or_squares(self):

        localctx = ModuleParser.No_brackets_curlies_or_squaresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_no_brackets_curlies_or_squares)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 3538944) != 0) or _la==87 or _la==88:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_brackets_or_semicolonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_no_brackets_or_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_brackets_or_semicolon" ):
                listener.enterNo_brackets_or_semicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_brackets_or_semicolon" ):
                listener.exitNo_brackets_or_semicolon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_brackets_or_semicolon" ):
                return visitor.visitNo_brackets_or_semicolon(self)
            else:
                return visitor.visitChildren(self)




    def no_brackets_or_semicolon(self):

        localctx = ModuleParser.No_brackets_or_semicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_no_brackets_or_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 393218) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_angle_brackets_or_bracketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_no_angle_brackets_or_brackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_angle_brackets_or_brackets" ):
                listener.enterNo_angle_brackets_or_brackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_angle_brackets_or_brackets" ):
                listener.exitNo_angle_brackets_or_brackets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_angle_brackets_or_brackets" ):
                return visitor.visitNo_angle_brackets_or_brackets(self)
            else:
                return visitor.visitChildren(self)




    def no_angle_brackets_or_brackets(self):

        localctx = ModuleParser.No_angle_brackets_or_bracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_no_angle_brackets_or_brackets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 1611005952) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_curliesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(ModuleParser.OPENING_CURLY, 0)

        def CLOSING_CURLY(self):
            return self.getToken(ModuleParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_no_curlies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_curlies" ):
                listener.enterNo_curlies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_curlies" ):
                listener.exitNo_curlies(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_curlies" ):
                return visitor.visitNo_curlies(self)
            else:
                return visitor.visitChildren(self)




    def no_curlies(self):

        localctx = ModuleParser.No_curliesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_no_curlies)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            _la = self._input.LA(1)
            if _la <= 0 or _la==87 or _la==88:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_squaresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_no_squares

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_squares" ):
                listener.enterNo_squares(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_squares" ):
                listener.exitNo_squares(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_squares" ):
                return visitor.visitNo_squares(self)
            else:
                return visitor.visitChildren(self)




    def no_squares(self):

        localctx = ModuleParser.No_squaresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_no_squares)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            _la = self._input.LA(1)
            if _la <= 0 or _la==20 or _la==21:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_squares_or_semicolonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_no_squares_or_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_squares_or_semicolon" ):
                listener.enterNo_squares_or_semicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_squares_or_semicolon" ):
                listener.exitNo_squares_or_semicolon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_squares_or_semicolon" ):
                return visitor.visitNo_squares_or_semicolon(self)
            else:
                return visitor.visitChildren(self)




    def no_squares_or_semicolon(self):

        localctx = ModuleParser.No_squares_or_semicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_no_squares_or_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 3145730) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_comma_or_semicolonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_no_comma_or_semicolon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_comma_or_semicolon" ):
                listener.enterNo_comma_or_semicolon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_comma_or_semicolon" ):
                listener.exitNo_comma_or_semicolon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_comma_or_semicolon" ):
                return visitor.visitNo_comma_or_semicolon(self)
            else:
                return visitor.visitChildren(self)




    def no_comma_or_semicolon(self):

        localctx = ModuleParser.No_comma_or_semicolonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_no_comma_or_semicolon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            _la = self._input.LA(1)
            if _la <= 0 or _la==1 or _la==2:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_waterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(ModuleParser.OPENING_CURLY, 0)

        def CLOSING_CURLY(self):
            return self.getToken(ModuleParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_assign_water

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_water" ):
                listener.enterAssign_water(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_water" ):
                listener.exitAssign_water(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_water" ):
                return visitor.visitAssign_water(self)
            else:
                return visitor.visitChildren(self)




    def assign_water(self):

        localctx = ModuleParser.Assign_waterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_assign_water)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 3538950) != 0) or _la==87 or _la==88:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_water_l2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(ModuleParser.OPENING_CURLY, 0)

        def CLOSING_CURLY(self):
            return self.getToken(ModuleParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_assign_water_l2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_water_l2" ):
                listener.enterAssign_water_l2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_water_l2" ):
                listener.exitAssign_water_l2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_water_l2" ):
                return visitor.visitAssign_water_l2(self)
            else:
                return visitor.visitChildren(self)




    def assign_water_l2(self):

        localctx = ModuleParser.Assign_water_l2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_assign_water_l2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 3538944) != 0) or _la==87 or _la==88:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_water

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWater" ):
                listener.enterWater(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWater" ):
                listener.exitWater(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWater" ):
                return visitor.visitWater(self)
            else:
                return visitor.visitChildren(self)




    def water(self):

        localctx = ModuleParser.WaterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_water)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.matchWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(ModuleParser.Function_nameContext,0)


        def function_param_list(self):
            return self.getTypedRuleContext(ModuleParser.Function_param_listContext,0)


        def compound_statement(self):
            return self.getTypedRuleContext(ModuleParser.Compound_statementContext,0)


        def template_decl_start(self):
            return self.getTypedRuleContext(ModuleParser.Template_decl_startContext,0)


        def return_type(self):
            return self.getTypedRuleContext(ModuleParser.Return_typeContext,0)


        def ctor_list(self):
            return self.getTypedRuleContext(ModuleParser.Ctor_listContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_function_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_def" ):
                listener.enterFunction_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_def" ):
                listener.exitFunction_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_def" ):
                return visitor.visitFunction_def(self)
            else:
                return visitor.visitChildren(self)




    def function_def(self):

        localctx = ModuleParser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_function_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 523
                self.template_decl_start()


            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 526
                self.return_type()


            self.state = 529
            self.function_name()
            self.state = 530
            self.function_param_list()
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 531
                self.ctor_list()


            self.state = 534
            self.compound_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(ModuleParser.Type_nameContext,0)


        def ptr_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Ptr_operatorContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Ptr_operatorContext,i)


        def function_decl_specifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Function_decl_specifiersContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Function_decl_specifiersContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_type" ):
                return visitor.visitReturn_type(self)
            else:
                return visitor.visitChildren(self)




    def return_type(self):

        localctx = ModuleParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_return_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 33)) & ~0x3f) == 0 and ((1 << (_la - 33)) & 2199023255567) != 0):
                self.state = 536
                self.function_decl_specifiers()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 542
            self.type_name()
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9 or _la==14:
                self.state = 544
                self.ptr_operator()
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_decl_clause(self):
            return self.getTypedRuleContext(ModuleParser.Parameter_decl_clauseContext,0)


        def CV_QUALIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.CV_QUALIFIER)
            else:
                return self.getToken(ModuleParser.CV_QUALIFIER, i)

        def exception_specification(self):
            return self.getTypedRuleContext(ModuleParser.Exception_specificationContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_function_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_param_list" ):
                listener.enterFunction_param_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_param_list" ):
                listener.exitFunction_param_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_param_list" ):
                return visitor.visitFunction_param_list(self)
            else:
                return visitor.visitChildren(self)




    def function_param_list(self):

        localctx = ModuleParser.Function_param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_function_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.match(ModuleParser.T__16)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962072822272) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 202783) != 0):
                self.state = 551
                self.parameter_decl_clause()


            self.state = 554
            self.match(ModuleParser.T__17)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==73:
                self.state = 555
                self.match(ModuleParser.CV_QUALIFIER)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 561
                self.exception_specification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_decl_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Parameter_declContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Parameter_declContext,i)


        def VOID(self):
            return self.getToken(ModuleParser.VOID, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_parameter_decl_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_decl_clause" ):
                listener.enterParameter_decl_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_decl_clause" ):
                listener.exitParameter_decl_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_decl_clause" ):
                return visitor.visitParameter_decl_clause(self)
            else:
                return visitor.visitChildren(self)




    def parameter_decl_clause(self):

        localctx = ModuleParser.Parameter_decl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_parameter_decl_clause)
        self._la = 0 # Token type
        try:
            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.parameter_decl()
                self.state = 569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 565
                        self.match(ModuleParser.T__1)
                        self.state = 566
                        self.parameter_decl() 
                    self.state = 571
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 572
                    self.match(ModuleParser.T__1)
                    self.state = 573
                    self.match(ModuleParser.T__54)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.match(ModuleParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_decl_specifiers(self):
            return self.getTypedRuleContext(ModuleParser.Param_decl_specifiersContext,0)


        def parameter_id(self):
            return self.getTypedRuleContext(ModuleParser.Parameter_idContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_parameter_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_decl" ):
                listener.enterParameter_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_decl" ):
                listener.exitParameter_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_decl" ):
                return visitor.visitParameter_decl(self)
            else:
                return visitor.visitChildren(self)




    def parameter_decl(self):

        localctx = ModuleParser.Parameter_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_parameter_decl)
        try:
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.param_decl_specifiers()
                self.state = 580
                self.parameter_id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 582
                self.param_decl_specifiers()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 583
                self.parameter_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_id(self):
            return self.getTypedRuleContext(ModuleParser.Parameter_idContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(ModuleParser.Parameter_nameContext,0)


        def ptrs(self):
            return self.getTypedRuleContext(ModuleParser.PtrsContext,0)


        def type_suffix(self):
            return self.getTypedRuleContext(ModuleParser.Type_suffixContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_parameter_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_id" ):
                listener.enterParameter_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_id" ):
                listener.exitParameter_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_id" ):
                return visitor.visitParameter_id(self)
            else:
                return visitor.visitChildren(self)




    def parameter_id(self):

        localctx = ModuleParser.Parameter_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_parameter_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==14:
                self.state = 586
                self.ptrs()


            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 589
                self.match(ModuleParser.T__16)
                self.state = 590
                self.parameter_id()
                self.state = 591
                self.match(ModuleParser.T__17)
                pass
            elif token in [37, 38, 39, 86]:
                self.state = 593
                self.parameter_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17 or _la==20:
                self.state = 596
                self.type_suffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(ModuleParser.OPENING_CURLY, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_compound_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_statement" ):
                listener.enterCompound_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_statement" ):
                listener.exitCompound_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_statement" ):
                return visitor.visitCompound_statement(self)
            else:
                return visitor.visitChildren(self)




    def compound_statement(self):

        localctx = ModuleParser.Compound_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_compound_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(ModuleParser.OPENING_CURLY)
            self.skipToEndOfObject(); 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ctor_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ctor_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Ctor_initializerContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Ctor_initializerContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_ctor_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtor_list" ):
                listener.enterCtor_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtor_list" ):
                listener.exitCtor_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtor_list" ):
                return visitor.visitCtor_list(self)
            else:
                return visitor.visitChildren(self)




    def ctor_list(self):

        localctx = ModuleParser.Ctor_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_ctor_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(ModuleParser.T__3)
            self.state = 603
            self.ctor_initializer()
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 604
                self.match(ModuleParser.T__1)
                self.state = 605
                self.ctor_initializer()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ctor_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer_id(self):
            return self.getTypedRuleContext(ModuleParser.Initializer_idContext,0)


        def ctor_expr(self):
            return self.getTypedRuleContext(ModuleParser.Ctor_exprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_ctor_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtor_initializer" ):
                listener.enterCtor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtor_initializer" ):
                listener.exitCtor_initializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtor_initializer" ):
                return visitor.visitCtor_initializer(self)
            else:
                return visitor.visitChildren(self)




    def ctor_initializer(self):

        localctx = ModuleParser.Ctor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_ctor_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.initializer_id()
            self.state = 612
            self.ctor_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_initializer_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_id" ):
                listener.enterInitializer_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_id" ):
                listener.exitInitializer_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer_id" ):
                return visitor.visitInitializer_id(self)
            else:
                return visitor.visitChildren(self)




    def initializer_id(self):

        localctx = ModuleParser.Initializer_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_initializer_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 614
                self.match(ModuleParser.T__18)


            self.state = 617
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ctor_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_ctor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtor_expr" ):
                listener.enterCtor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtor_expr" ):
                listener.exitCtor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtor_expr" ):
                return visitor.visitCtor_expr(self)
            else:
                return visitor.visitChildren(self)




    def ctor_expr(self):

        localctx = ModuleParser.Ctor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_ctor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(ModuleParser.T__16)
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 16133) != 0):
                self.state = 620
                self.expr()


            self.state = 623
            self.match(ModuleParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(ModuleParser.Function_nameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def OPERATOR(self):
            return self.getToken(ModuleParser.OPERATOR, 0)

        def operator(self):
            return self.getTypedRuleContext(ModuleParser.OperatorContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = ModuleParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_function_name)
        try:
            self.state = 632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self.match(ModuleParser.T__16)
                self.state = 626
                self.function_name()
                self.state = 627
                self.match(ModuleParser.T__17)
                pass
            elif token in [37, 38, 39, 86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                self.identifier()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 630
                self.match(ModuleParser.OPERATOR)
                self.state = 631
                self.operator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(ModuleParser.THROW, 0)

        def type_id_list(self):
            return self.getTypedRuleContext(ModuleParser.Type_id_listContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_exception_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_specification" ):
                listener.enterException_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_specification" ):
                listener.exitException_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_specification" ):
                return visitor.visitException_specification(self)
            else:
                return visitor.visitChildren(self)




    def exception_specification(self):

        localctx = ModuleParser.Exception_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_exception_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(ModuleParser.THROW)
            self.state = 635
            self.match(ModuleParser.T__16)
            self.state = 636
            self.type_id_list()
            self.state = 637
            self.match(ModuleParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_id_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def no_brackets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.No_bracketsContext)
            else:
                return self.getTypedRuleContext(ModuleParser.No_bracketsContext,i)


        def type_id_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Type_id_listContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Type_id_listContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_type_id_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_id_list" ):
                listener.enterType_id_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_id_list" ):
                listener.exitType_id_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_id_list" ):
                return visitor.visitType_id_list(self)
            else:
                return visitor.visitChildren(self)




    def type_id_list(self):

        localctx = ModuleParser.Type_id_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_type_id_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -393218) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274877906943) != 0):
                self.state = 639
                self.no_brackets()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==17:
                self.state = 645
                self.match(ModuleParser.T__16)
                self.state = 646
                self.type_id_list()
                self.state = 647
                self.match(ModuleParser.T__17)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -393218) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274877906943) != 0):
                    self.state = 648
                    self.no_brackets()
                    self.state = 653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_opener(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Pre_openerContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Pre_openerContext,i)


        def pre_closer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Pre_closerContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Pre_closerContext,i)


        def pre_else(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Pre_elseContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Pre_elseContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.StatementContext)
            else:
                return self.getTypedRuleContext(ModuleParser.StatementContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = ModuleParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274877906943) != 0):
                self.state = 665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 659
                    self.pre_opener()
                    pass

                elif la_ == 2:
                    self.state = 660
                    self.pre_closer()
                    pass

                elif la_ == 3:
                    self.state = 661
                    self.pre_else()
                    self.preProcSkipToEnd(); 
                    pass

                elif la_ == 4:
                    self.state = 664
                    self.statement()
                    pass


                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opening_curly(self):
            return self.getTypedRuleContext(ModuleParser.Opening_curlyContext,0)


        def closing_curly(self):
            return self.getTypedRuleContext(ModuleParser.Closing_curlyContext,0)


        def block_starter(self):
            return self.getTypedRuleContext(ModuleParser.Block_starterContext,0)


        def jump_statement(self):
            return self.getTypedRuleContext(ModuleParser.Jump_statementContext,0)


        def label(self):
            return self.getTypedRuleContext(ModuleParser.LabelContext,0)


        def simple_decl(self):
            return self.getTypedRuleContext(ModuleParser.Simple_declContext,0)


        def expr_statement(self):
            return self.getTypedRuleContext(ModuleParser.Expr_statementContext,0)


        def water(self):
            return self.getTypedRuleContext(ModuleParser.WaterContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = ModuleParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_statement)
        try:
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.opening_curly()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.closing_curly()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 672
                self.block_starter()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 673
                self.jump_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 674
                self.label()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 675
                self.simple_decl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 676
                self.expr_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 677
                self.water()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_openerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRE_IF(self):
            return self.getToken(ModuleParser.PRE_IF, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_pre_opener

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_opener" ):
                listener.enterPre_opener(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_opener" ):
                listener.exitPre_opener(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_opener" ):
                return visitor.visitPre_opener(self)
            else:
                return visitor.visitChildren(self)




    def pre_opener(self):

        localctx = ModuleParser.Pre_openerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pre_opener)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(ModuleParser.PRE_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRE_ELSE(self):
            return self.getToken(ModuleParser.PRE_ELSE, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_pre_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_else" ):
                listener.enterPre_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_else" ):
                listener.exitPre_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_else" ):
                return visitor.visitPre_else(self)
            else:
                return visitor.visitChildren(self)




    def pre_else(self):

        localctx = ModuleParser.Pre_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pre_else)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(ModuleParser.PRE_ELSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_closerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRE_ENDIF(self):
            return self.getToken(ModuleParser.PRE_ENDIF, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_pre_closer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_closer" ):
                listener.enterPre_closer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_closer" ):
                listener.exitPre_closer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_closer" ):
                return visitor.visitPre_closer(self)
            else:
                return visitor.visitChildren(self)




    def pre_closer(self):

        localctx = ModuleParser.Pre_closerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_pre_closer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(ModuleParser.PRE_ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opening_curlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENING_CURLY(self):
            return self.getToken(ModuleParser.OPENING_CURLY, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_opening_curly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpening_curly" ):
                listener.enterOpening_curly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpening_curly" ):
                listener.exitOpening_curly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpening_curly" ):
                return visitor.visitOpening_curly(self)
            else:
                return visitor.visitChildren(self)




    def opening_curly(self):

        localctx = ModuleParser.Opening_curlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_opening_curly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(ModuleParser.OPENING_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closing_curlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSING_CURLY(self):
            return self.getToken(ModuleParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_closing_curly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosing_curly" ):
                listener.enterClosing_curly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosing_curly" ):
                listener.exitClosing_curly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosing_curly" ):
                return visitor.visitClosing_curly(self)
            else:
                return visitor.visitChildren(self)




    def closing_curly(self):

        localctx = ModuleParser.Closing_curlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_closing_curly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(ModuleParser.CLOSING_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_starterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selection_or_iteration(self):
            return self.getTypedRuleContext(ModuleParser.Selection_or_iterationContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_block_starter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_starter" ):
                listener.enterBlock_starter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_starter" ):
                listener.exitBlock_starter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_starter" ):
                return visitor.visitBlock_starter(self)
            else:
                return visitor.visitChildren(self)




    def block_starter(self):

        localctx = ModuleParser.Block_starterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_block_starter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.selection_or_iteration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_or_iterationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_selection_or_iteration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Try_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(ModuleParser.TRY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_statement" ):
                return visitor.visitTry_statement(self)
            else:
                return visitor.visitChildren(self)


    class If_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(ModuleParser.IF, 0)
        def condition(self):
            return self.getTypedRuleContext(ModuleParser.ConditionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)


    class Catch_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CATCH(self):
            return self.getToken(ModuleParser.CATCH, 0)
        def param_type(self):
            return self.getTypedRuleContext(ModuleParser.Param_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_statement" ):
                listener.enterCatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_statement" ):
                listener.exitCatch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatch_statement" ):
                return visitor.visitCatch_statement(self)
            else:
                return visitor.visitChildren(self)


    class For_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(ModuleParser.FOR, 0)
        def for_init_statement(self):
            return self.getTypedRuleContext(ModuleParser.For_init_statementContext,0)

        def condition(self):
            return self.getTypedRuleContext(ModuleParser.ConditionContext,0)

        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_statement" ):
                return visitor.visitFor_statement(self)
            else:
                return visitor.visitChildren(self)


    class Else_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(ModuleParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_statement" ):
                listener.enterElse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_statement" ):
                listener.exitElse_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_statement" ):
                return visitor.visitElse_statement(self)
            else:
                return visitor.visitChildren(self)


    class Switch_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SWITCH(self):
            return self.getToken(ModuleParser.SWITCH, 0)
        def condition(self):
            return self.getTypedRuleContext(ModuleParser.ConditionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_statement" ):
                return visitor.visitSwitch_statement(self)
            else:
                return visitor.visitChildren(self)


    class Do_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DO(self):
            return self.getToken(ModuleParser.DO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_statement" ):
                listener.enterDo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_statement" ):
                listener.exitDo_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_statement" ):
                return visitor.visitDo_statement(self)
            else:
                return visitor.visitChildren(self)


    class While_statementContext(Selection_or_iterationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Selection_or_iterationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(ModuleParser.WHILE, 0)
        def condition(self):
            return self.getTypedRuleContext(ModuleParser.ConditionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_statement" ):
                return visitor.visitWhile_statement(self)
            else:
                return visitor.visitChildren(self)



    def selection_or_iteration(self):

        localctx = ModuleParser.Selection_or_iterationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_selection_or_iteration)
        self._la = 0 # Token type
        try:
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75]:
                localctx = ModuleParser.Try_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 692
                self.match(ModuleParser.TRY)
                pass
            elif token in [76]:
                localctx = ModuleParser.Catch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self.match(ModuleParser.CATCH)
                self.state = 694
                self.match(ModuleParser.T__16)
                self.state = 695
                self.param_type()
                self.state = 696
                self.match(ModuleParser.T__17)
                pass
            elif token in [57]:
                localctx = ModuleParser.If_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 698
                self.match(ModuleParser.IF)
                self.state = 699
                self.match(ModuleParser.T__16)
                self.state = 700
                self.condition()
                self.state = 701
                self.match(ModuleParser.T__17)
                pass
            elif token in [58]:
                localctx = ModuleParser.Else_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 703
                self.match(ModuleParser.ELSE)
                pass
            elif token in [64]:
                localctx = ModuleParser.Switch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 704
                self.match(ModuleParser.SWITCH)
                self.state = 705
                self.match(ModuleParser.T__16)
                self.state = 706
                self.condition()
                self.state = 707
                self.match(ModuleParser.T__17)
                pass
            elif token in [59]:
                localctx = ModuleParser.For_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 709
                self.match(ModuleParser.FOR)
                self.state = 710
                self.match(ModuleParser.T__16)
                self.state = 713
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9, 12, 13, 14, 17, 19, 22, 23, 24, 27, 28, 37, 38, 39, 68, 69, 70, 71, 72, 73, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97]:
                    self.state = 711
                    self.for_init_statement()
                    pass
                elif token in [1]:
                    self.state = 712
                    self.match(ModuleParser.T__0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 528711711) != 0):
                    self.state = 715
                    self.condition()


                self.state = 718
                self.match(ModuleParser.T__0)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 16133) != 0):
                    self.state = 719
                    self.expr()


                self.state = 722
                self.match(ModuleParser.T__17)
                pass
            elif token in [65]:
                localctx = ModuleParser.Do_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 723
                self.match(ModuleParser.DO)
                pass
            elif token in [60]:
                localctx = ModuleParser.While_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 724
                self.match(ModuleParser.WHILE)
                self.state = 725
                self.match(ModuleParser.T__16)
                self.state = 726
                self.condition()
                self.state = 727
                self.match(ModuleParser.T__17)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_statement1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(ModuleParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(ModuleParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(ModuleParser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_do_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_statement1" ):
                listener.enterDo_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_statement1" ):
                listener.exitDo_statement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_statement1" ):
                return visitor.visitDo_statement1(self)
            else:
                return visitor.visitChildren(self)




    def do_statement1(self):

        localctx = ModuleParser.Do_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_do_statement1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(ModuleParser.DO)
            self.state = 732
            self.statement()
            self.state = 733
            self.match(ModuleParser.WHILE)
            self.state = 734
            self.match(ModuleParser.T__16)
            self.state = 735
            self.expr()
            self.state = 736
            self.match(ModuleParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_init_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_decl(self):
            return self.getTypedRuleContext(ModuleParser.Simple_declContext,0)


        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_for_init_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_init_statement" ):
                listener.enterFor_init_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_init_statement" ):
                listener.exitFor_init_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_init_statement" ):
                return visitor.visitFor_init_statement(self)
            else:
                return visitor.visitChildren(self)




    def for_init_statement(self):

        localctx = ModuleParser.For_init_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_for_init_statement)
        try:
            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.simple_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.expr()
                self.state = 740
                self.match(ModuleParser.T__0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Jump_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_jump_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BreakStatementContext(Jump_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Jump_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(ModuleParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)


    class ContinueStatementContext(Jump_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Jump_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(ModuleParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)


    class ReturnStatementContext(Jump_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Jump_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(ModuleParser.RETURN, 0)
        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)


    class GotoStatementContext(Jump_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Jump_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(ModuleParser.GOTO, 0)
        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoStatement" ):
                return visitor.visitGotoStatement(self)
            else:
                return visitor.visitChildren(self)



    def jump_statement(self):

        localctx = ModuleParser.Jump_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_jump_statement)
        self._la = 0 # Token type
        try:
            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                localctx = ModuleParser.BreakStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(ModuleParser.BREAK)
                self.state = 745
                self.match(ModuleParser.T__0)
                pass
            elif token in [63]:
                localctx = ModuleParser.ContinueStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 746
                self.match(ModuleParser.CONTINUE)
                self.state = 747
                self.match(ModuleParser.T__0)
                pass
            elif token in [66]:
                localctx = ModuleParser.GotoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 748
                self.match(ModuleParser.GOTO)
                self.state = 749
                self.identifier()
                self.state = 750
                self.match(ModuleParser.T__0)
                pass
            elif token in [67]:
                localctx = ModuleParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 752
                self.match(ModuleParser.RETURN)
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 16133) != 0):
                    self.state = 753
                    self.expr()


                self.state = 756
                self.match(ModuleParser.T__0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def number(self):
            return self.getTypedRuleContext(ModuleParser.NumberContext,0)


        def CHAR(self):
            return self.getToken(ModuleParser.CHAR, 0)

        def CASE(self):
            return self.getToken(ModuleParser.CASE, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ModuleParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 759
                self.match(ModuleParser.CASE)


            self.state = 765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37, 38, 39, 86]:
                self.state = 762
                self.identifier()
                pass
            elif token in [92, 93, 94]:
                self.state = 763
                self.number()
                pass
            elif token in [96]:
                self.state = 764
                self.match(ModuleParser.CHAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 767
            self.match(ModuleParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_expr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_statement" ):
                listener.enterExpr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_statement" ):
                listener.exitExpr_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_statement" ):
                return visitor.visitExpr_statement(self)
            else:
                return visitor.visitChildren(self)




    def expr_statement(self):

        localctx = ModuleParser.Expr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_expr_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 16133) != 0):
                self.state = 769
                self.expr()


            self.state = 772
            self.match(ModuleParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def type_name(self):
            return self.getTypedRuleContext(ModuleParser.Type_nameContext,0)


        def declarator(self):
            return self.getTypedRuleContext(ModuleParser.DeclaratorContext,0)


        def assign_expr(self):
            return self.getTypedRuleContext(ModuleParser.Assign_exprContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = ModuleParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_condition)
        try:
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.type_name()
                self.state = 776
                self.declarator()
                self.state = 777
                self.match(ModuleParser.T__40)
                self.state = 778
                self.assign_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_init_declarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitDeclWithAssignContext(Init_declaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Init_declaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(ModuleParser.DeclaratorContext,0)

        def initializer(self):
            return self.getTypedRuleContext(ModuleParser.InitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclWithAssign" ):
                listener.enterInitDeclWithAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclWithAssign" ):
                listener.exitInitDeclWithAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclWithAssign" ):
                return visitor.visitInitDeclWithAssign(self)
            else:
                return visitor.visitChildren(self)


    class InitDeclSimpleContext(Init_declaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Init_declaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(ModuleParser.DeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclSimple" ):
                listener.enterInitDeclSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclSimple" ):
                listener.exitInitDeclSimple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclSimple" ):
                return visitor.visitInitDeclSimple(self)
            else:
                return visitor.visitChildren(self)


    class InitDeclWithCallContext(Init_declaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Init_declaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(ModuleParser.DeclaratorContext,0)

        def expr(self):
            return self.getTypedRuleContext(ModuleParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclWithCall" ):
                listener.enterInitDeclWithCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclWithCall" ):
                listener.exitInitDeclWithCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclWithCall" ):
                return visitor.visitInitDeclWithCall(self)
            else:
                return visitor.visitChildren(self)



    def init_declarator(self):

        localctx = ModuleParser.Init_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_init_declarator)
        self._la = 0 # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                localctx = ModuleParser.InitDeclWithCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.declarator()
                self.state = 783
                self.match(ModuleParser.T__16)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 16133) != 0):
                    self.state = 784
                    self.expr()


                self.state = 787
                self.match(ModuleParser.T__17)
                pass

            elif la_ == 2:
                localctx = ModuleParser.InitDeclWithAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.declarator()
                self.state = 790
                self.match(ModuleParser.T__40)
                self.state = 791
                self.initializer()
                pass

            elif la_ == 3:
                localctx = ModuleParser.InitDeclSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 793
                self.declarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def ptrs(self):
            return self.getTypedRuleContext(ModuleParser.PtrsContext,0)


        def type_suffix(self):
            return self.getTypedRuleContext(ModuleParser.Type_suffixContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = ModuleParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==14:
                self.state = 796
                self.ptrs()


            self.state = 799
            self.identifier()
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 800
                self.type_suffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_expression(self):
            return self.getTypedRuleContext(ModuleParser.Conditional_expressionContext,0)


        def param_type_list(self):
            return self.getTypedRuleContext(ModuleParser.Param_type_listContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_type_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_suffix" ):
                listener.enterType_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_suffix" ):
                listener.exitType_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_suffix" ):
                return visitor.visitType_suffix(self)
            else:
                return visitor.visitChildren(self)




    def type_suffix(self):

        localctx = ModuleParser.Type_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_type_suffix)
        self._la = 0 # Token type
        try:
            self.state = 809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                self.match(ModuleParser.T__19)
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 962505372160) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 16133) != 0):
                    self.state = 804
                    self.conditional_expression()


                self.state = 807
                self.match(ModuleParser.T__20)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.param_type_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_decl(self):
            return self.getTypedRuleContext(ModuleParser.Var_declContext,0)


        def TYPEDEF(self):
            return self.getToken(ModuleParser.TYPEDEF, 0)

        def template_decl_start(self):
            return self.getTypedRuleContext(ModuleParser.Template_decl_startContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_simple_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_decl" ):
                listener.enterSimple_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_decl" ):
                listener.exitSimple_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_decl" ):
                return visitor.visitSimple_decl(self)
            else:
                return visitor.visitChildren(self)




    def simple_decl(self):

        localctx = ModuleParser.Simple_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_simple_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 811
                self.match(ModuleParser.TYPEDEF)


            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 814
                self.template_decl_start()


            self.state = 817
            self.var_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModuleParser.RULE_var_decl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeclByClassContext(Var_declContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Var_declContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def class_def(self):
            return self.getTypedRuleContext(ModuleParser.Class_defContext,0)

        def init_declarator_list(self):
            return self.getTypedRuleContext(ModuleParser.Init_declarator_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclByClass" ):
                listener.enterDeclByClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclByClass" ):
                listener.exitDeclByClass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclByClass" ):
                return visitor.visitDeclByClass(self)
            else:
                return visitor.visitChildren(self)


    class DeclByTypeContext(Var_declContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModuleParser.Var_declContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_name(self):
            return self.getTypedRuleContext(ModuleParser.Type_nameContext,0)

        def init_declarator_list(self):
            return self.getTypedRuleContext(ModuleParser.Init_declarator_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclByType" ):
                listener.enterDeclByType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclByType" ):
                listener.exitDeclByType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclByType" ):
                return visitor.visitDeclByType(self)
            else:
                return visitor.visitChildren(self)



    def var_decl(self):

        localctx = ModuleParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_var_decl)
        try:
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                localctx = ModuleParser.DeclByClassContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.class_def()
                self.state = 821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 820
                    self.init_declarator_list()


                pass

            elif la_ == 2:
                localctx = ModuleParser.DeclByTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.type_name()
                self.state = 824
                self.init_declarator_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def init_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Init_declaratorContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Init_declaratorContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_init_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_declarator_list" ):
                listener.enterInit_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_declarator_list" ):
                listener.exitInit_declarator_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_declarator_list" ):
                return visitor.visitInit_declarator_list(self)
            else:
                return visitor.visitChildren(self)




    def init_declarator_list(self):

        localctx = ModuleParser.Init_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_init_declarator_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.init_declarator()
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 829
                self.match(ModuleParser.T__1)
                self.state = 830
                self.init_declarator()
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 836
            self.match(ModuleParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_expr(self):
            return self.getTypedRuleContext(ModuleParser.Assign_exprContext,0)


        def OPENING_CURLY(self):
            return self.getToken(ModuleParser.OPENING_CURLY, 0)

        def initializer_list(self):
            return self.getTypedRuleContext(ModuleParser.Initializer_listContext,0)


        def CLOSING_CURLY(self):
            return self.getToken(ModuleParser.CLOSING_CURLY, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = ModuleParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_initializer)
        try:
            self.state = 843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 12, 13, 14, 17, 19, 22, 23, 24, 27, 28, 37, 38, 39, 84, 86, 92, 93, 94, 95, 96, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self.assign_expr()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.match(ModuleParser.OPENING_CURLY)
                self.state = 840
                self.initializer_list()
                self.state = 841
                self.match(ModuleParser.CLOSING_CURLY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ModuleParser.InitializerContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_list" ):
                listener.enterInitializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_list" ):
                listener.exitInitializer_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer_list" ):
                return visitor.visitInitializer_list(self)
            else:
                return visitor.visitChildren(self)




    def initializer_list(self):

        localctx = ModuleParser.Initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_initializer_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.initializer()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 846
                self.match(ModuleParser.T__1)
                self.state = 847
                self.initializer()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_KEY(self):
            return self.getToken(ModuleParser.CLASS_KEY, 0)

        def OPENING_CURLY(self):
            return self.getToken(ModuleParser.OPENING_CURLY, 0)

        def class_name(self):
            return self.getTypedRuleContext(ModuleParser.Class_nameContext,0)


        def base_classes(self):
            return self.getTypedRuleContext(ModuleParser.Base_classesContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_class_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_def" ):
                listener.enterClass_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_def" ):
                listener.exitClass_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_def" ):
                return visitor.visitClass_def(self)
            else:
                return visitor.visitChildren(self)




    def class_def(self):

        localctx = ModuleParser.Class_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_class_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(ModuleParser.CLASS_KEY)
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 562949953421319) != 0):
                self.state = 854
                self.class_name()


            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 857
                self.base_classes()


            self.state = 860
            self.match(ModuleParser.OPENING_CURLY)
            self.skipToEndOfObject(); 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_name" ):
                listener.enterClass_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_name" ):
                listener.exitClass_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_name" ):
                return visitor.visitClass_name(self)
            else:
                return visitor.visitChildren(self)




    def class_name(self):

        localctx = ModuleParser.Class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_classesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_class(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Base_classContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Base_classContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_base_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_classes" ):
                listener.enterBase_classes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_classes" ):
                listener.exitBase_classes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase_classes" ):
                return visitor.visitBase_classes(self)
            else:
                return visitor.visitChildren(self)




    def base_classes(self):

        localctx = ModuleParser.Base_classesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_base_classes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(ModuleParser.T__3)
            self.state = 866
            self.base_class()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 867
                self.match(ModuleParser.T__1)
                self.state = 868
                self.base_class()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_classContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def VIRTUAL(self):
            return self.getToken(ModuleParser.VIRTUAL, 0)

        def access_specifier(self):
            return self.getTypedRuleContext(ModuleParser.Access_specifierContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_base_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_class" ):
                listener.enterBase_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_class" ):
                listener.exitBase_class(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase_class" ):
                return visitor.visitBase_class(self)
            else:
                return visitor.visitChildren(self)




    def base_class(self):

        localctx = ModuleParser.Base_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_base_class)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 874
                self.match(ModuleParser.VIRTUAL)


            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 877
                self.access_specifier()


            self.state = 880
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Base_typeContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Base_typeContext,i)


        def CV_QUALIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.CV_QUALIFIER)
            else:
                return self.getToken(ModuleParser.CV_QUALIFIER, i)

        def template_param_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Template_param_listContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Template_param_listContext,i)


        def CLASS_KEY(self):
            return self.getToken(ModuleParser.CLASS_KEY, 0)

        def UNSIGNED(self):
            return self.getToken(ModuleParser.UNSIGNED, 0)

        def SIGNED(self):
            return self.getToken(ModuleParser.SIGNED, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = ModuleParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_type_name)
        self._la = 0 # Token type
        try:
            self.state = 916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==73:
                    self.state = 882
                    self.match(ModuleParser.CV_QUALIFIER)
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 32771) != 0):
                    self.state = 888
                    _la = self._input.LA(1)
                    if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 32771) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 891
                self.base_type()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 892
                    self.match(ModuleParser.T__28)
                    self.state = 893
                    self.template_param_list()
                    self.state = 894
                    self.match(ModuleParser.T__29)


                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==19:
                    self.state = 898
                    self.match(ModuleParser.T__18)
                    self.state = 899
                    self.base_type()
                    self.state = 904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==29:
                        self.state = 900
                        self.match(ModuleParser.T__28)
                        self.state = 901
                        self.template_param_list()
                        self.state = 902
                        self.match(ModuleParser.T__29)


                    self.state = 910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 911
                    self.match(ModuleParser.CV_QUALIFIER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.match(ModuleParser.UNSIGNED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 915
                self.match(ModuleParser.SIGNED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALPHA_NUMERIC(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.ALPHA_NUMERIC)
            else:
                return self.getToken(ModuleParser.ALPHA_NUMERIC, i)

        def VOID(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.VOID)
            else:
                return self.getToken(ModuleParser.VOID, i)

        def LONG(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.LONG)
            else:
                return self.getToken(ModuleParser.LONG, i)

        def getRuleIndex(self):
            return ModuleParser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase_type" ):
                return visitor.visitBase_type(self)
            else:
                return visitor.visitChildren(self)




    def base_type(self):

        localctx = ModuleParser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_base_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 918
                    _la = self._input.LA(1)
                    if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 131081) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 921 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_decl_specifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(ModuleParser.Type_nameContext,0)


        def AUTO(self):
            return self.getToken(ModuleParser.AUTO, 0)

        def REGISTER(self):
            return self.getToken(ModuleParser.REGISTER, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_param_decl_specifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_decl_specifiers" ):
                listener.enterParam_decl_specifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_decl_specifiers" ):
                listener.exitParam_decl_specifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_decl_specifiers" ):
                return visitor.visitParam_decl_specifiers(self)
            else:
                return visitor.visitChildren(self)




    def param_decl_specifiers(self):

        localctx = ModuleParser.Param_decl_specifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_param_decl_specifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80 or _la==81:
                self.state = 923
                _la = self._input.LA(1)
                if not(_la==80 or _la==81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 926
            self.type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ModuleParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_name" ):
                return visitor.visitParameter_name(self)
            else:
                return visitor.visitChildren(self)




    def parameter_name(self):

        localctx = ModuleParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VOID(self):
            return self.getToken(ModuleParser.VOID, 0)

        def param_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Param_typeContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Param_typeContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_param_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_type_list" ):
                listener.enterParam_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_type_list" ):
                listener.exitParam_type_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_type_list" ):
                return visitor.visitParam_type_list(self)
            else:
                return visitor.visitChildren(self)




    def param_type_list(self):

        localctx = ModuleParser.Param_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_param_type_list)
        self._la = 0 # Token type
        try:
            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                self.match(ModuleParser.T__16)
                self.state = 931
                self.match(ModuleParser.VOID)
                self.state = 932
                self.match(ModuleParser.T__17)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.match(ModuleParser.T__16)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 202783) != 0):
                    self.state = 934
                    self.param_type()
                    self.state = 939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==2:
                        self.state = 935
                        self.match(ModuleParser.T__1)
                        self.state = 936
                        self.param_type()
                        self.state = 941
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 944
                self.match(ModuleParser.T__17)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_decl_specifiers(self):
            return self.getTypedRuleContext(ModuleParser.Param_decl_specifiersContext,0)


        def param_type_id(self):
            return self.getTypedRuleContext(ModuleParser.Param_type_idContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_param_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_type" ):
                listener.enterParam_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_type" ):
                listener.exitParam_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_type" ):
                return visitor.visitParam_type(self)
            else:
                return visitor.visitChildren(self)




    def param_type(self):

        localctx = ModuleParser.Param_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_param_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.param_decl_specifiers()
            self.state = 948
            self.param_type_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_type_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_type_id(self):
            return self.getTypedRuleContext(ModuleParser.Param_type_idContext,0)


        def ptrs(self):
            return self.getTypedRuleContext(ModuleParser.PtrsContext,0)


        def type_suffix(self):
            return self.getTypedRuleContext(ModuleParser.Type_suffixContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(ModuleParser.Parameter_nameContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_param_type_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_type_id" ):
                listener.enterParam_type_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_type_id" ):
                listener.exitParam_type_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_type_id" ):
                return visitor.visitParam_type_id(self)
            else:
                return visitor.visitChildren(self)




    def param_type_id(self):

        localctx = ModuleParser.Param_type_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_param_type_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==14:
                self.state = 950
                self.ptrs()


            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 953
                self.match(ModuleParser.T__16)
                self.state = 954
                self.param_type_id()
                self.state = 955
                self.match(ModuleParser.T__17)
                pass

            elif la_ == 2:
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 562949953421319) != 0):
                    self.state = 957
                    self.parameter_name()


                pass


            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17 or _la==20:
                self.state = 962
                self.type_suffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALPHA_NUMERIC(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.ALPHA_NUMERIC)
            else:
                return self.getToken(ModuleParser.ALPHA_NUMERIC, i)

        def access_specifier(self):
            return self.getTypedRuleContext(ModuleParser.Access_specifierContext,0)


        def getRuleIndex(self):
            return ModuleParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = ModuleParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_identifier)
        try:
            self.state = 974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 965
                self.match(ModuleParser.ALPHA_NUMERIC)
                self.state = 970
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 966
                        self.match(ModuleParser.T__18)
                        self.state = 967
                        self.match(ModuleParser.ALPHA_NUMERIC) 
                    self.state = 972
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                pass
            elif token in [37, 38, 39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.access_specifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_LITERAL(self):
            return self.getToken(ModuleParser.HEX_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ModuleParser.DECIMAL_LITERAL, 0)

        def OCTAL_LITERAL(self):
            return self.getToken(ModuleParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return ModuleParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = ModuleParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            _la = self._input.LA(1)
            if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptr_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Ptr_operatorContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Ptr_operatorContext,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_ptrs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrs" ):
                listener.enterPtrs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrs" ):
                listener.exitPtrs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrs" ):
                return visitor.visitPtrs(self)
            else:
                return visitor.visitChildren(self)




    def ptrs(self):

        localctx = ModuleParser.PtrsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_ptrs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 978
                self.ptr_operator()
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 979
                    self.match(ModuleParser.T__55)


                self.state = 984 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==9 or _la==14):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_expr_w_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_water(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Assign_waterContext)
            else:
                return self.getTypedRuleContext(ModuleParser.Assign_waterContext,i)


        def OPENING_CURLY(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.OPENING_CURLY)
            else:
                return self.getToken(ModuleParser.OPENING_CURLY, i)

        def assign_expr_w__l2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Assign_expr_w__l2Context)
            else:
                return self.getTypedRuleContext(ModuleParser.Assign_expr_w__l2Context,i)


        def CLOSING_CURLY(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.CLOSING_CURLY)
            else:
                return self.getToken(ModuleParser.CLOSING_CURLY, i)

        def getRuleIndex(self):
            return ModuleParser.RULE_assign_expr_w_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_expr_w_" ):
                listener.enterAssign_expr_w_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_expr_w_" ):
                listener.exitAssign_expr_w_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_expr_w_" ):
                return visitor.visitAssign_expr_w_(self)
            else:
                return visitor.visitChildren(self)




    def assign_expr_w_(self):

        localctx = ModuleParser.Assign_expr_w_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_assign_expr_w_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -3538952) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274852741119) != 0):
                self.state = 986
                self.assign_water()
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==17 or _la==20 or _la==87:
                self.state = 1004
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [87]:
                    self.state = 992
                    self.match(ModuleParser.OPENING_CURLY)
                    self.state = 993
                    self.assign_expr_w__l2()
                    self.state = 994
                    self.match(ModuleParser.CLOSING_CURLY)
                    pass
                elif token in [17]:
                    self.state = 996
                    self.match(ModuleParser.T__16)
                    self.state = 997
                    self.assign_expr_w__l2()
                    self.state = 998
                    self.match(ModuleParser.T__17)
                    pass
                elif token in [20]:
                    self.state = 1000
                    self.match(ModuleParser.T__19)
                    self.state = 1001
                    self.assign_expr_w__l2()
                    self.state = 1002
                    self.match(ModuleParser.T__20)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -3538952) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274852741119) != 0):
                    self.state = 1006
                    self.assign_water()
                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_expr_w__l2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_water_l2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Assign_water_l2Context)
            else:
                return self.getTypedRuleContext(ModuleParser.Assign_water_l2Context,i)


        def OPENING_CURLY(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.OPENING_CURLY)
            else:
                return self.getToken(ModuleParser.OPENING_CURLY, i)

        def assign_expr_w__l2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Assign_expr_w__l2Context)
            else:
                return self.getTypedRuleContext(ModuleParser.Assign_expr_w__l2Context,i)


        def CLOSING_CURLY(self, i:int=None):
            if i is None:
                return self.getTokens(ModuleParser.CLOSING_CURLY)
            else:
                return self.getToken(ModuleParser.CLOSING_CURLY, i)

        def getRuleIndex(self):
            return ModuleParser.RULE_assign_expr_w__l2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_expr_w__l2" ):
                listener.enterAssign_expr_w__l2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_expr_w__l2" ):
                listener.exitAssign_expr_w__l2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_expr_w__l2" ):
                return visitor.visitAssign_expr_w__l2(self)
            else:
                return visitor.visitChildren(self)




    def assign_expr_w__l2(self):

        localctx = ModuleParser.Assign_expr_w__l2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_assign_expr_w__l2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -3538946) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274852741119) != 0):
                self.state = 1017
                self.assign_water_l2()
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==17 or _la==20 or _la==87:
                self.state = 1035
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [87]:
                    self.state = 1023
                    self.match(ModuleParser.OPENING_CURLY)
                    self.state = 1024
                    self.assign_expr_w__l2()
                    self.state = 1025
                    self.match(ModuleParser.CLOSING_CURLY)
                    pass
                elif token in [17]:
                    self.state = 1027
                    self.match(ModuleParser.T__16)
                    self.state = 1028
                    self.assign_expr_w__l2()
                    self.state = 1029
                    self.match(ModuleParser.T__17)
                    pass
                elif token in [20]:
                    self.state = 1031
                    self.match(ModuleParser.T__19)
                    self.state = 1032
                    self.assign_expr_w__l2()
                    self.state = 1033
                    self.match(ModuleParser.T__20)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -3538946) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274852741119) != 0):
                    self.state = 1037
                    self.assign_water_l2()
                    self.state = 1042
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expr_w_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def no_squares(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.No_squaresContext)
            else:
                return self.getTypedRuleContext(ModuleParser.No_squaresContext,i)


        def constant_expr_w_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModuleParser.Constant_expr_w_Context)
            else:
                return self.getTypedRuleContext(ModuleParser.Constant_expr_w_Context,i)


        def getRuleIndex(self):
            return ModuleParser.RULE_constant_expr_w_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expr_w_" ):
                listener.enterConstant_expr_w_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expr_w_" ):
                listener.exitConstant_expr_w_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expr_w_" ):
                return visitor.visitConstant_expr_w_(self)
            else:
                return visitor.visitChildren(self)




    def constant_expr_w_(self):

        localctx = ModuleParser.Constant_expr_w_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_constant_expr_w_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -3145730) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274877906943) != 0):
                self.state = 1048
                self.no_squares()
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==20:
                self.state = 1054
                self.match(ModuleParser.T__19)
                self.state = 1055
                self.constant_expr_w_()
                self.state = 1056
                self.match(ModuleParser.T__20)
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -3145730) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 274877906943) != 0):
                    self.state = 1057
                    self.no_squares()
                    self.state = 1062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[25] = self.postfix_expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfix_expression_sempred(self, localctx:Postfix_expressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




